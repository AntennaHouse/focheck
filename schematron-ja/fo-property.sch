<?xml version="1.0" encoding="UTF-8"?>
<!-- Autogenerated file.  Do not edit. --><!-- Generated using 'focheck' version 0.7.0 --><!--
     Copyright 2019 Antenna House, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
--><pattern xmlns="http://purl.oclc.org/dsdl/schematron" xmlns:axf="http://www.antennahouse.com/names/XSL/Extensions" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" id="fo-property">
   <xsl:include href="../xsl/parser-runner.xsl"/>

   <!-- absolute-position -->
   <!-- auto | absolute | fixed | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#absolute-position -->
   <rule context="fo:*/@absolute-position">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">absolute-position=&quot;<value-of select="."/>&quot; は auto、absolute、fixed 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'absolute', 'fixed', 'inherit'))">absolute-position=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'absolute', 'fixed', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">absolute-position=&quot;&quot; は auto、absolute、fixed 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：absolute-position=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- active-state -->
   <!-- link | visited | active | hover | focus -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#active-state -->
   <rule context="fo:*/@active-state">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">active-state=&quot;<value-of select="."/>&quot; は link、visited、active、hover 又は focus でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('link', 'visited', 'active', 'hover', 'focus'))">active-state=&quot;<value-of select="."/>&quot;. Allowed keywords are 'link', 'visited', 'active', 'hover', and 'focus'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">active-state=&quot;&quot; は link、visited、active、hover 又は focus でなければなりません。&lt;</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：active-state=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- alignment-adjust -->
   <!-- auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | <percentage> | <length> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#alignment-adjust -->
   <rule context="fo:*/@alignment-adjust">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Percent', 'Length', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">alignment-adjust=&quot;<value-of select="."/>&quot; は auto、baseline、before-edge、text-before-edge、middle、central、after-edge、text-after-edge、ideographic、alphabetic、hanging、mathematical、inherit、Percent 又は Length でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'baseline', 'before-edge', 'text-before-edge', 'middle', 'central', 'after-edge', 'text-after-edge', 'ideographic', 'alphabetic', 'hanging', 'mathematical', 'inherit'))">alignment-adjust=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'baseline', 'before-edge', 'text-before-edge', 'middle', 'central', 'after-edge', 'text-after-edge', 'ideographic', 'alphabetic', 'hanging', 'mathematical', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">alignment-adjust=&quot;&quot; は auto、baseline、before-edge、text-before-edge、middle、central、after-edge、text-after-edge、ideographic、alphabetic、hanging、mathematical、inherit、Percent 又は Length でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：alignment-adjust=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- alignment-baseline -->
   <!-- auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#alignment-baseline -->
   <rule context="fo:*/@alignment-baseline">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">alignment-baseline=&quot;<value-of select="."/>&quot; は auto、baseline、before-edge、text-before-edge、middle、central、after-edge、text-after-edge、ideographic、alphabetic、hanging、mathematical 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'baseline', 'before-edge', 'text-before-edge', 'middle', 'central', 'after-edge', 'text-after-edge', 'ideographic', 'alphabetic', 'hanging', 'mathematical', 'inherit'))">alignment-baseline=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'baseline', 'before-edge', 'text-before-edge', 'middle', 'central', 'after-edge', 'text-after-edge', 'ideographic', 'alphabetic', 'hanging', 'mathematical', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">alignment-baseline=&quot;&quot; は auto、baseline、before-edge、text-before-edge、middle、central、after-edge、text-after-edge、ideographic、alphabetic、hanging、mathematical 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：alignment-baseline=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- allowed-height-scale -->
   <!-- [ any | <percentage> ]* | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#allowed-height-scale -->
   <rule context="fo:*/@allowed-height-scale">
      <report test=". eq ''" role="Warning">allowed-height-scale=&quot;&quot; は [ any | &lt;percentage&gt; ]* | inherit でなければなりません。</report>
   </rule>

   <!-- allowed-width-scale -->
   <!-- [ any | <percentage> ]* | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#allowed-width-scale -->
   <rule context="fo:*/@allowed-width-scale">
      <report test=". eq ''" role="Warning">allowed-width-scale=&quot;&quot; は [ any | &lt;percentage&gt; ]* | inherit でなければなりません。</report>
   </rule>

   <!-- auto-restore -->
   <!-- true | false -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#auto-restore -->
   <rule context="fo:*/@auto-restore">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">auto-restore=&quot;<value-of select="."/>&quot; は true 又は false でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('true', 'false'))">auto-restore=&quot;<value-of select="."/>&quot;. Allowed keywords are 'true' and 'false'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">auto-restore=&quot;&quot; は true 又は false でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：auto-restore=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- background -->
   <!-- [<background-color> || <background-image> || <background-repeat> || <background-attachment> || <background-position> ]] | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#background -->
   <rule context="fo:*/@background">
      <report test=". eq ''" role="Warning">background=&quot;&quot; は [&lt;background-color&gt; || &lt;background-image&gt; || &lt;background-repeat&gt; || &lt;background-attachment&gt; || &lt;background-position&gt; ]] | inherit でなければなりません。</report>
   </rule>

   <!-- background-attachment -->
   <!-- scroll | fixed | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#background-attachment -->
   <rule context="fo:*/@background-attachment">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">background-attachment=&quot;<value-of select="."/>&quot; は scroll、fixed 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('scroll', 'fixed', 'inherit'))">background-attachment=&quot;<value-of select="."/>&quot;. Allowed keywords are 'scroll', 'fixed', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">background-attachment=&quot;&quot; は scroll、fixed 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：background-attachment=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- background-color -->
   <!-- <color> | transparent | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#background-color -->
   <rule context="fo:*/@background-color">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Color', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">background-color=&quot;<value-of select="."/>&quot; should be Color, 'transparent', or 'inherit'. <value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('transparent', 'inherit'))">background-color=&quot;<value-of select="."/>&quot;. Allowed keywords are 'transparent' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">background-color=&quot;&quot; should be Color, 'transparent', or 'inherit'.</report>
      <report test="local-name($expression) = 'ERROR'"> シンタックスエラー：background-color=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- background-image -->
   <!-- <uri-specification> | none | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#background-image -->
   <rule context="fo:*/@background-image">
      <report test=". eq ''" role="Warning">background-image=&quot;&quot; は &lt;uri-specification&gt; | none | inherit でなければなりません。</report>
   </rule>

   <!-- background-position -->
   <!-- [ [<percentage> | <length> ]{1,2} | [ [top | center | bottom] || [left | center | right] ] ] | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#background-position -->
   <rule context="fo:*/@background-position">
      <report test=". eq ''" role="Warning">background-position=&quot;&quot; は [ [&lt;percentage&gt; | &lt;length&gt; ]{1,2} | [ [top | center | bottom] || [left | center | right] ] ] | inherit でなければなりません。</report>
   </rule>

   <!-- background-position-horizontal -->
   <!-- <percentage> | <length> | left | center | right | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#background-position-horizontal -->
   <rule context="fo:*/@background-position-horizontal">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Percent', 'Length', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">background-position-horizontal=&quot;<value-of select="."/>&quot; は Percent、Length、left、center、right 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('left', 'center', 'right', 'inherit'))">background-position-horizontal=&quot;<value-of select="."/>&quot;. Allowed keywords are 'left', 'center', 'right', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">background-position-horizontal=&quot;&quot; は Percent、Length、left、center、right 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：background-position-horizontal=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- background-position-vertical -->
   <!-- <percentage> | <length> | top | center | bottom | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#background-position-vertical -->
   <rule context="fo:*/@background-position-vertical">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Percent', 'Length', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">background-position-vertical=&quot;<value-of select="."/>&quot; は Percent、Length、top、center、bottom 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('top', 'center', 'bottom', 'inherit'))">background-position-vertical=&quot;<value-of select="."/>&quot;. Allowed keywords are 'top', 'center', 'bottom', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">background-position-vertical=&quot;&quot; は Percent、Length、top、center、bottom 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：background-position-vertical=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- background-repeat -->
   <!-- repeat | repeat-x | repeat-y | no-repeat | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#background-repeat -->
   <rule context="fo:*/@background-repeat">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">background-repeat=&quot;<value-of select="."/>&quot; should be 'repeat', 'repeat-x', 'repeat-y', 'no-repeat', or 'paginate'. <value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('repeat', 'repeat-x', 'repeat-y', 'no-repeat', 'paginate'))">background-repeat=&quot;<value-of select="."/>&quot;. Allowed keywords are 'repeat', 'repeat-x', 'repeat-y', 'no-repeat', and 'paginate'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">background-repeat=&quot;&quot; should be 'repeat', 'repeat-x', 'repeat-y', 'no-repeat', or 'paginate'.</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：background-repeat=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- baseline-shift -->
   <!-- baseline | sub | super | <percentage> | <length> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#baseline-shift -->
   <rule context="fo:*/@baseline-shift">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Percent', 'Length', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">baseline-shift=&quot;<value-of select="."/>&quot; は baseline、sub、super、inherit、Percent 又は Length でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('baseline', 'sub', 'super', 'inherit'))">baseline-shift=&quot;<value-of select="."/>&quot;. Allowed keywords are 'baseline', 'sub', 'super', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">baseline-shift=&quot;&quot; は baseline、sub、super、inherit、Percent 又は Length でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：baseline-shift=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- blank-or-not-blank -->
   <!-- blank | not-blank | any | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#blank-or-not-blank -->
   <rule context="fo:*/@blank-or-not-blank">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">blank-or-not-blank=&quot;<value-of select="."/>&quot; は blank、not-blank、any 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('blank', 'not-blank', 'any', 'inherit'))">blank-or-not-blank=&quot;<value-of select="."/>&quot;. Allowed keywords are 'blank', 'not-blank', 'any', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">blank-or-not-blank=&quot;&quot; は blank、not-blank、any 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：blank-or-not-blank=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- block-progression-dimension -->
   <!-- auto | <length> | <percentage> | <length-range> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#block-progression-dimension -->
   <rule context="fo:*/@block-progression-dimension">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">block-progression-dimension=&quot;<value-of select="."/>&quot; は auto、inherit、Length 又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">block-progression-dimension=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">block-progression-dimension=&quot;&quot; は auto、inherit、Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：block-progression-dimension=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- border -->
   <!-- [ <border-width> || <border-style> || [ <color> | transparent ] ] | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#border -->
   <rule context="fo:*/@border">
      <report test=". eq ''" role="Warning">border=&quot;&quot; は [ &lt;border-width&gt; || &lt;border-style&gt; || [ &lt;color&gt; | transparent ] ] | inherit でなければなりません。</report>
   </rule>

   <!-- border-after-color -->
   <!-- <color> | transparent | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-after-color -->
   <rule context="fo:*/@border-after-color">
      <extends rule="color-transparent"/>
   </rule>

   <!-- border-after-precedence -->
   <!-- force | <integer> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-after-precedence -->
   <rule context="fo:*/@border-after-precedence">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Number', 'EMPTY', 'ERROR', 'Object')">border-after-precedence=&quot;<value-of select="."/>&quot; は force、inherit 又は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('force', 'inherit'))">border-after-precedence=&quot;<value-of select="."/>&quot;. Allowed keywords are 'force' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">border-after-precedence=&quot;&quot; は force、inherit 又は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：border-after-precedence=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- border-after-style -->
   <!-- <border-style> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-after-style -->
   <rule context="fo:*/@border-after-style">
      <extends rule="border-style"/>
   </rule>

   <!-- border-after-width -->
   <!-- <border-width> | <length-conditional> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-after-width -->
   <rule context="fo:*/@border-after-width">
      <extends rule="border-width"/>
   </rule>

   <!-- border-before-color -->
   <!-- <color> | transparent | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-before-color -->
   <rule context="fo:*/@border-before-color">
      <extends rule="color-transparent"/>
   </rule>

   <!-- border-before-precedence -->
   <!-- force | <integer> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-before-precedence -->
   <rule context="fo:*/@border-before-precedence">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Number', 'EMPTY', 'ERROR', 'Object')">border-before-precedence=&quot;<value-of select="."/>&quot; は force、inherit 又は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('force', 'inherit'))">border-before-precedence=&quot;<value-of select="."/>&quot;. Allowed keywords are 'force' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">border-before-precedence=&quot;&quot; は force、inherit 又は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：border-before-precedence=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- border-before-style -->
   <!-- <border-style> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-before-style -->
   <rule context="fo:*/@border-before-style">
      <extends rule="border-style"/>
   </rule>

   <!-- border-before-width -->
   <!-- <border-width> | <length-conditional> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-before-width -->
   <rule context="fo:*/@border-before-width">
      <extends rule="border-width"/>
   </rule>

   <!-- border-bottom -->
   <!-- [ <border-width> || <border-style> || [ <color> | transparent ] ] | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#border-bottom -->
   <rule context="fo:*/@border-bottom">
      <report test=". eq ''" role="Warning">border-bottom=&quot;&quot; は [ &lt;border-width&gt; || &lt;border-style&gt; || [ &lt;color&gt; | transparent ] ] | inherit でなければなりません。</report>
   </rule>

   <!-- border-bottom-color -->
   <!-- <color> | transparent | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-bottom-color -->
   <rule context="fo:*/@border-bottom-color">
      <extends rule="color-transparent"/>
   </rule>

   <!-- border-bottom-style -->
   <!-- <border-style> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-bottom-style -->
   <rule context="fo:*/@border-bottom-style">
      <extends rule="border-style"/>
   </rule>

   <!-- border-bottom-width -->
   <!-- <border-width> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-bottom-width -->
   <rule context="fo:*/@border-bottom-width">
      <extends rule="border-width"/>
   </rule>

   <!-- border-collapse -->
   <!-- collapse | collapse-with-precedence | separate | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-collapse -->
   <rule context="fo:*/@border-collapse">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">border-collapse=&quot;<value-of select="."/>&quot; は collapse、collapse-with-precedence、separate 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('collapse', 'collapse-with-precedence', 'separate', 'inherit'))">border-collapse=&quot;<value-of select="."/>&quot;. Allowed keywords are 'collapse', 'collapse-with-precedence', 'separate', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">border-collapse=&quot;&quot; は collapse、collapse-with-precedence、separate 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：border-collapse=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- border-color -->
   <!-- [ <color> | transparent ]{1,4} | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#border-color -->
   <rule context="fo:*/@border-color">
      <report test=". eq ''" role="Warning">border-color=&quot;&quot; は [ &lt;color&gt; | transparent ]{1,4} | inherit でなければなりません。</report>
   </rule>

   <!-- border-end-color -->
   <!-- <color> | transparent | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-end-color -->
   <rule context="fo:*/@border-end-color">
      <extends rule="color-transparent"/>
   </rule>

   <!-- border-end-precedence -->
   <!-- force | <integer> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-end-precedence -->
   <rule context="fo:*/@border-end-precedence">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Number', 'EMPTY', 'ERROR', 'Object')">border-end-precedence=&quot;<value-of select="."/>&quot; は force、inherit 又は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('force', 'inherit'))">border-end-precedence=&quot;<value-of select="."/>&quot;. Allowed keywords are 'force' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">border-end-precedence=&quot;&quot; は force、inherit 又は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：border-end-precedence=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- border-end-style -->
   <!-- <border-style> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-end-style -->
   <rule context="fo:*/@border-end-style">
      <extends rule="border-style"/>
   </rule>

   <!-- border-end-width -->
   <!-- <border-width> | <length-conditional> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-end-width -->
   <rule context="fo:*/@border-end-width">
      <extends rule="border-width"/>
   </rule>

   <!-- border-left -->
   <!-- [ <border-width> || <border-style> || [ <color> | transparent ] ] | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#border-left -->
   <rule context="fo:*/@border-left">
      <report test=". eq ''" role="Warning">border-left=&quot;&quot; は [ &lt;border-width&gt; || &lt;border-style&gt; || [ &lt;color&gt; | transparent ] ] | inherit でなければなりません。</report>
   </rule>

   <!-- border-left-color -->
   <!-- <color> | transparent | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-left-color -->
   <rule context="fo:*/@border-left-color">
      <extends rule="color-transparent"/>
   </rule>

   <!-- border-left-style -->
   <!-- <border-style> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-left-style -->
   <rule context="fo:*/@border-left-style">
      <extends rule="border-style"/>
   </rule>

   <!-- border-left-width -->
   <!-- <border-width> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-left-width -->
   <rule context="fo:*/@border-left-width">
      <extends rule="border-width"/>
   </rule>

   <!-- border-right -->
   <!-- [ <border-width> || <border-style> || [ <color> | transparent ] ] | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#border-right -->
   <rule context="fo:*/@border-right">
      <report test=". eq ''" role="Warning">border-right=&quot;&quot; は [ &lt;border-width&gt; || &lt;border-style&gt; || [ &lt;color&gt; | transparent ] ] | inherit でなければなりません。</report>
   </rule>

   <!-- border-right-color -->
   <!-- <color> | transparent | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-right-color -->
   <rule context="fo:*/@border-right-color">
      <extends rule="color-transparent"/>
   </rule>

   <!-- border-right-style -->
   <!-- <border-style> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-right-style -->
   <rule context="fo:*/@border-right-style">
      <extends rule="border-style"/>
   </rule>

   <!-- border-right-width -->
   <!-- <border-width> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-right-width -->
   <rule context="fo:*/@border-right-width">
      <extends rule="border-width"/>
   </rule>

   <!-- border-separation -->
   <!-- <length-bp-ip-direction> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-separation -->
   <rule context="fo:*/@border-separation">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">border-separation=&quot;<value-of select="."/>&quot; は Length 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">border-separation=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">border-separation=&quot;&quot; は Length 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：border-separation=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- border-spacing -->
   <!-- <length> <length>? | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#border-spacing -->
   <rule context="fo:*/@border-spacing">
      <report test=". eq ''" role="Warning">border-spacing=&quot;&quot; は &lt;length&gt; &lt;length&gt;?| inherit。</report>
   </rule>

   <!-- border-start-color -->
   <!-- <color> | transparent | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-start-color -->
   <rule context="fo:*/@border-start-color">
      <extends rule="color-transparent"/>
   </rule>

   <!-- border-start-precedence -->
   <!-- force | <integer> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-start-precedence -->
   <rule context="fo:*/@border-start-precedence">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Number', 'EMPTY', 'ERROR', 'Object')">border-start-precedence=&quot;<value-of select="."/>&quot; は force、inherit 又は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('force', 'inherit'))">border-start-precedence=&quot;<value-of select="."/>&quot;. Allowed keywords are 'force' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">border-start-precedence=&quot;&quot; は force 、 inherit 又は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：border-start-precedence=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- border-start-style -->
   <!-- <border-style> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-start-style -->
   <rule context="fo:*/@border-start-style">
      <extends rule="border-style"/>
   </rule>

   <!-- border-start-width -->
   <!-- <border-width> | <length-conditional> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-start-width -->
   <rule context="fo:*/@border-start-width">
      <extends rule="border-width"/>
   </rule>

   <!-- border-style -->
   <!-- <border-style>{1,4} | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#border-style -->
   <rule context="fo:*/@border-style">
      <report test=". eq ''" role="Warning">border-style=&quot;&quot; は &lt;border-style&gt;{1,4} | inherit でなければなりません。</report>
   </rule>

   <!-- border-top -->
   <!-- [ <border-width> || <border-style> || [ <color> | transparent ] ] | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#border-top -->
   <rule context="fo:*/@border-top">
      <report test=". eq ''" role="Warning">border-top=&quot;&quot; は [ &lt;border-width&gt; || &lt;border-style&gt; || [ &lt;color&gt; | transparent ] ] | inherit でなければなりません。</report>
   </rule>

   <!-- border-top-color -->
   <!-- <color> | transparent | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-top-color -->
   <rule context="fo:*/@border-top-color">
      <extends rule="color-transparent"/>
   </rule>

   <!-- border-top-style -->
   <!-- <border-style> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-top-style -->
   <rule context="fo:*/@border-top-style">
      <extends rule="border-style"/>
   </rule>

   <!-- border-top-width -->
   <!-- <border-width> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#border-top-width -->
   <rule context="fo:*/@border-top-width">
      <extends rule="border-width"/>
   </rule>

   <!-- border-width -->
   <!-- <border-width>{1,4} | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#border-width -->
   <rule context="fo:*/@border-width">
      <report test=". eq ''" role="Warning">border-width=&quot;&quot; は &lt;border-width&gt;{1,4} | inherit でなければなりません。</report>
   </rule>

   <!-- bottom -->
   <!-- <length> | <percentage> | auto | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#bottom -->
   <rule context="fo:*/@bottom">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">bottom=&quot;<value-of select="."/>&quot; は Length、Percent、 auto 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">bottom=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">bottom=&quot;&quot; は Length、Percent、auto 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：bottom=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- break-after -->
   <!-- auto | column | page | even-page | odd-page | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#break-after -->
   <rule context="fo:*/@break-after">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">break-after=&quot;<value-of select="."/>&quot; は auto、column、page、even-page、odd-page 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'column', 'page', 'even-page', 'odd-page', 'inherit'))">break-after=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'column', 'page', 'even-page', 'odd-page', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">break-after=&quot;&quot; は auto、column、page、even-page、odd-page 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：break-after=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- break-before -->
   <!-- auto | column | page | even-page | odd-page | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#break-before -->
   <rule context="fo:*/@break-before">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">break-before=&quot;<value-of select="."/>&quot; は auto、column、page、even-page、odd-page 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'column', 'page', 'even-page', 'odd-page', 'inherit'))">break-before=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'column', 'page', 'even-page', 'odd-page', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">break-before=&quot;&quot; は auto、column、page、even-page、odd-page 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：break-before=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- caption-side -->
   <!-- before | after | start | end | top | bottom | left | right | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#caption-side -->
   <rule context="fo:*/@caption-side">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">caption-side=&quot;<value-of select="."/>&quot; は before、after、start、end、top、bottom、left、right 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('before', 'after', 'start', 'end', 'top', 'bottom', 'left', 'right', 'inherit'))">caption-side=&quot;<value-of select="."/>&quot;. Allowed keywords are 'before', 'after', 'start', 'end', 'top', 'bottom', 'left', 'right', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">caption-side=&quot;&quot; は before、after、start、end、top、bottom、left、right 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：caption-side=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- case-name -->
   <!-- <name> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#case-name -->
   <rule context="fo:*/@case-name">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">case-name=&quot;<value-of select="."/>&quot; は EnumerationToken でなければなりません。. <value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">case-name=&quot;&quot; は EnumerationToken でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：case-name=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- case-title -->
   <!-- <string> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#case-title -->
   <rule context="fo:*/@case-title">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Literal', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">case-title=&quot;<value-of select="."/>&quot; は Literal 又は EnumerationToken でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">case-title=&quot;&quot; は Literal 又は EnumerationToken でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：case-title=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- change-bar-class -->
   <!-- <name> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#change-bar-class -->
   <rule context="fo:*/@change-bar-class">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">change-bar-class=&quot;<value-of select="."/>&quot; は EnumerationToken でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">change-bar-class=&quot;&quot; は EnumerationToken でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：change-bar-class=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- change-bar-color -->
   <!-- <color> -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#change-bar-color -->
   <rule context="fo:*/@change-bar-color">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Color', 'EMPTY', 'ERROR', 'Object')">change-bar-color=&quot;<value-of select="."/>&quot; should be Color. <value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">change-bar-color=&quot;&quot; should be Color.</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：change-bar-color=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- change-bar-offset -->
   <!-- <length> -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#change-bar-offset -->
   <rule context="fo:*/@change-bar-offset">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">change-bar-offset=&quot;<value-of select="."/>&quot; は Length でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">change-bar-offset=&quot;&quot; は Length でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：change-bar-offset=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- change-bar-placement -->
   <!-- start | end | left | right | inside | outside | alternate -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#change-bar-placement -->
   <rule context="fo:*/@change-bar-placement">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">change-bar-placement=&quot;<value-of select="."/>&quot; は start、end、left、right、inside、outside 又は alternate でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('start', 'end', 'left', 'right', 'inside', 'outside', 'alternate'))">change-bar-placement=&quot;<value-of select="."/>&quot;. Allowed keywords are 'start', 'end', 'left', 'right', 'inside', 'outside', and 'alternate'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">change-bar-placement=&quot;&quot; は start、end、left、right、inside、outside 又は alternate でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：change-bar-placement=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- change-bar-style -->
   <!-- <border-style> -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#change-bar-style -->
   <rule context="fo:*/@change-bar-style">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">change-bar-style=&quot;<value-of select="."/>&quot; は none、hidden、dotted、dashed、solid、double、groove、ridge、inset 又は outset でなければなりません。 <value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'))">change-bar-style=&quot;<value-of select="."/>&quot;. Allowed keywords are 'none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', and 'outset'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">change-bar-style=&quot;&quot; は none、hidden、dotted、dashed、solid、double、groove、ridge、inset 又は outset でなければなりません。 </report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：change-bar-style=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- change-bar-width -->
   <!-- <border-width> -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#change-bar-width -->
   <rule context="fo:*/@change-bar-width">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">change-bar-width=&quot;<value-of select="."/>&quot; は thin、medium、thick 又は Length でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('thin', 'medium', 'thick'))">change-bar-width=&quot;<value-of select="."/>&quot;. Allowed keywords are 'thin', 'medium', and 'thick'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">change-bar-width=&quot;&quot; は thin、medium、thick 又は Length でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：change-bar-width=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- character -->
   <!-- <character> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#character -->
   <rule context="fo:*/@character">
      <report test=". eq ''" role="Warning">character=&quot;&quot; は &lt;character&gt; でなければなりません。</report>
   </rule>

   <!-- clear -->
   <!-- start | end | left | right | inside | outside | both | none | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#clear -->
   <rule context="fo:*/@clear">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">clear=&quot;<value-of select="."/>&quot; は start、end、left、right、inside、outside、both、none 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('start', 'end', 'left', 'right', 'inside', 'outside', 'both', 'none', 'inherit'))">clear=&quot;<value-of select="."/>&quot;. Allowed keywords are 'start', 'end', 'left', 'right', 'inside', 'outside', 'both', 'none', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">clear=&quot;&quot; は start、end、left、right、inside、outside、both、none 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：clear=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- clip -->
   <!-- <shape> | auto | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#clip -->
   <rule context="fo:*/@clip">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Function', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">clip=&quot;<value-of select="."/>&quot; は Function、auto 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">clip=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">clip=&quot;&quot; は Function、auto 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：clip=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- color -->
   <!-- <color> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#color -->
   <rule context="fo:*/@color">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Color', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">color=&quot;<value-of select="."/>&quot; should be Color or 'inherit'. <value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">color=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">color=&quot;&quot; should be Color or 'inherit'.</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：color=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- color-profile-name -->
   <!-- <name> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#color-profile-name -->
   <rule context="fo:*/@color-profile-name">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">color-profile-name=&quot;<value-of select="."/>&quot; は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">color-profile-name=&quot;&quot; は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：color-profile-name=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- column-count -->
   <!-- <number> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#column-count -->
   <rule context="fo:*/@column-count">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Number', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">column-count=&quot;<value-of select="."/>&quot; は Number 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">column-count=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">column-count=&quot;&quot; は Number 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：column-count=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- column-gap -->
   <!-- <length> | <percentage> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#column-gap -->
   <rule context="fo:*/@column-gap">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">column-gap=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">column-gap=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">column-gap=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：column-gap=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- column-number -->
   <!-- <number> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#column-number -->
   <rule context="fo:*/@column-number">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Number', 'EMPTY', 'ERROR', 'Object')">column-number=&quot;<value-of select="."/>&quot; は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">column-number=&quot;&quot; は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：column-number=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- column-width -->
   <!-- <length> | <percentage> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#column-width -->
   <rule context="fo:*/@column-width">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">column-width=&quot;<value-of select="."/>&quot; は Length 又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">column-width=&quot;&quot; は Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：column-width=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- content-height -->
   <!-- auto | scale-to-fit | scale-down-to-fit | scale-up-to-fit | <length> | <percentage> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#content-height -->
   <rule context="fo:*/@content-height">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">content-height=&quot;<value-of select="."/>&quot; は auto、scale-to-fit、scale-down-to-fit、scale-up-to-fit、inherit、Length 又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'scale-to-fit', 'scale-down-to-fit', 'scale-up-to-fit', 'inherit'))">content-height=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'scale-to-fit', 'scale-down-to-fit', 'scale-up-to-fit', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">content-height=&quot;&quot; は auto、scale-to-fit、scale-down-to-fit、scale-up-to-fit、inherit、Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：content-height=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- content-type -->
   <!-- <string> | auto -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#content-type -->
   <rule context="fo:*/@content-type">
      <report test=". eq ''" role="Warning">content-type=&quot;&quot; は &lt;string&gt; | auto でなければなりません。</report>
   </rule>

   <!-- content-width -->
   <!-- auto | scale-to-fit | scale-down-to-fit | scale-up-to-fit | <length> | <percentage> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#content-width -->
   <rule context="fo:*/@content-width">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">content-width=&quot;<value-of select="."/>&quot; は auto、scale-to-fit、scale-down-to-fit、scale-up-to-fit、inherit、Length 又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'scale-to-fit', 'scale-down-to-fit', 'scale-up-to-fit', 'inherit'))">content-width=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'scale-to-fit', 'scale-down-to-fit', 'scale-up-to-fit', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">content-width=&quot;&quot; は auto、scale-to-fit、scale-down-to-fit、scale-up-to-fit、inherit、Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：content-width=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- country -->
   <!-- none | <country> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#country -->
   <rule context="fo:*/@country">
      <report test=". eq ''" role="Warning">country=&quot;&quot; は none | &lt;country&gt; | inherit でなければなりません。</report>
   </rule>

   <!-- cue -->
   <!-- <cue-before> || <cue-after> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#cue -->
   <rule context="fo:*/@cue">
      <report test=". eq ''" role="Warning">cue=&quot;&quot; は &lt;cue-before&gt; || &lt;cue-after&gt; | inherit でなければなりません。</report>
   </rule>

   <!-- destination-placement-offset -->
   <!-- <length> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#destination-placement-offset -->
   <rule context="fo:*/@destination-placement-offset">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">destination-placement-offset=&quot;<value-of select="."/>&quot; は Length でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">destination-placement-offset=&quot;&quot; は Length でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：destination-placement-offset=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- direction -->
   <!-- ltr | rtl | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#direction -->
   <rule context="fo:*/@direction">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">direction=&quot;<value-of select="."/>&quot; は ltr、rtl 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('ltr', 'rtl', 'inherit'))">direction=&quot;<value-of select="."/>&quot;. Allowed keywords are 'ltr', 'rtl', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">direction=&quot;&quot; は ltr 、 rtl 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：direction=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- display-align -->
   <!-- auto | before | center | after | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#display-align -->
   <rule context="fo:*/@display-align">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">display-align=&quot;<value-of select="."/>&quot; should be 'auto', 'before', 'center', 'after', or 'justify'. <value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'before', 'center', 'after', 'justify'))">display-align=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'before', 'center', 'after', and 'justify'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">display-align=&quot;&quot; should be 'auto', 'before', 'center', 'after', or 'justify'.</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：display-align=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- dominant-baseline -->
   <!-- auto | use-script | no-change | reset-size | ideographic | alphabetic | hanging | mathematical | central | middle | text-after-edge | text-before-edge | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#dominant-baseline -->
   <rule context="fo:*/@dominant-baseline">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">dominant-baseline=&quot;<value-of select="."/>&quot; は auto、use-script、no-change、reset-size、ideographic、alphabetic、hanging、mathematical、central、middle、text-after-edge、text-before-edge 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'use-script', 'no-change', 'reset-size', 'ideographic', 'alphabetic', 'hanging', 'mathematical', 'central', 'middle', 'text-after-edge', 'text-before-edge', 'inherit'))">dominant-baseline=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'use-script', 'no-change', 'reset-size', 'ideographic', 'alphabetic', 'hanging', 'mathematical', 'central', 'middle', 'text-after-edge', 'text-before-edge', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">dominant-baseline=&quot;&quot; は auto、use-script、no-change、reset-size、ideographic、alphabetic、hanging、mathematical、central、middle、text-after-edge、text-before-edge 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：dominant-baseline=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- empty-cells -->
   <!-- show | hide | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#empty-cells -->
   <rule context="fo:*/@empty-cells">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">empty-cells=&quot;<value-of select="."/>&quot; は show、hide 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('show', 'hide', 'inherit'))">empty-cells=&quot;<value-of select="."/>&quot;. Allowed keywords are 'show', 'hide', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">empty-cells=&quot;&quot; は show、hide 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：empty-cells=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- end-indent -->
   <!-- <length> | <percentage> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#end-indent -->
   <rule context="fo:*/@end-indent">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">end-indent=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">end-indent=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">end-indent=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：end-indent=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- ends-row -->
   <!-- true | false -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#ends-row -->
   <rule context="fo:*/@ends-row">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">ends-row=&quot;<value-of select="."/>&quot; は true 又は false でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('true', 'false'))">ends-row=&quot;<value-of select="."/>&quot;. Allowed keywords are 'true' and 'false'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">ends-row=&quot;&quot; は true 又は false でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：ends-row=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- extent -->
   <!-- <length> | <percentage> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#extent -->
   <rule context="fo:*/@extent">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">extent=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">extent=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">extent=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：extent=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- external-destination -->
   <!-- empty string | <uri-specification> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#external-destination -->
   <rule context="fo:*/@external-destination"/>

   <!-- float -->
   <!-- before | start | end | left | right | inside | outside | none | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#float -->
   <rule context="fo:*/@float">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">float=&quot;<value-of select="."/>&quot; は before、start、end、left、right、inside、outside、none 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('before', 'start', 'end', 'left', 'right', 'inside', 'outside', 'none', 'inherit'))">float=&quot;<value-of select="."/>&quot;. Allowed keywords are 'before', 'start', 'end', 'left', 'right', 'inside', 'outside', 'none', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">float=&quot;&quot; は before、start、end、left、right、inside、outside、none 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：float=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- flow-map-name -->
   <!-- <name> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#flow-map-name -->
   <rule context="fo:*/@flow-map-name">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">flow-map-name=&quot;<value-of select="."/>&quot; は EnumerationToken でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">flow-map-name=&quot;&quot; は EnumerationToken でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：flow-map-name=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- flow-map-reference -->
   <!-- <name> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#flow-map-reference -->
   <rule context="fo:*/@flow-map-reference">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">flow-map-reference=&quot;<value-of select="."/>&quot; は 列EnumerationToken でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">flow-map-reference=&quot;&quot; は EnumerationToken でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：flow-map-reference=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- flow-name -->
   <!-- <name> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#flow-name -->
   <rule context="fo:*/@flow-name">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">flow-name=&quot;<value-of select="."/>&quot; は EnumerationToken でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">flow-name=&quot;&quot; は EnumerationToken でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：flow-name=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- flow-name-reference -->
   <!-- <name> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#flow-name-reference -->
   <rule context="fo:*/@flow-name-reference">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">flow-name-reference=&quot;<value-of select="."/>&quot; は EnumerationToken でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">flow-name-reference=&quot;&quot; は EnumerationToken でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：flow-name-reference=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- font -->
   <!-- [ [ <font-style> || <font-variant> || <font-weight> ]? <font-size> [ / <line-height>]? <font-family> ] | caption | icon | menu | message-box | small-caption | status-bar | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#font -->
   <rule context="fo:*/@font">
      <report test=". eq ''" role="Warning">font=&quot;&quot; は [ [ &lt;font-style&gt; || &lt;font-variant&gt; || &lt;font-weight&gt; ]?&lt;font-size&gt; [ / &lt;line-height&gt;]?&lt;font-family&gt; ] | caption | icon | menu | message-box | small-caption | status-bar | inherit でなければなりません。</report>
   </rule>

   <!-- font-family -->
   <!-- [[ <family-name> | <generic-family> ],]* [<family-name> | <generic-family>] | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#font-family -->
   <rule context="fo:*/@font-family">
      <report test=". eq ''" role="Warning">font-family=&quot;&quot; は [[ &lt;family-name&gt; | &lt;generic-family&gt; ],]* [&lt;family-name&gt; | &lt;generic-family&gt;] | inherit でなければなりません。</report>
   </rule>

   <!-- font-selection-strategy -->
   <!-- auto | character-by-character | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#font-selection-strategy -->
   <rule context="fo:*/@font-selection-strategy">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">font-selection-strategy=&quot;<value-of select="."/>&quot; は auto、character-by-character 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'character-by-character', 'inherit'))">font-selection-strategy=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'character-by-character', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">font-selection-strategy=&quot;&quot; は auto、character-by-character 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：font-selection-strategy=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- font-size -->
   <!-- <absolute-size> | <relative-size> | <length> | <percentage> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#font-size -->
   <rule context="fo:*/@font-size">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">font-size=&quot;<value-of select="."/>&quot; は xx-small、x-small、small、medium、large、x-large、xx-large、larger、smaller、inherit、Length 又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large', 'larger', 'smaller', 'inherit'))">font-size=&quot;<value-of select="."/>&quot;. Allowed keywords are 'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large', 'larger', 'smaller', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">font-size=&quot;&quot; は xx-small、x-small、small、medium、large、x-large、xx-large、larger、smaller、inherit、Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：font-size=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- font-size-adjust -->
   <!-- <number> | none | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#font-size-adjust -->
   <rule context="fo:*/@font-size-adjust">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Number', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">font-size-adjust=&quot;<value-of select="."/>&quot; は Number、none 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('none', 'inherit'))">font-size-adjust=&quot;<value-of select="."/>&quot;. Allowed keywords are 'none' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">font-size-adjust=&quot;&quot; は Number、 none 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：font-size-adjust=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- font-stretch -->
   <!-- normal | wider | narrower | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#font-stretch -->
   <rule context="fo:*/@font-stretch">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Percent', 'Number', 'EMPTY', 'ERROR', 'Object')">font-stretch=&quot;<value-of select="."/>&quot; は normal、wider、narrower、ultra-condensed、extra-condensed、condensed、semi-condensed、semi-expanded、expanded、extra-expanded、ultra-expanded、inherit、Percent 又は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('normal', 'wider', 'narrower', 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded', 'inherit'))">font-stretch=&quot;<value-of select="."/>&quot;. Allowed keywords are 'normal', 'wider', 'narrower', 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">font-stretch=&quot;&lt;v0/&gt;&quot; は normal、wider、narrower、ultra-condensed、extra-condensed、condensed、semi-condensed、semi-expanded、expanded、extra-expanded、ultra-expanded、inherit、Percent 又は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：font-stretch=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- font-style -->
   <!-- normal | italic | oblique | backslant | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#font-style -->
   <rule context="fo:*/@font-style">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">font-style=&quot;<value-of select="."/>&quot; は normal、italic、oblique、backslant 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('normal', 'italic', 'oblique', 'backslant', 'inherit'))">font-style=&quot;<value-of select="."/>&quot;. Allowed keywords are 'normal', 'italic', 'oblique', 'backslant', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">font-style=&quot;&quot; は normal、italic、oblique、backslant 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：font-style=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- font-variant -->
   <!-- normal | small-caps | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#font-variant -->
   <rule context="fo:*/@font-variant">
      <report test=". eq ''" role="Warning">font-variant=&quot;&quot; should be 'normal | small-caps | inherit'.</report>
   </rule>

   <!-- font-weight -->
   <!-- normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#font-weight -->
   <rule context="fo:*/@font-weight">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Number', 'EMPTY', 'ERROR', 'Object')">font-weight=&quot;<value-of select="."/>&quot; は normal、bold、bolder、lighter、inherit 又は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('normal', 'bold', 'bolder', 'lighter', 'inherit'))">font-weight=&quot;<value-of select="."/>&quot;. Allowed keywords are 'normal', 'bold', 'bolder', 'lighter', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">font-weight=&quot;&quot; は normal、bold、bolder、lighter、inherit 又は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：font-weight=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- force-page-count -->
   <!-- auto | even | odd | end-on-even | end-on-odd | no-force | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#force-page-count -->
   <rule context="fo:*/@force-page-count">
      <report test=". eq ''" role="Warning">force-page-count=&quot;&quot; は auto | even | odd | end-on-even | end-on-odd | no-force | inherit でなければなりません。</report>
   </rule>

   <!-- format -->
   <!-- <string> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#format -->
   <rule context="fo:*/@format">
      <report test=". eq ''" role="Warning">format=&quot;&quot; は &lt;string&gt; でなければなりません。</report>
   </rule>

   <!-- glyph-orientation-horizontal -->
   <!-- <angle> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#glyph-orientation-horizontal -->
   <rule context="fo:*/@glyph-orientation-horizontal">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Literal', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">glyph-orientation-horizontal=&quot;<value-of select="."/>&quot; は Literal 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">glyph-orientation-horizontal=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">glyph-orientation-horizontal=&quot;&quot; は Literal 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：glyph-orientation-horizontal=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- glyph-orientation-vertical -->
   <!-- auto | <angle> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#glyph-orientation-vertical -->
   <rule context="fo:*/@glyph-orientation-vertical">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Literal', 'EMPTY', 'ERROR', 'Object')">glyph-orientation-vertical=&quot;<value-of select="."/>&quot; は auto、 inherit 又は Literal でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">glyph-orientation-vertical=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">glyph-orientation-vertical=&quot;&quot; は auto、inherit 又は Literal でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：glyph-orientation-vertical=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- grouping-separator -->
   <!-- <character> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#grouping-separator -->
   <rule context="fo:*/@grouping-separator">
      <report test=". eq ''" role="Warning">grouping-separator=&quot;&quot; は &lt;character&gt; でなければなりません。</report>
   </rule>

   <!-- grouping-size -->
   <!-- <number> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#grouping-size -->
   <rule context="fo:*/@grouping-size">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Number', 'EMPTY', 'ERROR', 'Object')">grouping-size=&quot;<value-of select="."/>&quot; は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">grouping-size=&quot;&quot; は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：grouping-size=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- height -->
   <!-- <length> | <percentage> | auto | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#height -->
   <rule context="fo:*/@height">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">height=&quot;<value-of select="."/>&quot; は Length、Percent、auto 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">height=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">height=&quot;&quot; は Length、Percent、auto 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：height=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- hyphenate -->
   <!-- false | true | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#hyphenate -->
   <rule context="fo:*/@hyphenate">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">hyphenate=&quot;<value-of select="."/>&quot; は false、true 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('false', 'true', 'inherit'))">hyphenate=&quot;<value-of select="."/>&quot;. Allowed keywords are 'false', 'true', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">hyphenate=&quot;&quot; は false、true 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：hyphenate=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- hyphenation-character -->
   <!-- <character> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#hyphenation-character -->
   <rule context="fo:*/@hyphenation-character">
      <report test=". eq ''" role="Warning">hyphenation-character=&quot;&quot; は &lt;character&gt; | inherit でなければなりません。</report>
   </rule>

   <!-- hyphenation-keep -->
   <!-- auto | column | page | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#hyphenation-keep -->
   <rule context="fo:*/@hyphenation-keep">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">hyphenation-keep=&quot;<value-of select="."/>&quot; は auto、column、page 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'column', 'page', 'inherit'))">hyphenation-keep=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'column', 'page', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">hyphenation-keep=&quot;&quot; は auto、column、page 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：hyphenation-keep=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- hyphenation-ladder-count -->
   <!-- no-limit | <number> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#hyphenation-ladder-count -->
   <rule context="fo:*/@hyphenation-ladder-count">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Number', 'EMPTY', 'ERROR', 'Object')">hyphenation-ladder-count=&quot;<value-of select="."/>&quot; は no-limit、inherit 又は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('no-limit', 'inherit'))">hyphenation-ladder-count=&quot;<value-of select="."/>&quot;. Allowed keywords are 'no-limit' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">hyphenation-ladder-count=&quot;&quot; は no-limit、inherit 又は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：hyphenation-ladder-count=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- hyphenation-push-character-count -->
   <!-- <number> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#hyphenation-push-character-count -->
   <rule context="fo:*/@hyphenation-push-character-count">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Number', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">hyphenation-push-character-count=&quot;<value-of select="."/>&quot; は Number 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">hyphenation-push-character-count=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">hyphenation-push-character-count=&quot;&quot; は Number 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：hyphenation-push-character-count=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- hyphenation-remain-character-count -->
   <!-- <number> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#hyphenation-remain-character-count -->
   <rule context="fo:*/@hyphenation-remain-character-count">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Number', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">hyphenation-remain-character-count=&quot;<value-of select="."/>&quot; は Number 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">hyphenation-remain-character-count=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">hyphenation-remain-character-count=&quot;&quot; は Number 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：hyphenation-remain-character-count=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- id -->
   <!-- <id> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#id -->
   <rule context="fo:*/@id">
      <report test=". eq ''" role="Warning">id=&quot;&quot; は &lt;id&gt; でなければなりません。</report>
   </rule>

   <!-- index-class -->
   <!-- <string> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#index-class -->
   <rule context="fo:*/@index-class">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Literal', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">index-class=&quot;<value-of select="."/>&quot; は Literal 又は EnumerationToken でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：index-class=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- index-key -->
   <!-- <string> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#index-key -->
   <rule context="fo:*/@index-key">
      <report test=". eq ''" role="Warning">index-key=&quot;&quot; は &lt;string&gt; でなければなりません。</report>
   </rule>

   <!-- indicate-destination -->
   <!-- true | false -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#indicate-destination -->
   <rule context="fo:*/@indicate-destination">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">indicate-destination=&quot;<value-of select="."/>&quot; は true 又は false でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('true', 'false'))">indicate-destination=&quot;<value-of select="."/>&quot;. Allowed keywords are 'true' and 'false'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">indicate-destination=&quot;&quot; は true 又は false でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：indicate-destination=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- initial-page-number -->
   <!-- auto | auto-odd | auto-even | <number> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#initial-page-number -->
   <rule context="fo:*/@initial-page-number">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Number', 'EMPTY', 'ERROR', 'Object')">initial-page-number=&quot;<value-of select="."/>&quot; は auto、auto-odd、auto-even、inherit 又は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'auto-odd', 'auto-even', 'inherit'))">initial-page-number=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'auto-odd', 'auto-even', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">initial-page-number=&quot;&quot; は auto、auto-odd、auto-even、inherit 又は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：initial-page-number=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- inline-progression-dimension -->
   <!-- auto | <length> | <percentage> | <length-range> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#inline-progression-dimension -->
   <rule context="fo:*/@inline-progression-dimension">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">inline-progression-dimension=&quot;<value-of select="."/>&quot; は auto、inherit、Length 又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">inline-progression-dimension=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">inline-progression-dimension=&quot;&quot; は auto、inherit、Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：inline-progression-dimension=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- internal-destination -->
   <!-- empty string | <idref> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#internal-destination -->
   <rule context="fo:*/@internal-destination"/>

   <!-- intrinsic-scale-value -->
   <!-- <percentage> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#intrinsic-scale-value -->
   <rule context="fo:*/@intrinsic-scale-value">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">intrinsic-scale-value=&quot;<value-of select="."/>&quot; は Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">intrinsic-scale-value=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">intrinsic-scale-value=&quot;&quot; は Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：intrinsic-scale-value=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- intrusion-displace -->
   <!-- auto | none | line | indent | block | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#intrusion-displace -->
   <rule context="fo:*/@intrusion-displace">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">intrusion-displace=&quot;<value-of select="."/>&quot; は auto、none、line、indent、block 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'none', 'line', 'indent', 'block', 'inherit'))">intrusion-displace=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'none', 'line', 'indent', 'block', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">intrusion-displace=&quot;&quot; は auto、none、line、indent、block 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：intrusion-displace=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- keep-together -->
   <!-- <keep> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#keep-together -->
   <rule context="fo:*/@keep-together">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Number', 'EMPTY', 'ERROR', 'Object')">keep-together=&quot;<value-of select="."/>&quot; は auto、always、inherit 又は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'always', 'inherit'))">keep-together=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'always', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">keep-together=&quot;&quot; は auto、always、inherit 又は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：keep-together=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- keep-with-next -->
   <!-- <keep> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#keep-with-next -->
   <rule context="fo:*/@keep-with-next">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Number', 'EMPTY', 'ERROR', 'Object')">keep-with-next=&quot;<value-of select="."/>&quot; は auto、always、inherit 又は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'always', 'inherit'))">keep-with-next=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'always', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">keep-with-next=&quot;&quot; は auto、always、inherit 又は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：keep-with-next=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- keep-with-previous -->
   <!-- <keep> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#keep-with-previous -->
   <rule context="fo:*/@keep-with-previous">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Number', 'EMPTY', 'ERROR', 'Object')">keep-with-previous=&quot;<value-of select="."/>&quot; は auto、always、inherit 又は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'always', 'inherit'))">keep-with-previous=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'always', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">keep-with-previous=&quot;&quot; は auto、always、inherit 又は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：keep-with-previous=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- language -->
   <!-- none | <language> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#language -->
   <rule context="fo:*/@language">
      <report test=". eq ''" role="Warning">language=&quot;&quot; は none | &lt;language&gt; | inherit でなければなりません。</report>
   </rule>

   <!-- last-line-end-indent -->
   <!-- <length> | <percentage> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#last-line-end-indent -->
   <rule context="fo:*/@last-line-end-indent">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">last-line-end-indent=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">last-line-end-indent=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">last-line-end-indent=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：last-line-end-indent=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- leader-alignment -->
   <!-- none | reference-area | page | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#leader-alignment -->
   <rule context="fo:*/@leader-alignment">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">leader-alignment=&quot;<value-of select="."/>&quot; should be 'none', 'reference-area', 'page', 'start', 'center', or 'end'. <value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('none', 'reference-area', 'page', 'start', 'center', 'end'))">leader-alignment=&quot;<value-of select="."/>&quot;. Allowed keywords are 'none', 'reference-area', 'page', 'start', 'center', and 'end'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">leader-alignment=&quot;&quot; should be 'none', 'reference-area', 'page', 'start', 'center', or 'end'.</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：leader-alignment=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- leader-length -->
   <!-- <length-range> | <percentage> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#leader-length -->
   <rule context="fo:*/@leader-length">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">leader-length=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">leader-length=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">leader-length=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：leader-length=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- leader-pattern -->
   <!-- space | rule | dots | use-content | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#leader-pattern -->
   <rule context="fo:*/@leader-pattern">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">leader-pattern=&quot;<value-of select="."/>&quot; は space、rule、dots、use-content 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('space', 'rule', 'dots', 'use-content', 'inherit'))">leader-pattern=&quot;<value-of select="."/>&quot;. Allowed keywords are 'space', 'rule', 'dots', 'use-content', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">leader-pattern=&quot;&quot; は space、rule、dots、use-content 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：leader-pattern=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- leader-pattern-width -->
   <!-- use-font-metrics | <length> | <percentage> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#leader-pattern-width -->
   <rule context="fo:*/@leader-pattern-width">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">leader-pattern-width=&quot;<value-of select="."/>&quot; は use-font-metrics、inherit、Length 又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('use-font-metrics', 'inherit'))">leader-pattern-width=&quot;<value-of select="."/>&quot;. Allowed keywords are 'use-font-metrics' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">leader-pattern-width=&quot;&quot; は use-font-metrics、inherit、Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：leader-pattern-width=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- left -->
   <!-- <length> | <percentage> | auto | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#left -->
   <rule context="fo:*/@left">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">left=&quot;<value-of select="."/>&quot; は Length、Percent、auto 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">left=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">left=&quot;&quot; は Length、Percent、auto 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：left=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- letter-spacing -->
   <!-- normal | <length> | <space> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#letter-spacing -->
   <rule context="fo:*/@letter-spacing">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">letter-spacing=&quot;<value-of select="."/>&quot; は normal、inherit 又は Length でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('normal', 'inherit'))">letter-spacing=&quot;<value-of select="."/>&quot;. Allowed keywords are 'normal' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">letter-spacing=&quot;&quot; は normal、inherit 又は Length でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：letter-spacing=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- letter-value -->
   <!-- auto | alphabetic | traditional -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#letter-value -->
   <rule context="fo:*/@letter-value">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">letter-value=&quot;<value-of select="."/>&quot; は auto、alphabetic 又は traditional でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'alphabetic', 'traditional'))">letter-value=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'alphabetic', and 'traditional'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">letter-value=&quot;&quot; は auto、alphabetic 又は traditional でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：letter-value=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- line-height -->
   <!-- normal | <length> | <number> | <percentage> | <space> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#line-height -->
   <rule context="fo:*/@line-height">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Number', 'Percent', 'EMPTY', 'ERROR', 'Object')">line-height=&quot;<value-of select="."/>&quot; は normal、inherit、Length、Number、又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('normal', 'inherit'))">line-height=&quot;<value-of select="."/>&quot;. Allowed keywords are 'normal' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">line-height=&quot;&quot; は normal、inherit、Length、Number 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：line-height=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- line-height-shift-adjustment -->
   <!-- consider-shifts | disregard-shifts | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#line-height-shift-adjustment -->
   <rule context="fo:*/@line-height-shift-adjustment">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">line-height-shift-adjustment=&quot;<value-of select="."/>&quot; は consider-shifts、disregard-shifts 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('consider-shifts', 'disregard-shifts', 'inherit'))">line-height-shift-adjustment=&quot;<value-of select="."/>&quot;. Allowed keywords are 'consider-shifts', 'disregard-shifts', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">line-height-shift-adjustment=&quot;&quot; は consider-shifts、disregard-shifts 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：line-height-shift-adjustment=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- line-stacking-strategy -->
   <!-- line-height | font-height | max-height | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#line-stacking-strategy -->
   <rule context="fo:*/@line-stacking-strategy">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">line-stacking-strategy=&quot;<value-of select="."/>&quot; は line-height、font-height、max-height 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('line-height', 'font-height', 'max-height', 'inherit'))">line-stacking-strategy=&quot;<value-of select="."/>&quot;. Allowed keywords are 'line-height', 'font-height', 'max-height', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">line-stacking-strategy=&quot;&quot; は line-height、font-height、max-height 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：line-stacking-strategy=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- linefeed-treatment -->
   <!-- ignore | preserve | treat-as-space | treat-as-zero-width-space | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#linefeed-treatment -->
   <rule context="fo:*/@linefeed-treatment">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">linefeed-treatment=&quot;<value-of select="."/>&quot; は ignore、preserve、treat-as-space、treat-as-zero-width-space 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('ignore', 'preserve', 'treat-as-space', 'treat-as-zero-width-space', 'inherit'))">linefeed-treatment=&quot;<value-of select="."/>&quot;. Allowed keywords are 'ignore', 'preserve', 'treat-as-space', 'treat-as-zero-width-space', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">linefeed-treatment=&quot;&quot; は ignore、preserve、treat-as-space、treat-as-zero-width-space 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：linefeed-treatment=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- margin -->
   <!-- <margin-width>{1,4} | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#margin -->
   <rule context="fo:*/@margin">
      <report test=". eq ''" role="Warning">margin=&quot;&quot; は &lt;margin-width&gt;{1,4} | inherit でなければなりません。</report>
   </rule>

   <!-- margin-bottom -->
   <!-- <margin-width> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#margin-bottom -->
   <rule context="fo:*/@margin-bottom">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">margin-bottom=&quot;<value-of select="."/>&quot; は auto、inherit、Length 又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">margin-bottom=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">margin-bottom=&quot;&quot; は auto、inherit、Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：margin-bottom=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- margin-left -->
   <!-- <margin-width> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#margin-left -->
   <rule context="fo:*/@margin-left">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">margin-left=&quot;<value-of select="."/>&quot; は auto、inherit、Length 又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">margin-left=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">margin-left=&quot;&quot; は auto、inherit、Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：margin-left=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- margin-right -->
   <!-- <margin-width> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#margin-right -->
   <rule context="fo:*/@margin-right">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">margin-right=&quot;<value-of select="."/>&quot; は auto、inherit、長さ又はパーセントでなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">margin-right=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">margin-right=&quot;&quot; は auto、inherit、Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：margin-right=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- margin-top -->
   <!-- <margin-width> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#margin-top -->
   <rule context="fo:*/@margin-top">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">margin-top=&quot;<value-of select="."/>&quot; は auto、inherit、Length 又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">margin-top=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">margin-top=&quot;&quot; は auto、inherit、Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：margin-top=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- marker-class-name -->
   <!-- <name> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#marker-class-name -->
   <rule context="fo:*/@marker-class-name">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">marker-class-name=&quot;<value-of select="."/>&quot; は EnumerationToken でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">marker-class-name=&quot;&quot; は EnumerationToken でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：marker-class-name=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- master-name -->
   <!-- <name> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#master-name -->
   <rule context="fo:*/@master-name">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">master-name=&quot;<value-of select="."/>&quot; は EnumerationToken でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">master-name=&quot;&quot; は EnumerationToken でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：master-name=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- master-reference -->
   <!-- <name> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#master-reference -->
   <rule context="fo:*/@master-reference">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">master-reference=&quot;<value-of select="."/>&quot; は EnumerationToken でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">master-reference=&quot;&quot; は EnumerationToken でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：master-reference=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- max-height -->
   <!-- <length> | <percentage> | none | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#max-height -->
   <rule context="fo:*/@max-height">
      <report test=". eq ''" role="Warning">max-height=&quot;&quot; は &lt;length&gt; | &lt;percentage&gt; | none | inherit でなければなりません。</report>
   </rule>

   <!-- max-width -->
   <!-- <length> | <percentage> | none | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#max-width -->
   <rule context="fo:*/@max-width">
      <report test=". eq ''" role="Warning">max-width=&quot;&quot; は &lt;length&gt; | &lt;percentage&gt; | none | inherit でなければなりません。</report>
   </rule>

   <!-- maximum-repeats -->
   <!-- <number> | no-limit | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#maximum-repeats -->
   <rule context="fo:*/@maximum-repeats">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Number', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">maximum-repeats=&quot;<value-of select="."/>&quot; は Number、no-limit 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('no-limit', 'inherit'))">maximum-repeats=&quot;<value-of select="."/>&quot;. Allowed keywords are 'no-limit' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">maximum-repeats=&quot;&quot; は Number、no-limit 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：maximum-repeats=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- media-usage -->
   <!-- auto | paginate | bounded-in-one-dimension | unbounded -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#media-usage -->
   <rule context="fo:*/@media-usage">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">media-usage=&quot;<value-of select="."/>&quot; は auto、paginate、bounded-in-one-dimension 又は unbounded でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'paginate', 'bounded-in-one-dimension', 'unbounded'))">media-usage=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'paginate', 'bounded-in-one-dimension', and 'unbounded'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">media-usage=&quot;&quot; は auto、paginate、bounded-in-one-dimension 又は unbounded でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：media-usage=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- merge-pages-across-index-key-references -->
   <!-- merge | leave-separate -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#merge-pages-across-index-key-references -->
   <rule context="fo:*/@merge-pages-across-index-key-references">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">merge-pages-across-index-key-references=&quot;<value-of select="."/>&quot; は merge 又は leave-separate でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('merge', 'leave-separate'))">merge-pages-across-index-key-references=&quot;<value-of select="."/>&quot;. Allowed keywords are 'merge' and 'leave-separate'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">merge-pages-across-index-key-references=&quot;&quot; は merge 又は leave-separate でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：merge-pages-across-index-key-references=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- merge-ranges-across-index-key-references -->
   <!-- merge | leave-separate -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#merge-ranges-across-index-key-references -->
   <rule context="fo:*/@merge-ranges-across-index-key-references">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">merge-ranges-across-index-key-references=&quot;<value-of select="."/>&quot; は merge 又は leave-separate でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('merge', 'leave-separate'))">merge-ranges-across-index-key-references=&quot;<value-of select="."/>&quot;. Allowed keywords are 'merge' and 'leave-separate'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">merge-ranges-across-index-key-references=&quot;&quot; は merge 又は leave-separate でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：merge-ranges-across-index-key-references=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- merge-sequential-page-numbers -->
   <!-- merge | leave-separate -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#merge-sequential-page-numbers -->
   <rule context="fo:*/@merge-sequential-page-numbers">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">merge-sequential-page-numbers=&quot;<value-of select="."/>&quot; は merge 又は leave-separate でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('merge', 'leave-separate'))">merge-sequential-page-numbers=&quot;<value-of select="."/>&quot;. Allowed keywords are 'merge' and 'leave-separate'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">merge-sequential-page-numbers=&quot;&quot; は merge 又は leave-separate でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：merge-sequential-page-numbers=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- min-height -->
   <!-- <length> | <percentage> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#min-height -->
   <rule context="fo:*/@min-height">
      <report test=". eq ''" role="Warning">min-height=&quot;&quot; は &lt;length&gt; | &lt;percentage&gt; | inherit でなければなりません。</report>
   </rule>

   <!-- min-width -->
   <!-- <length> | <percentage> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#min-width -->
   <rule context="fo:*/@min-width">
      <report test=". eq ''" role="Warning">min-width=&quot;&quot; は &lt;length&gt; | &lt;percentage&gt; | inherit でなければなりません。</report>
   </rule>

   <!-- number-columns-repeated -->
   <!-- <number> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#number-columns-repeated -->
   <rule context="fo:*/@number-columns-repeated">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Number', 'EMPTY', 'ERROR', 'Object')">number-columns-repeated=&quot;<value-of select="."/>&quot; は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">number-columns-repeated=&quot;&quot; は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：number-columns-repeated=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- number-columns-spanned -->
   <!-- <number> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#number-columns-spanned -->
   <rule context="fo:*/@number-columns-spanned">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Number', 'EMPTY', 'ERROR', 'Object')">number-columns-spanned=&quot;<value-of select="."/>&quot; は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">number-columns-spanned=&quot;&quot; は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：number-columns-spanned=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- number-rows-spanned -->
   <!-- <number> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#number-rows-spanned -->
   <rule context="fo:*/@number-rows-spanned">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Number', 'EMPTY', 'ERROR', 'Object')">number-rows-spanned=&quot;<value-of select="."/>&quot; は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">number-rows-spanned=&quot;&quot; は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：number-rows-spanned=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- odd-or-even -->
   <!-- odd | even | any | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#odd-or-even -->
   <rule context="fo:*/@odd-or-even">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">odd-or-even=&quot;<value-of select="."/>&quot; should be 'odd', 'even', 'odd-document', 'even-document', or 'any'. <value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('odd', 'even', 'odd-document', 'even-document', 'any'))">odd-or-even=&quot;<value-of select="."/>&quot;. Allowed keywords are 'odd', 'even', 'odd-document', 'even-document', and 'any'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">odd-or-even=&quot;&quot; should be 'odd', 'even', 'odd-document', 'even-document', or 'any'.</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：odd-or-even=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- orphans -->
   <!-- <integer> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#orphans -->
   <rule context="fo:*/@orphans">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Number', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">orphans=&quot;<value-of select="."/>&quot; は Number 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">orphans=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">orphans=&quot;&quot; は Number 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：orphans=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- overflow -->
   <!-- visible | hidden | scroll | error-if-overflow | repeat | auto | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#overflow -->
   <rule context="fo:*/@overflow">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">overflow=&quot;<value-of select="."/>&quot; は visible、hidden、scroll、error-if-overflow、repeat、replace、condense 又は auto でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('visible', 'hidden', 'scroll', 'error-if-overflow', 'repeat', 'replace', 'condense', 'auto'))">overflow=&quot;<value-of select="."/>&quot;. Allowed keywords are 'visible', 'hidden', 'scroll', 'error-if-overflow', 'repeat', 'replace', 'condense', and 'auto'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">overflow=&quot;&quot; は visible、hidden、scroll、error-if-overflow、repeat、replace、condense 又は auto でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：overflow=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- padding -->
   <!-- <padding-width>{1,4} | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#padding -->
   <rule context="fo:*/@padding">
      <report test=". eq ''" role="Warning">padding=&quot;&quot; は &lt;padding-width&gt;{1,4} | inherit でなければなりません。</report>
   </rule>

   <!-- padding-after -->
   <!-- <padding-width> | <length-conditional> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#padding-after -->
   <rule context="fo:*/@padding-after">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">padding-after=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">padding-after=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">padding-after=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：padding-after=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- padding-before -->
   <!-- <padding-width> | <length-conditional> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#padding-before -->
   <rule context="fo:*/@padding-before">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">padding-before=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">padding-before=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">padding-before=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：padding-before=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- padding-bottom -->
   <!-- <padding-width> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#padding-bottom -->
   <rule context="fo:*/@padding-bottom">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">padding-bottom=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">padding-bottom=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">padding-bottom=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：padding-bottom=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- padding-end -->
   <!-- <padding-width> | <length-conditional> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#padding-end -->
   <rule context="fo:*/@padding-end">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">padding-end=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">padding-end=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">padding-end=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：padding-end=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- padding-left -->
   <!-- <padding-width> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#padding-left -->
   <rule context="fo:*/@padding-left">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">padding-left=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">padding-left=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">padding-left=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：padding-left=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- padding-right -->
   <!-- <padding-width> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#padding-right -->
   <rule context="fo:*/@padding-right">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">padding-right=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">padding-right=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">padding-right=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：padding-right=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- padding-start -->
   <!-- <padding-width> | <length-conditional> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#padding-start -->
   <rule context="fo:*/@padding-start">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">padding-start=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">padding-start=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">padding-start=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：padding-start=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- padding-top -->
   <!-- <padding-width> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#padding-top -->
   <rule context="fo:*/@padding-top">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">padding-top=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">padding-top=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">padding-top=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：padding-top=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- page-break-after -->
   <!-- auto | always | avoid | left | right | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#page-break-after -->
   <rule context="fo:*/@page-break-after">
      <report test=". eq ''" role="Warning">page-break-after=&quot;&quot; は auto | always | avoid | left | right | inherit でなければなりません。</report>
   </rule>

   <!-- page-break-before -->
   <!-- auto | always | avoid | left | right | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#page-break-before -->
   <rule context="fo:*/@page-break-before">
      <report test=". eq ''" role="Warning">page-break-before=&quot;&quot; は auto | always | avoid | left | right | inherit でなければなりません。</report>
   </rule>

   <!-- page-break-inside -->
   <!-- avoid | auto | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#page-break-inside -->
   <rule context="fo:*/@page-break-inside">
      <report test=". eq ''" role="Warning">page-break-inside=&quot;&quot; は avoid | auto | inherit でなければなりません。</report>
   </rule>

   <!-- page-citation-strategy -->
   <!-- [ all | normal | non-blank | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#page-citation-strategy -->
   <rule context="fo:*/@page-citation-strategy">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">page-citation-strategy=&quot;<value-of select="."/>&quot; は all、normal、non-blank 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('all', 'normal', 'non-blank', 'inherit'))">page-citation-strategy=&quot;<value-of select="."/>&quot;. Allowed keywords are 'all', 'normal', 'non-blank', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">page-citation-strategy=&quot;&quot; は all、normal、non-blank 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：page-citation-strategy=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- page-height -->
   <!-- auto | indefinite | <length> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#page-height -->
   <rule context="fo:*/@page-height">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">page-height=&quot;<value-of select="."/>&quot; は auto、indefinite、inherit 又は Length でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'indefinite', 'inherit'))">page-height=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'indefinite', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">page-height=&quot;&quot; は auto、indefinite、inherit 又は Length でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：page-height=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- page-number-treatment -->
   <!-- link | no-link -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#page-number-treatment -->
   <rule context="fo:*/@page-number-treatment">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">page-number-treatment=&quot;<value-of select="."/>&quot; は link 又は no-link でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('link', 'no-link'))">page-number-treatment=&quot;<value-of select="."/>&quot;. Allowed keywords are 'link' and 'no-link'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">page-number-treatment=&quot;&quot; は link 又は no-link でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：page-number-treatment=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- page-position -->
   <!-- only | first | last | rest | any | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#page-position -->
   <rule context="fo:*/@page-position">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">page-position=&quot;<value-of select="."/>&quot; は only、first、last、rest、any 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('only', 'first', 'last', 'rest', 'any', 'inherit'))">page-position=&quot;<value-of select="."/>&quot;. Allowed keywords are 'only', 'first', 'last', 'rest', 'any', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">page-position=&quot;&quot; は only、first、last、rest、any 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：page-position=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- page-width -->
   <!-- auto | indefinite | <length> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#page-width -->
   <rule context="fo:*/@page-width">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">page-width=&quot;<value-of select="."/>&quot; は auto、indefinite、inherit 又は Length でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'indefinite', 'inherit'))">page-width=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'indefinite', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">page-width=&quot;&quot; は auto、indefinite、inherit 又は Length でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：page-width=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- pause -->
   <!-- [<time> | <percentage>]{1,2} | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#pause -->
   <rule context="fo:*/@pause">
      <report test=". eq ''" role="Warning">pause=&quot;&quot; は [&lt;time&gt; | &lt;percentage&gt;]{1,2} | inherit でなければなりません。</report>
   </rule>

   <!-- position -->
   <!-- static | relative | absolute | fixed | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#position -->
   <rule context="fo:*/@position">
      <report test=". eq ''" role="Warning">position=&quot;&quot; は static | relative | absolute | fixed | inherit でなければなりません。</report>
   </rule>

   <!-- precedence -->
   <!-- true | false | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#precedence -->
   <rule context="fo:*/@precedence">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">precedence=&quot;<value-of select="."/>&quot; は true、false 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('true', 'false', 'inherit'))">precedence=&quot;<value-of select="."/>&quot;. Allowed keywords are 'true', 'false', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">precedence=&quot;&quot; は true、false 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：precedence=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- provisional-distance-between-starts -->
   <!-- <length> | <percentage> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#provisional-distance-between-starts -->
   <rule context="fo:*/@provisional-distance-between-starts">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">provisional-distance-between-starts=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">provisional-distance-between-starts=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">provisional-distance-between-starts=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：provisional-distance-between-starts=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- provisional-label-separation -->
   <!-- <length> | <percentage> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#provisional-label-separation -->
   <rule context="fo:*/@provisional-label-separation">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">provisional-label-separation=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">provisional-label-separation=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">provisional-label-separation=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：provisional-label-separation=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- ref-id -->
   <!-- <idref> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#ref-id -->
   <rule context="fo:*/@ref-id">
      <report test=". eq ''" role="Warning">ref-id=&quot;&quot; は &lt;idref&gt; | inherit でなければなりません。</report>
   </rule>

   <!-- ref-index-key -->
   <!-- <string> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#ref-index-key -->
   <rule context="fo:*/@ref-index-key">
      <report test=". eq ''" role="Warning">ref-index-key=&quot;&quot; は &lt;string&gt; でなければなりません。</report>
   </rule>

   <!-- reference-orientation -->
   <!-- 0 | 90 | 180 | 270 | -90 | -180 | -270 | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#reference-orientation -->
   <rule context="fo:*/@reference-orientation">
      <report test=". eq ''" role="Warning">reference-orientation=&quot;&quot; は 0 | 90 | 180 | 270 | -90 | -180 | -270 | inherit でなければなりません。</report>
   </rule>

   <!-- region-name -->
   <!-- xsl-region-body | xsl-region-start | xsl-region-end | xsl-region-before | xsl-region-after | <name> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#region-name -->
   <rule context="fo:*/@region-name">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">region-name=&quot;<value-of select="."/>&quot; は xsl-region-body、xsl-region-start、xsl-region-end、xsl-region-before 又は xsl-region-after でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">region-name=&quot;&quot; は xsl-region-body、xsl-region-start、xsl-region-end、xsl-region-before 又は xsl-region-after でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：region-name=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- region-name-reference -->
   <!-- <name> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#region-name-reference -->
   <rule context="fo:*/@region-name-reference">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">region-name-reference=&quot;<value-of select="."/>&quot; は EnumerationToken でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">region-name-reference=&quot;&quot; は EnumerationToken でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：region-name-reference=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- relative-align -->
   <!-- before | baseline | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#relative-align -->
   <rule context="fo:*/@relative-align">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">relative-align=&quot;<value-of select="."/>&quot; は before、baseline 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('before', 'baseline', 'inherit'))">relative-align=&quot;<value-of select="."/>&quot;. Allowed keywords are 'before', 'baseline', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">relative-align=&quot;&quot; は before、baseline 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：relative-align=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- relative-position -->
   <!-- static | relative | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#relative-position -->
   <rule context="fo:*/@relative-position">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">relative-position=&quot;<value-of select="."/>&quot; は static、relative 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('static', 'relative', 'inherit'))">relative-position=&quot;<value-of select="."/>&quot;. Allowed keywords are 'static', 'relative', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">relative-position=&quot;&quot; は static、relative 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：relative-position=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- rendering-intent -->
   <!-- auto | perceptual | relative-colorimetric | saturation | absolute-colorimetric | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#rendering-intent -->
   <rule context="fo:*/@rendering-intent">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">rendering-intent=&quot;<value-of select="."/>&quot; は auto、perceptual、relative-colorimetric、saturation、absolute-colorimetric 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'perceptual', 'relative-colorimetric', 'saturation', 'absolute-colorimetric', 'inherit'))">rendering-intent=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'perceptual', 'relative-colorimetric', 'saturation', 'absolute-colorimetric', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">rendering-intent=&quot;&quot; は auto、perceptual、relative-colorimetric、saturation、absolute-colorimetric 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：rendering-intent=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- retrieve-boundary -->
   <!-- page | page-sequence | document -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#retrieve-boundary -->
   <rule context="fo:*/@retrieve-boundary">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">retrieve-boundary=&quot;<value-of select="."/>&quot; は page、page-sequence 又は document でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('page', 'page-sequence', 'document'))">retrieve-boundary=&quot;<value-of select="."/>&quot;. Allowed keywords are 'page', 'page-sequence', and 'document'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">retrieve-boundary=&quot;&quot; は page、page-sequence 又は document でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：retrieve-boundary=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- retrieve-boundary-within-table -->
   <!-- table | table-fragment | page -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#retrieve-boundary-within-table -->
   <rule context="fo:*/@retrieve-boundary-within-table">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">retrieve-boundary-within-table=&quot;<value-of select="."/>&quot; は table、table-fragment 又は page でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('table', 'table-fragment', 'page'))">retrieve-boundary-within-table=&quot;<value-of select="."/>&quot;. Allowed keywords are 'table', 'table-fragment', and 'page'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">retrieve-boundary-within-table=&quot;&quot; は table、table-fragment 又は page でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：retrieve-boundary-within-table=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- retrieve-class-name -->
   <!-- <name> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#retrieve-class-name -->
   <rule context="fo:*/@retrieve-class-name">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">retrieve-class-name=&quot;<value-of select="."/>&quot; は EnumerationToken でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">retrieve-class-name=&quot;&quot; は EnumerationToken でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：retrieve-class-name=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- retrieve-position -->
   <!-- first-starting-within-page | first-including-carryover | last-starting-within-page | last-ending-within-page -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#retrieve-position -->
   <rule context="fo:*/@retrieve-position">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">retrieve-position=&quot;<value-of select="."/>&quot; は first-starting-within-page、first-including-carryover、last-starting-within-page 又は last-ending-within-page でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('first-starting-within-page', 'first-including-carryover', 'last-starting-within-page', 'last-ending-within-page'))">retrieve-position=&quot;<value-of select="."/>&quot;. Allowed keywords are 'first-starting-within-page', 'first-including-carryover', 'last-starting-within-page', and 'last-ending-within-page'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">retrieve-position=&quot;&quot; は first-starting-within-page、first-including-carryover、last-starting-within-page 又は last-ending-within-page でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：retrieve-position=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- retrieve-position-within-table -->
   <!-- first-starting | first-including-carryover | last-starting | last-ending -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#retrieve-position-within-table -->
   <rule context="fo:*/@retrieve-position-within-table">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">retrieve-position-within-table=&quot;<value-of select="."/>&quot; は first-starting、first-including-carryover、last-starting 又は last-ending でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('first-starting', 'first-including-carryover', 'last-starting', 'last-ending'))">retrieve-position-within-table=&quot;<value-of select="."/>&quot;. Allowed keywords are 'first-starting', 'first-including-carryover', 'last-starting', and 'last-ending'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">retrieve-position-within-table=&quot;&quot; は first-starting、first-including-carryover、last-starting 又は last-ending でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：retrieve-position-within-table=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- right -->
   <!-- <length> | <percentage> | auto | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#right -->
   <rule context="fo:*/@right">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">right=&quot;<value-of select="."/>&quot; は Length、Percent、auto 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">right=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">right=&quot;&quot; は Length、Percent、auto 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：right=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- role -->
   <!-- <string> | <uri-specification> | none | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#role -->
   <rule context="fo:*/@role">
      <report test=". eq ''" role="Warning">role=&quot;&quot; は &lt;string&gt; | &lt;uri-specification&gt; | none | inherit でなければなりません。</report>
   </rule>

   <!-- rule-style -->
   <!-- none | dotted | dashed | solid | double | groove | ridge | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#rule-style -->
   <rule context="fo:*/@rule-style">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">rule-style=&quot;<value-of select="."/>&quot; は none、dotted、dashed、solid、double、groove、ridge 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('none', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inherit'))">rule-style=&quot;<value-of select="."/>&quot;. Allowed keywords are 'none', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">rule-style=&quot;&quot; は none、dotted、dashed、solid、double、groove、ridge 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：rule-style=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- rule-thickness -->
   <!-- <length> -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#rule-thickness -->
   <rule context="fo:*/@rule-thickness">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">rule-thickness=&quot;<value-of select="."/>&quot; は Length でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">rule-thickness=&quot;&quot; は Length でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：rule-thickness=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- scale-option -->
   <!-- width | height | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#scale-option -->
   <rule context="fo:*/@scale-option">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">scale-option=&quot;<value-of select="."/>&quot; は width、height 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('width', 'height', 'inherit'))">scale-option=&quot;<value-of select="."/>&quot;. Allowed keywords are 'width', 'height', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">scale-option=&quot;&quot; は width、height 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：scale-option=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- scaling -->
   <!-- uniform | non-uniform | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#scaling -->
   <rule context="fo:*/@scaling">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">scaling=&quot;<value-of select="."/>&quot; は uniform、non-uniform 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('uniform', 'non-uniform', 'inherit'))">scaling=&quot;<value-of select="."/>&quot;. Allowed keywords are 'uniform', 'non-uniform', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">scaling=&quot;&quot; は uniform、non-uniform 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：scaling=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- scaling-method -->
   <!-- auto | integer-pixels | resample-any-method | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#scaling-method -->
   <rule context="fo:*/@scaling-method">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">scaling-method=&quot;<value-of select="."/>&quot; は auto、integer-pixels、resample-any-method 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'integer-pixels', 'resample-any-method', 'inherit'))">scaling-method=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'integer-pixels', 'resample-any-method', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">scaling-method=&quot;&quot; は auto、integer-pixels、resample-any-method 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：scaling-method=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- score-spaces -->
   <!-- true | false | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#score-spaces -->
   <rule context="fo:*/@score-spaces">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">score-spaces=&quot;<value-of select="."/>&quot; は true、false 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('true', 'false', 'inherit'))">score-spaces=&quot;<value-of select="."/>&quot;. Allowed keywords are 'true', 'false', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">score-spaces=&quot;&quot; は true、false 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：score-spaces=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- script -->
   <!-- none | auto | <script> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#script -->
   <rule context="fo:*/@script">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Literal', 'EMPTY', 'ERROR', 'Object')">script=&quot;<value-of select="."/>&quot; は none、auto、inherit 又は Literal でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('none', 'auto', 'inherit'))">script=&quot;<value-of select="."/>&quot;. Allowed keywords are 'none', 'auto', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">script=&quot;&quot; は none、auto、inherit 又は Literal でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：script=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- show-destination -->
   <!-- replace | new -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#show-destination -->
   <rule context="fo:*/@show-destination">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">show-destination=&quot;<value-of select="."/>&quot; は replace 又は new でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('replace', 'new'))">show-destination=&quot;<value-of select="."/>&quot;. Allowed keywords are 'replace' and 'new'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">show-destination=&quot;&quot; は replace 又は new でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：show-destination=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- size -->
   <!-- <length>{1,2} | auto | landscape | portrait | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#size -->
   <rule context="fo:*/@size">
      <report test=". eq ''" role="Warning">size=&quot;&quot; は &lt;length&gt;{1,2} | auto | landscape | portrait | inherit でなければなりません。</report>
   </rule>

   <!-- source-document -->
   <!-- <uri-specification> [<uri-specification>]* | none | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#source-document -->
   <rule context="fo:*/@source-document">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('URI', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">source-document=&quot;<value-of select="."/>&quot; は ＵＲＩ、none 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">source-document=&quot;&quot; は ＵＲＩ、none 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：source-document=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- space-after -->
   <!-- <space> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#space-after -->
   <rule context="fo:*/@space-after">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">space-after=&quot;<value-of select="."/>&quot; は Length 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">space-after=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">space-after=&quot;&quot; は Length 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：space-after=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- space-before -->
   <!-- <space> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#space-before -->
   <rule context="fo:*/@space-before">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">space-before=&quot;<value-of select="."/>&quot; は Length 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">space-before=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">space-before=&quot;&quot; は Length 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：space-before=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- space-end -->
   <!-- <space> | <percentage> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#space-end -->
   <rule context="fo:*/@space-end">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">space-end=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">space-end=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">space-end=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：space-end=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- space-start -->
   <!-- <space> | <percentage> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#space-start -->
   <rule context="fo:*/@space-start">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">space-start=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">space-start=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">space-start=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：space-start=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- span -->
   <!-- none | all | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#span -->
   <rule context="fo:*/@span">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">span=&quot;<value-of select="."/>&quot; は none、all 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('none', 'all', 'inherit'))">span=&quot;<value-of select="."/>&quot;. Allowed keywords are 'none', 'all', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">span=&quot;&quot; は none、all 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：span=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- src -->
   <!-- <uri-specification> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#src -->
   <rule context="fo:*/@src">
      <report test=". eq ''" role="Warning">src=&quot;&quot; は &lt;uri-specification&gt; | inherit でなければなりません。</report>
   </rule>

   <!-- start-indent -->
   <!-- <length> | <percentage> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#start-indent -->
   <rule context="fo:*/@start-indent">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">start-indent=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">start-indent=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">start-indent=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：start-indent=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- starting-state -->
   <!-- show | hide -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#starting-state -->
   <rule context="fo:*/@starting-state">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">starting-state=&quot;<value-of select="."/>&quot; は show 又は hide でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('show', 'hide'))">starting-state=&quot;<value-of select="."/>&quot;. Allowed keywords are 'show' and 'hide'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">starting-state=&quot;&quot; は show 又は hide でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：starting-state=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- starts-row -->
   <!-- true | false -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#starts-row -->
   <rule context="fo:*/@starts-row">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">starts-row=&quot;<value-of select="."/>&quot; は true 又は false でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('true', 'false'))">starts-row=&quot;<value-of select="."/>&quot;. Allowed keywords are 'true' and 'false'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">starts-row=&quot;&quot; は true 又は false でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：starts-row=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- suppress-at-line-break -->
   <!-- auto | suppress | retain | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#suppress-at-line-break -->
   <rule context="fo:*/@suppress-at-line-break">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">suppress-at-line-break=&quot;<value-of select="."/>&quot; は auto、suppress、retain 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'suppress', 'retain', 'inherit'))">suppress-at-line-break=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'suppress', 'retain', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">suppress-at-line-break=&quot;&quot; は auto、suppress、retain 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：suppress-at-line-break=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- switch-to -->
   <!-- xsl-preceding | xsl-following | xsl-any | <name>[ <name>]* -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#switch-to -->
   <rule context="fo:*/@switch-to">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">switch-to=&quot;<value-of select="."/>&quot; は xsl-preceding、xsl-following 又は xsl-any でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">switch-to=&quot;&quot; は xsl-preceding、xsl-following 又は xsl-any でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：switch-to=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- table-layout -->
   <!-- auto | fixed | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#table-layout -->
   <rule context="fo:*/@table-layout">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">table-layout=&quot;<value-of select="."/>&quot; は auto、fixed 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'fixed', 'inherit'))">table-layout=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'fixed', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">table-layout=&quot;&quot; は auto、fixed 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：table-layout=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- table-omit-footer-at-break -->
   <!-- true | false -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#table-omit-footer-at-break -->
   <rule context="fo:*/@table-omit-footer-at-break">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">table-omit-footer-at-break=&quot;<value-of select="."/>&quot; は true 又は false でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('true', 'false'))">table-omit-footer-at-break=&quot;<value-of select="."/>&quot;. Allowed keywords are 'true' and 'false'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">table-omit-footer-at-break=&quot;&quot; は true 又は false でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：table-omit-footer-at-break=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- table-omit-header-at-break -->
   <!-- true | false -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#table-omit-header-at-break -->
   <rule context="fo:*/@table-omit-header-at-break">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">table-omit-header-at-break=&quot;<value-of select="."/>&quot; は true 又は false でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('true', 'false'))">table-omit-header-at-break=&quot;<value-of select="."/>&quot;. Allowed keywords are 'true' and 'false'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">table-omit-header-at-break=&quot;&quot; は true 又は false でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：table-omit-header-at-break=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- target-presentation-context -->
   <!-- use-target-processing-context | <uri-specification> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#target-presentation-context -->
   <rule context="fo:*/@target-presentation-context">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'URI', 'EMPTY', 'ERROR', 'Object')">target-presentation-context=&quot;<value-of select="."/>&quot; は use-target-processing-context 又は ＵＲＩでなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">target-presentation-context=&quot;&quot; は use-target-processing-context 又は ＵＲＩでなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：target-presentation-context=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- target-processing-context -->
   <!-- document-root | <uri-specification> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#target-processing-context -->
   <rule context="fo:*/@target-processing-context">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'URI', 'EMPTY', 'ERROR', 'Object')">target-processing-context=&quot;<value-of select="."/>&quot; は document-root 又は ＵＲＩでなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">target-processing-context=&quot;&quot; は document-root 又は ＵＲＩでなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：target-processing-context=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- target-stylesheet -->
   <!-- use-normal-stylesheet | <uri-specification> -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#target-stylesheet -->
   <rule context="fo:*/@target-stylesheet">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'URI', 'EMPTY', 'ERROR', 'Object')">target-stylesheet=&quot;<value-of select="."/>&quot; は use-normal-stylesheet 又は ＵＲＩでなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">target-stylesheet=&quot;&quot; は use-normal-stylesheet 又は ＵＲＩでなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：target-stylesheet=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- text-align -->
   <!-- start | center | end | justify | inside | outside | left | right | <string> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#text-align -->
   <rule context="fo:*/@text-align">
      <report test=". eq ''" role="Warning">text-align=&quot;&quot; は start | center | end | justify | inside | outside | left | right | &lt;string&gt; | inherit でなければなりません。</report>
   </rule>

   <!-- text-align-last -->
   <!-- relative | start | center | end | justify | inside | outside | left | right | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#text-align-last -->
   <rule context="fo:*/@text-align-last">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">text-align-last=&quot;<value-of select="."/>&quot; は relative、start、center、end、justify、inside、outside、left、right 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('relative', 'start', 'center', 'end', 'justify', 'inside', 'outside', 'left', 'right', 'inherit'))">text-align-last=&quot;<value-of select="."/>&quot;. Allowed keywords are 'relative', 'start', 'center', 'end', 'justify', 'inside', 'outside', 'left', 'right', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">text-align-last=&quot;&quot; は relative、start、center、end、justify、inside、outside、left、right 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：text-align-last=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- text-altitude -->
   <!-- use-font-metrics | <length> | <percentage> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#text-altitude -->
   <rule context="fo:*/@text-altitude">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">text-altitude=&quot;<value-of select="."/>&quot; は use-font-metrics、inherit、Length 又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('use-font-metrics', 'inherit'))">text-altitude=&quot;<value-of select="."/>&quot;. Allowed keywords are 'use-font-metrics' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">text-altitude=&quot;&quot; は use-font-metrics、inherit、Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：text-altitude=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- text-decoration -->
   <!-- none | [ [ underline | no-underline] || [ overline | no-overline ] || [ line-through | no-line-through ] || [ blink | no-blink ] ] | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#text-decoration -->
   <rule context="fo:*/@text-decoration">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">text-decoration=&quot;<value-of select="."/>&quot; は none、underline、no-underline]、overline、no-overline、line-through、no-line-through、blink、no-blink 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('none', 'underline', 'no-underline]', 'overline', 'no-overline', 'line-through', 'no-line-through', 'blink', 'no-blink', 'inherit'))">text-decoration=&quot;<value-of select="."/>&quot;. Allowed keywords are 'none', 'underline', 'no-underline]', 'overline', 'no-overline', 'line-through', 'no-line-through', 'blink', 'no-blink', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">text-decoration=&quot;&quot; は none、underline、no-underline]、overline、no-overline、line-through、no-line-through、blink、no-blink 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：text-decoration=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- text-depth -->
   <!-- use-font-metrics | <length> | <percentage> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#text-depth -->
   <rule context="fo:*/@text-depth">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'Percent', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">text-depth=&quot;<value-of select="."/>&quot; は use-font-metrics、inherit、Length 又は Percent でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('use-font-metrics', 'inherit'))">text-depth=&quot;<value-of select="."/>&quot;. Allowed keywords are 'use-font-metrics' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">text-depth=&quot;&quot; は use-font-metrics、inherit、Length 又は Percent でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：text-depth=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- text-indent -->
   <!-- <length> | <percentage> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#text-indent -->
   <rule context="fo:*/@text-indent">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">text-indent=&quot;<value-of select="."/>&quot; は Length、Percent 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">text-indent=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">text-indent=&quot;&quot; は Length、Percent 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：text-indent=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- text-shadow -->
   <!-- none | [<color> || <length> <length> <length>? ,]* [<color> || <length> <length> <length>?] | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#text-shadow -->
   <rule context="fo:*/@text-shadow">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Color', 'Length', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">text-shadow=&quot;<value-of select="."/>&quot; should be 'none', 'inherit', Color, or Length. <value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('none', 'inherit'))">text-shadow=&quot;<value-of select="."/>&quot;. Allowed keywords are 'none' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">text-shadow=&quot;&quot; should be 'none', 'inherit', Color, or Length.</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：text-shadow=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- text-transform -->
   <!-- capitalize | uppercase | lowercase | none | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#text-transform -->
   <rule context="fo:*/@text-transform">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">text-transform=&quot;<value-of select="."/>&quot; は capitalize、uppercase、lowercase、none 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('capitalize', 'uppercase', 'lowercase', 'none', 'inherit'))">text-transform=&quot;<value-of select="."/>&quot;. Allowed keywords are 'capitalize', 'uppercase', 'lowercase', 'none', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">text-transform=&quot;&quot; は capitalize、uppercase、lowercase、none 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：text-transform=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- top -->
   <!-- <length> | <percentage> | auto | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#top -->
   <rule context="fo:*/@top">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">top=&quot;<value-of select="."/>&quot; は Length、Percent、auto 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">top=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">top=&quot;&quot; は Length、Percent、auto 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：top=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- treat-as-word-space -->
   <!-- auto | true | false | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#treat-as-word-space -->
   <rule context="fo:*/@treat-as-word-space">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">treat-as-word-space=&quot;<value-of select="."/>&quot; は auto、true、false 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'true', 'false', 'inherit'))">treat-as-word-space=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto', 'true', 'false', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">treat-as-word-space=&quot;&quot; は auto、true、false 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：treat-as-word-space=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- unicode-bidi -->
   <!-- normal | embed | bidi-override | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#unicode-bidi -->
   <rule context="fo:*/@unicode-bidi">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">unicode-bidi=&quot;<value-of select="."/>&quot; は normal、embed、bidi-override 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('normal', 'embed', 'bidi-override', 'inherit'))">unicode-bidi=&quot;<value-of select="."/>&quot;. Allowed keywords are 'normal', 'embed', 'bidi-override', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">unicode-bidi=&quot;&quot; は normal、embed、bidi-override 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：unicode-bidi=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- vertical-align -->
   <!-- baseline | middle | sub | super | text-top | text-bottom | <percentage> | <length> | top | bottom | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#vertical-align -->
   <rule context="fo:*/@vertical-align">
      <report test=". eq ''" role="Warning">vertical-align=&quot;&quot; は baseline | middle | sub | super | text-top | text-bottom | &lt;percentage&gt; | &lt;length&gt; | top | bottom | inherit でなければなりません。</report>
   </rule>

   <!-- visibility -->
   <!-- visible | hidden | collapse | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#visibility -->
   <rule context="fo:*/@visibility">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">visibility=&quot;<value-of select="."/>&quot; は visible、hidden、collapse 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('visible', 'hidden', 'collapse', 'inherit'))">visibility=&quot;<value-of select="."/>&quot;. Allowed keywords are 'visible', 'hidden', 'collapse', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">visibility=&quot;&quot; は visible、hidden、collapse 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：visibility=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- white-space -->
   <!-- normal | pre | nowrap | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#white-space -->
   <rule context="fo:*/@white-space">
      <report test=". eq ''" role="Warning">white-space=&quot;&quot; は normal | pre | nowrap | inherit でなければなりません。</report>
   </rule>

   <!-- white-space-collapse -->
   <!-- false | true | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#white-space-collapse -->
   <rule context="fo:*/@white-space-collapse">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">white-space-collapse=&quot;<value-of select="."/>&quot; は false、true 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('false', 'true', 'inherit'))">white-space-collapse=&quot;<value-of select="."/>&quot;. Allowed keywords are 'false', 'true', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">white-space-collapse=&quot;&quot; は false、true 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：white-space-collapse=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- white-space-treatment -->
   <!-- ignore | preserve | ignore-if-before-linefeed | ignore-if-after-linefeed | ignore-if-surrounding-linefeed | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#white-space-treatment -->
   <rule context="fo:*/@white-space-treatment">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">white-space-treatment=&quot;<value-of select="."/>&quot; は ignore、preserve、ignore-if-before-linefeed、ignore-if-after-linefeed、ignore-if-surrounding-linefeed 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('ignore', 'preserve', 'ignore-if-before-linefeed', 'ignore-if-after-linefeed', 'ignore-if-surrounding-linefeed', 'inherit'))">white-space-treatment=&quot;<value-of select="."/>&quot;. Allowed keywords are 'ignore', 'preserve', 'ignore-if-before-linefeed', 'ignore-if-after-linefeed', 'ignore-if-surrounding-linefeed', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">white-space-treatment=&quot;&quot; は ignore、preserve、ignore-if-before-linefeed、ignore-if-after-linefeed、ignore-if-surrounding-linefeed 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：white-space-treatment=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- widows -->
   <!-- <integer> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#widows -->
   <rule context="fo:*/@widows">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Number', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object')">widows=&quot;<value-of select="."/>&quot; は Number 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('inherit'))">widows=&quot;<value-of select="."/>&quot;. Allowed keywords are 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">widows=&quot;&quot; は Number 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：widows=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- width -->
   <!-- <length> | <percentage> | auto | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#width -->
   <rule context="fo:*/@width">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('Length', 'Percent', 'EnumerationToken', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">width=&quot;<value-of select="."/>&quot; は Length、Percent、auto 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">width=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">width=&quot;&quot; は Length、Percent、 auto 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：width=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- word-spacing -->
   <!-- normal | <length> | <space> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#word-spacing -->
   <rule context="fo:*/@word-spacing">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Length', 'EMPTY', 'ERROR', 'Object') or $expression/@value = '0'">word-spacing=&quot;<value-of select="."/>&quot; は normal、inherit 又は Length でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('normal', 'inherit'))">word-spacing=&quot;<value-of select="."/>&quot;. Allowed keywords are 'normal' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">word-spacing=&quot;&quot; は normal 、 inherit 又は Length でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：word-spacing=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- wrap-option -->
   <!-- no-wrap | wrap | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#wrap-option -->
   <rule context="fo:*/@wrap-option">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">wrap-option=&quot;<value-of select="."/>&quot; は no-wrap、wrap 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('no-wrap', 'wrap', 'inherit'))">wrap-option=&quot;<value-of select="."/>&quot;. Allowed keywords are 'no-wrap', 'wrap', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">wrap-option=&quot;&quot; は no-wrap、wrap 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：wrap-option=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- writing-mode -->
   <!-- lr-tb | rl-tb | tb-rl | tb-lr | bt-lr | bt-rl | lr-bt | rl-bt | lr-alternating-rl-bt | lr-alternating-rl-tb | lr-inverting-rl-bt | lr-inverting-rl-tb | tb-lr-in-lr-pairs | lr | rl | tb | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#writing-mode -->
   <rule context="fo:*/@writing-mode">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'EMPTY', 'ERROR', 'Object')">writing-mode=&quot;<value-of select="."/>&quot; は lr-tb、rl-tb、tb-rl、tb-lr、bt-lr、bt-rl、lr-bt、rl-bt、lr-alternating-rl-bt、lr-alternating-rl-tb、lr-inverting-rl-bt、lr-inverting-rl-tb、tb-lr-in-lr-pairs、lr、rl、tb 又は inherit でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('lr-tb', 'rl-tb', 'tb-rl', 'tb-lr', 'bt-lr', 'bt-rl', 'lr-bt', 'rl-bt', 'lr-alternating-rl-bt', 'lr-alternating-rl-tb', 'lr-inverting-rl-bt', 'lr-inverting-rl-tb', 'tb-lr-in-lr-pairs', 'lr', 'rl', 'tb', 'inherit'))">writing-mode=&quot;<value-of select="."/>&quot;. Allowed keywords are 'lr-tb', 'rl-tb', 'tb-rl', 'tb-lr', 'bt-lr', 'bt-rl', 'lr-bt', 'rl-bt', 'lr-alternating-rl-bt', 'lr-alternating-rl-tb', 'lr-inverting-rl-bt', 'lr-inverting-rl-tb', 'tb-lr-in-lr-pairs', 'lr', 'rl', 'tb', and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">writing-mode=&quot;&quot; は lr-tb、rl-tb、tb-rl、tb-lr、bt-lr、bt-rl、lr-bt、rl-bt、lr-alternating-rl-bt、lr-alternating-rl-tb、lr-inverting-rl-bt、lr-inverting-rl-tb、tb-lr-in-lr-pairs、lr、rl、tb 又は inherit でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：writing-mode=&quot;<value-of select="."/>&quot;</report>
   </rule>

   <!-- xml.lang -->
   <!-- <language-country> | inherit -->
   <!-- Inherited: yes -->
   <!-- Shorthand: yes -->
   <!-- http://www.w3.org/TR/xsl11/#xml.lang -->
   <rule context="fo:*/@xml.lang">
      <report test=". eq ''" role="Warning">xml.lang=&quot;&quot; は &lt;language-country&gt; | inherit でなければなりません。</report>
   </rule>

   <!-- z-index -->
   <!-- auto | <integer> | inherit -->
   <!-- Inherited: no -->
   <!-- Shorthand: no -->
   <!-- http://www.w3.org/TR/xsl11/#z-index -->
   <rule context="fo:*/@z-index">
      <let name="expression" value="ahf:parser-runner(.)"></let>
      <assert test="local-name($expression) = ('EnumerationToken', 'Number', 'EMPTY', 'ERROR', 'Object')">z-index=&quot;<value-of select="."/>&quot; は auto、inherit 又は Number でなければなりません。<value-of select="."/> は <value-of select="local-name($expression)"/> です。</assert>
      <report test="$expression instance of element(EnumerationToken) and not($expression/@token = ('auto', 'inherit'))">z-index=&quot;<value-of select="."/>&quot;. Allowed keywords are 'auto' and 'inherit'. Token is '<value-of select="$expression/@token"/>'.</report>
      <report test="local-name($expression) = 'EMPTY'" role="Warning">z-index=&quot;&quot; は auto、inherit 又は Number でなければなりません。</report>
      <report test="local-name($expression) = 'ERROR'">シンタックスエラー：z-index=&quot;<value-of select="."/>&quot;</report>
   </rule>
</pattern><!-- Local Variables:  --><!-- mode: nxml        --><!-- End:              -->