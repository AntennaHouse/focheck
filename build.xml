<?xml version="1.0" encoding="UTF-8"?>
<project name="focheck" basedir="." default="build"
	 xmlns:if="ant:if"
	 xmlns:unless="ant:unless">
<description>Additional properties and targets used when developing
'focheck' and making a release.</description>
<!--
     Copyright 2015-2021 Antenna House, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->

<!--
BEFORE making a release on GitHub:
 - Commit all hand-modified files
 - Make sure that ${version} in build.properties is correct
 - Run the 'release' target with '-Dforce=yes'
 - Commit build.properties and the generated files with a
   'Releasing focheck x.y.z.' commit message
 - Push the commits to GitHub.
 - Update 'ChangeLog.md' on GitHub.
 - Pull 'ChangeLog.md' from GitHub.

AFTER making a release on GitHub:
 - Increment ${version} in build.properties so it's not possible
   to accidentally overwrite a release's Zip file with different
   versions of files.
-->

<!-- Build file with properties and targets useful for running
     'focheck'. -->
<import file="build-focheck.xml" />

<!-- Additional input and output file properties not needed in
     'build-focheck.xml'. -->

<!-- Expression parser XSLT stylesheet generated by REx. -->
<property name="rex-generated-parser.xsl"
	  value="axf-expression.xslt" />
<!-- XSLT stylesheet for dumping Schematron for checking property values. -->
<property name="property-schematron-dump.xsl"
	  value="axf-property-schematron-override.xsl" />
<!-- Location of Calabash jar. -->
<property name="calabash.jar"
	  value="${basedir.converted}/lib/calabash-1.0.25-96/calabash.jar"/>
<!-- Location of XML catalog resolver library. -->
<property name="resolver.jar"
	  value="${focheck.basedir.converted}/lib/resolver.jar"/>
<!-- Directory containing stf tests. -->
<property name="tests.dir"
	  value="${focheck.basedir.converted}/test/stf"/>

<!-- Directory containing OmegaT project (not OmegaT itself). -->
<property name="omegat.project.dir"
	  value="${focheck.basedir.converted}/omegat" />
<!-- Directory containing OmegaT project configuration. -->
<property name="omegat.config.dir"
	  value="${omegat.project.dir}/config" />
<!-- Directory into which to copy source files to be translated. -->
<property name="omegat.source.dir"
	  value="${omegat.project.dir}/source" />
<!-- Directory from which to copy translated files. -->
<property name="omegat.target.dir"
	  value="${omegat.project.dir}/target" />

<property name="stf.dir" location="${focheck.basedir.converted}/stf" />
<import file="${stf.dir}/build.xml" optional="true" />

<!-- Additional housekeeping properties not needed in
     'build-focheck.xml'. -->

<tstamp>
  <format property="timestamp" pattern="yyyy-MM-dd" />
  <format property="year" pattern="yyyy" />
</tstamp>

<!-- ${saxon.jar} set in 'build-focheck.xml'. -->

<!-- trang.jar location depends on if run from oXygen or on OS. -->
<condition property="trang.jar" value="${ant.home}/../../lib/trang.jar">
  <contains string="${ant.home}" substring="oxygen" casesensitive="false" />
</condition>
<condition property="trang.jar" value="${trang.jar.windows}">
  <os family="windows" />
</condition>
<condition property="trang.jar" value="${trang.jar.mac}">
  <os family="mac" />
</condition>
<property name="trang.jar" value="${trang.jar.unix}" />

<!-- Targets -->

<target name="rncdump">
  <dependset>
    <srcfilelist dir="${xsl.dir}" files="common.xsl" />
    <targetfileset dir="${schema.dir}" includes="fo.rnc"/>
  </dependset> 
  <xslt in="${etc.dir}/xslspec.xml"
        out="${schema.dir}/fo.rnc"
        style="${xsl.dir}/rncdump.xsl"
        classpath="${saxon.jar}"
	force="${force}">
    <factory name="net.sf.saxon.TransformerFactoryImpl">
      <attribute
          name="http://saxon.sf.net/feature/allow-external-functions" 
          value="true"/>
      <attribute
          name="http://saxon.sf.net/feature/validation" 
          value="false"/>
    </factory>
    <param name="copyright-year" expression="${copyright.year}"
	   if="copyright.year" />
    <param name="debug" expression="${debug}" if="debug" />
    <param name="version" expression="${version}" />
  </xslt>
</target>

<target name="rncinherited">
  <dependset>
    <srcfilelist dir="${xsl.dir}" files="common.xsl" />
    <targetfileset dir="${schema.dir}" includes="fo-inherited.rnc"/>
  </dependset> 
  <xslt in="${etc.dir}/xslspec.xml"
        out="${schema.dir}/fo-inherited.rnc"
        style="${xsl.dir}/rncinherited.xsl"
        classpath="${saxon.jar}"
	force="${force}">
    <factory name="net.sf.saxon.TransformerFactoryImpl">
      <attribute
          name="http://saxon.sf.net/feature/allow-external-functions" 
          value="true"/>
      <attribute
          name="http://saxon.sf.net/feature/validation" 
          value="false"/>
    </factory>
    <param name="copyright-year" expression="${copyright.year}"
	   if="copyright.year" />
    <param name="debug" expression="${debug}" if="debug" />
    <param name="version" expression="${version}" />
  </xslt>
</target>

<target name="axf-inherited">
  <dependset>
    <srcfilelist dir="${xsl.dir}" files="common.xsl" />
    <targetfileset dir="${schema.dir}" includes="axf-inherited.rnc"/>
  </dependset> 
  <xslt in="${etc.dir}/xslspec.xml"
        out="${schema.dir}/axf-inherited.rnc"
        style="${xsl.dir}/axf-inherited.xsl"
        classpath="${saxon.jar}"
	force="${force}">
    <factory name="net.sf.saxon.TransformerFactoryImpl">
      <attribute
          name="http://saxon.sf.net/feature/allow-external-functions" 
          value="true"/>
      <attribute
          name="http://saxon.sf.net/feature/validation" 
          value="false"/>
    </factory>
    <param name="copyright-year" expression="${copyright.year}"
	   if="copyright.year" />
    <param name="debug" expression="${debug}" if="debug" />
    <param name="version" expression="${version}" />
  </xslt>
</target>

<target name="ahfsettings.rnc">
  <copy file="${ahfsettings.rnc}"
	todir="${schema.dir}"
	overwrite="${force}" />
</target>

<target name="rnc" depends="rncdump, rncinherited, axf-inherited, ahfsettings.rnc" />

<target name="trang">
  <fail message="Could not locate 'trang.jar'.">
    <condition>
      <not>
	<available file="${trang.jar}" />
      </not>
    </condition>
  </fail>
</target>

<target name="-rng.uptodate">
  <uptodate property="rng.uptodate">
    <srcfiles dir= "${schema.dir}" includes="*.rnc"/>
    <mapper type="glob" from="*.rnc" to="rng/*.rng"/>
  </uptodate>
</target>

<target name="rng" depends="trang, rnc, -rng.uptodate"
	unless="rng.uptodate">
  <java jar="${trang.jar}" fork="true">
    <arg value="${schema.dir}/${schema.basename}.rnc" />
    <arg value="${schema.dir}/rng/${schema.basename}.rng" />
  </java>
</target>

<target name="-xsd.uptodate">
  <uptodate property="xsd.uptodate">
    <srcfiles dir= "${schema.dir}" includes="*.rnc"/>
    <mapper type="glob" from="*.rnc" to="xsd/*.xsd"/>
  </uptodate>
</target>

<target name="xsd" depends="trang, rnc, -xsd.uptodate"
	unless="xsd.uptodate">
  <java jar="${trang.jar}" fork="true">
    <arg value="${schema.dir}/${xsd.schema.basename}.rnc" />
    <arg value="${schema.dir}/xsd/${xsd.schema.basename}.xsd" />
  </java>
</target>

<target name="fo-property.sch">
  <dependset>
    <srcfilelist dir="${xsl.dir}"
		 files="common.xsl,
			property-schematron-dump.xsl,
			${property-schematron-dump.xsl}" />
    <targetfileset dir="${schematron.dir}" includes="fo-property.sch"/>
  </dependset> 
  <xslt in="${etc.dir}/xslspec.xml"
        out="${schematron.dir}/fo-property.sch"
        style="${xsl.dir}/${property-schematron-dump.xsl}"
        classpath="${saxon.jar}"
	force="${force}">
    <factory name="net.sf.saxon.TransformerFactoryImpl">
      <attribute
          name="http://saxon.sf.net/feature/allow-external-functions" 
          value="true"/>
      <attribute
          name="http://saxon.sf.net/feature/validation" 
          value="false"/>
    </factory>
    <param name="copyright-year" expression="${copyright.year}"
	   if="copyright.year" />
    <param name="debug" expression="${debug}" if="debug" />
    <param name="version" expression="${version}" />
  </xslt>
</target>

<target name="-schematron.uptodate">
  <condition property="schematron.uptodate">
    <and>
      <uptodate targetfile="${build.dir}/schematron.xsl">
	<srcfiles dir= "${schematron.dir}" includes="*.sch"/>
	<srcfiles dir= "${xsl.dir}"
		  includes="${rex-generated-parser.xsl}, parser-runner.xsl" />
	<srcfiles dir= "${iso.schematron.dir}"
		  includes="*.xsl" />
	<srcfiles file="${etc.dir}/check.sch" />
      </uptodate>
      <isfalse value="${force}" />
    </and>
  </condition>
</target>

<target name="schematron.compile"
	depends="-schematron.uptodate"
	unless="schematron.uptodate"
	description="Compiles Schematron into XSLT using Saxon">
  <!-- expand inclusions -->
  <xslt basedir="${schematron.dir}"
	style="${iso.schematron.dir}/iso_dsdl_include.xsl"
	in="${schematron}"
	out="${build.dir}/expanded.sch"
	classpath="${saxon.jar}"
	force="${force}">
    <factory name="net.sf.saxon.TransformerFactoryImpl">
      <attribute
	  name="http://saxon.sf.net/feature/allow-external-functions"
	  value="true"/>
      <attribute
	  name="http://saxon.sf.net/feature/linenumbering"
	  value="true"/>
    </factory>
  </xslt>

  <!-- expand abstract patterns -->
  <xslt basedir="${build.dir}"
	style="${iso.schematron.dir}/iso_abstract_expand.xsl"
	in="${build.dir}/expanded.sch"
	out="${build.dir}/unabstract.sch"
	classpath="${saxon.jar}"
	force="${force}">
    <factory name="net.sf.saxon.TransformerFactoryImpl">
      <attribute
	  name="http://saxon.sf.net/feature/allow-external-functions"
	  value="true"/>
      <attribute
	  name="http://saxon.sf.net/feature/linenumbering"
	  value="true"/>
    </factory>
  </xslt>

  <!-- compile it -->
  <xslt basedir="${build.dir}"
	style="${iso.schematron.dir}/iso_svrl_for_${schematron.binding}.xsl"
	in="${build.dir}/unabstract.sch"
	out="${build.dir}/schematron.xsl"
	classpath="${saxon.jar}"
	force="${force}">
    <factory name="net.sf.saxon.TransformerFactoryImpl">
      <attribute
	  name="http://saxon.sf.net/feature/allow-external-functions"
	  value="true"/>
      <attribute
	  name="http://saxon.sf.net/feature/linenumbering"
	  value="true"/>
    </factory>
    <param name="attributes" expression="true" />
  </xslt>

  <!-- compile check schematron -->
  <xslt basedir="${build.dir}"
	style="${iso.schematron.dir}/iso_schematron_message_${schematron.binding}.xsl"
	in="${etc.dir}/check.sch"
	out="${build.dir}/check-schematron.xsl"
	classpath="${saxon.jar}"
	force="${force}">
    <factory name="net.sf.saxon.TransformerFactoryImpl">
      <attribute
	  name="http://saxon.sf.net/feature/allow-external-functions"
	  value="true"/>
      <attribute
	  name="http://saxon.sf.net/feature/linenumbering"
	  value="true"/>
    </factory>
  </xslt>
</target>

<target name="build"
	depends="rng, xsd, fo-property.sch, schematron.compile"
	description="Build the generated files." />

<target name="clean"
	description="Remove the generated files.">
  <delete>
    <fileset dir="${schema.dir}" includes="fo.rnc" />
    <fileset dir="${schematron.dir}" includes="fo-property.sch" />
  </delete>
</target>

<!-- Testing targets -->

<target name="run.rex"
	description="Run REx expression parser.  Specify expression as $${input}.">
  <fail unless="input">Specify the expression to be parsed as $${input}.  On the command line, use '-Dinput=your-expression'.</fail>
  <java jar="${saxon.jar}" fork="true">
    <arg value="-xsl:${xsl.dir}/expression2.xslt" />
    <arg value="-it:main" />
    <arg value="input={${input}}" />
  </java>
</target>

<target name="run.parser"
	description="Run expression parser.  Specify expression as $${input}.">
  <fail unless="input">Specify the expression to be parsed as $${input}.  On the command line, use '-Dinput=your-expression'.</fail>
  <java jar="${saxon.jar}" fork="true">
    <arg value="-xsl:${xsl.dir}/parser-runner.xsl" />
    <arg value="-it:{http://www.antennahouse.com/names/XSLT/Functions/Document}parser-runner" />
    <arg value="input=${input}" />
  </java>
</target>

<target name="test.schematron"
	description="Run Schematron on the test files.">
  <test.schematron basedir="${basedir.converted}" />
</target>

<target name="run.schematron">
  <schematron basedir="${basedir.converted}/test/stf" />
</target>

<!-- Translation targets. -->

<target name="translate.source.copy">
  <!-- Preserve modification dates for ease of comparison with
       'reference' OmegaT project where original translations are
       done. -->
  <copy todir="${omegat.source.dir}"
	preservelastmodified="true"
	overwrite="${force}">
    <fileset dir="${focheck.basedir.converted}/schematron"
	     includes="*.sch" />
    <!-- Rewrite links to manual to point to Japanese manual. -->
    <filterchain>
      <tokenfilter>
	<replacestring from="https://www.antenna.co.jp/AHF/help/en"
		       to="https://www.antenna.co.jp/AHF/help/ja"/>
      </tokenfilter>
    </filterchain>
  </copy>
  <copy todir="${omegat.source.dir}"
	preservelastmodified="true"
	overwrite="${force}">
    <fileset dir="${focheck.basedir.converted}/schema/rng"
	     includes="*.rng" />
    <!-- Rewrite links to manual to point to Japanese manual. -->
    <filterchain>
      <tokenfilter>
	<replacestring from="https://www.antenna.co.jp/AHF/help/en"
		       to="https://www.antenna.co.jp/AHF/help/ja"/>
      </tokenfilter>
    </filterchain>
  </copy>
</target>

<target name="translate" depends="rng, translate.source.copy">
  <mkdir dir="${omegat.target.dir}" />
  <!--<java jar="omegat/OmegaT.jar" fork="true"
	jvm="C:/openjdk-8u232-b09/bin/java.exe">-->
  <java jar="omegat/OmegaT.jar" fork="true"
	jvm="${omegat.jvm}">
    <arg value="${omegat.project.dir}" />
    <arg value="--config-dic=${omegat.config.dir}" />
    <arg value="--mode=console-translate" />
    <!--<arg value="- -quiet" />-->
  </java>
  <copy todir="${focheck.basedir.converted}/schematron-ja"
	preservelastmodified="true"
	overwrite="${force}">
    <fileset dir="${omegat.target.dir}"
	     includes="*.sch" />
  </copy>
  <chmod dir="${focheck.basedir.converted}/schematron-ja"
	 includes="**/*.sch"
	 perm="644" />
  <copy todir="${focheck.basedir.converted}/schema-ja/rng"
	preservelastmodified="true"
	overwrite="${force}">
    <fileset dir="${omegat.target.dir}"
	     includes="*.rng" />
  </copy>
  <chmod dir="${focheck.basedir.converted}/schema-ja/rng"
	 includes="**/*.rng"
	 perm="644" />
</target>

<target name="rnc-ja" depends="trang"
	unless="rng.uptodate">
  <java jar="${trang.jar}" fork="true">
    <arg value="${focheck.basedir.converted}/schema-ja/rng/${schema.basename}.rng" />
    <arg value="${focheck.basedir.converted}/schema-ja/${schema.basename}.rnc" />
  </java>
  <chmod dir="${focheck.basedir.converted}/schema-ja"
	 includes="**/*.rnc"
	 perm="644" />
</target>

<target name="xsd-ja" depends="trang">
  <java jar="${trang.jar}" fork="true">
    <arg value="${focheck.basedir.converted}/schema-ja/rng/${xsd.schema.basename}.rng" />
    <arg value="${focheck.basedir.converted}/schema-ja/xsd/${xsd.schema.basename}.xsd" />
  </java>
</target>

<!-- Release targets. -->

<target name="add-on.xml.uptodate">
  <condition property="add-on.xml.uptodate">
    <and>
      <uptodate srcfile="${basedir.converted}/build.properties"
		targetfile="${basedir.converted}/add-on.xml" />
      <isfalse value="${force}" />
    </and>
  </condition>
</target>

<target name="add-on.xml" depends="add-on.xml.uptodate"
	unless="add-on.xml.uptodate"
	description="Update the version information in 'add-on.xml'.">
  <replaceregexp file="${focheck.basedir.converted}/add-on.xml"
		 encoding="UTF-8">
    <regexp pattern="&lt;xt:version>[^&lt;]+&lt;/xt:version>" />
    <substitution expression="&lt;xt:version>${version}&lt;/xt:version>"/>
  </replaceregexp>
  <replaceregexp file="${focheck.basedir.converted}/add-on.xml"
		 encoding="UTF-8">
    <regexp pattern='releases/download/[^"]+' />
    <substitution
	expression="releases/download/v${version}/${ant.project.name}-framework-${version}.zip"/>
  </replaceregexp>
  <replaceregexp file="${focheck.basedir.converted}/add-on.xml"
		 encoding="UTF-8">
    <regexp pattern='Copyright ([0-9]+)-[0-9]+' />
    <substitution
	expression="Copyright \1-${year}"/>
  </replaceregexp>
</target>

<target name="framework.zip" depends="build, add-on.xml"
	description="Make a Zip archive of just the oXygen framework.">
  <mkdir dir="${focheck.basedir.converted}/releases" />
  <zip destfile="${focheck.basedir.converted}/releases/${ant.project.name}-framework-${version}.zip"
       basedir="${focheck.basedir.converted}"
       excludes="**"
       update="true">
    <zipfileset dir="."
		includes="README.md, LICENSE*.md, ChangeLog.md, AHFormatter.framework"
		prefix="${ant.project.name}" />
    <!--<zipfileset dir="css" includes="*.css" prefix="${ant.project.name}/css" />-->
    <zipfileset dir="schema" includes="catalog.xml, *.ent"
		prefix="${ant.project.name}/schema" />
    <zipfileset dir="schema/rng" includes="*.rng"
		prefix="${ant.project.name}/schema/rng" />
    <zipfileset dir="schematron" includes="*.sch"
		prefix="${ant.project.name}/schematron" />
    <zipfileset dir="template" includes="*.xml, *.fo, *.properties"
		prefix="${ant.project.name}/template" />
    <zipfileset dir="xsl"
		includes="parser-runner.xsl,
			  ${rex-generated-parser.xsl}"
		prefix="${ant.project.name}/xsl" />
  </zip>
</target>

<target name="add-on-ja.xml.uptodate">
  <condition property="add-on-ja.xml.uptodate">
    <and>
      <uptodate srcfile="${basedir.converted}/build.properties"
		targetfile="${basedir.converted}/add-on-ja.xml" />
      <isfalse value="${force}" />
    </and>
  </condition>
</target>

<target name="add-on-ja.xml" depends="add-on-ja.xml.uptodate"
	unless="add-on-ja.xml.uptodate"
	description="Update the version information in 'add-on-ja.xml'.">
  <replaceregexp file="${focheck.basedir.converted}/add-on-ja.xml"
		 encoding="UTF-8">
    <regexp pattern="&lt;xt:version>[^&lt;]+&lt;/xt:version>" />
    <substitution expression="&lt;xt:version>${version}&lt;/xt:version>"/>
  </replaceregexp>
  <replaceregexp file="${focheck.basedir.converted}/add-on-ja.xml"
		 encoding="UTF-8">
    <regexp pattern='releases/download/[^"]+' />
    <substitution
	expression="releases/download/v${version}/${ant.project.name}-framework-ja-${version}.zip"/>
  </replaceregexp>
  <replaceregexp file="${focheck.basedir.converted}/add-on-ja.xml"
		 encoding="UTF-8">
    <regexp pattern='Copyright ([0-9]+)-[0-9]+' />
    <substitution
	expression="Copyright \1-${year}"/>
  </replaceregexp>
</target>

<target name="framework-ja.zip"
	depends="build, translate, rnc-ja, xsd-ja, add-on-ja.xml"
	description="Make a Zip archive of just the oXygen framework.">
  <mkdir dir="${focheck.basedir.converted}/releases" />
  <zip destfile="${focheck.basedir.converted}/releases/${ant.project.name}-framework-ja-${version}.zip"
       basedir="${focheck.basedir.converted}"
       excludes="**"
       update="true">
    <zipfileset dir="."
		includes="README.md, LICENSE*.md, ChangeLog.md, focheck-ja.framework"
		prefix="${ant.project.name}-ja" />
    <!--<zipfileset dir="css" includes="*.css" prefix="${ant.project.name}/css" />-->
    <zipfileset dir="schema-ja" includes="catalog.xml, *.ent"
		prefix="${ant.project.name}-ja/schema-ja" />
    <zipfileset dir="schema-ja/rng" includes="*.rng"
		prefix="${ant.project.name}-ja/schema-ja/rng" />
    <zipfileset dir="schematron-ja" includes="*.sch"
		prefix="${ant.project.name}-ja/schematron-ja" />
    <zipfileset dir="template" includes="*.xml, *.fo, *.properties"
		prefix="${ant.project.name}-ja/template" />
    <zipfileset dir="xsl"
		includes="parser-runner.xsl,
			  ${rex-generated-parser.xsl}"
		prefix="${ant.project.name}-ja/xsl" />
  </zip>
</target>

<target name="release" depends="add-on.xml, add-on-ja.xml, framework.zip, framework-ja.zip" />

<!-- Utility targets. -->

<target name="echoproperties">
  <echoproperties />
</target>

</project>
