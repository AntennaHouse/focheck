# Schema for Antenna House Option Setting File.
#
# Copyright 2015-2024 Antenna House, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#default namespace = ""

ah.boolean =
    'false' | 'true'

bpil-penalty-hyphenation.model =
    xsd:integer { minInclusive = "0" maxInclusive = "1000" }

compression.list =
    'auto'
    | 'zlib'
    | 'jpeg'
    | 'jpeg2000'
    | 'keeplzw'
    | 'auto2k'
    | 'keeplzw2k'

downsampling.list =
    'none' | 'average' | 'bicubic' | 'subsampling'

dpi.model =
    xsd:positiveInteger { minInclusive = "1" }

jpeg-quality.model =
    xsd:positiveInteger { minInclusive = "1" maxInclusive = "100" }

length.model =
   xsd:token { pattern = "[+\-]?(([0-9]+(\.[0-9]*)?)|\.[0-9]+)(cm|mm|in|pt|pc|px|ex|jpt|q|dpi|dd|cc|rem|ch|wch|lh|rlh|vw|vh|vmin|vmax|pvw|pvh|pvmin|pvmax|gr)" }

monochrome.compression.list =
    'ccitt4'
    | 'ccitt3'
    | 'runlength'
    | 'zlib'
    | 'none'

named-length.list =
    'veryverythinmathspace'
    | 'verythinmathspace'
    | 'thinmathspace'
    | 'mediummathspace'
    | 'thickmathspace'
    | 'verythickmathspace'
    | 'veryverythickmathspace'
    | 'negativeveryverythinmathspace'
    | 'negativeverythinmathspace'
    | 'negativethinmathspace'
    | 'negativemediummathspace'
    | 'negativethickmathspace'
    | 'negativeverythickmathspace'
    | 'negativeveryverythickmathspace'

pass-through.model =
    list { ( 'all' | 'gif' | '-gif' | 'tiff' | '-tiff' | 'png' | '-png'
           | 'jpeg' | '-jpeg' | 'jpeg2000' | '-jpeg2000' | 'jbig2'
           | '-jbig2' )+ }
    | 'none'

pdf-version.list =
    'PDF1.3'
    | 'PDF1.4'
    | 'PDF1.5'
    | 'PDF1.6'
    | 'PDF1.7'
    | 'PDF2.0'
    | 'PDF/X-1a:2001'
    | 'PDF/X-3:2002'
    | 'PDF/X-1a:2003'
    | 'PDF/X-2:2003'
    | 'PDF/X-3:2003'
    | 'PDF/X-4:2010'
    | 'PDF/A-1a:2005'
    | 'PDF/A-1b:2005'
    | 'PDF1.4/A-2a:2011'
    | 'PDF1.5/A-2a:2011'
    | 'PDF1.6/A-2a:2011'
    | 'PDF1.7/A-2a:2011'
    | 'PDF1.4/A-2b:2011'
    | 'PDF1.5/A-2b:2011'
    | 'PDF1.6/A-2b:2011'
    | 'PDF1.7/A-2b:2011'
    | 'PDF1.4/A-2u:2011'
    | 'PDF1.5/A-2u:2011'
    | 'PDF1.6/A-2u:2011'
    | 'PDF1.7/A-2u:2011'
    | 'PDF1.4/A-3a:2012'
    | 'PDF1.5/A-3a:2012'
    | 'PDF1.6/A-3a:2012'
    | 'PDF1.7/A-3a:2012'
    | 'PDF1.4/A-3b:2012'
    | 'PDF1.5/A-3b:2012'
    | 'PDF1.6/A-3b:2012'
    | 'PDF1.7/A-3b:2012'
    | 'PDF1.4/A-3u:2012'
    | 'PDF1.5/A-3u:2012'
    | 'PDF1.6/A-3u:2012'
    | 'PDF1.7/A-3u:2012'
    | 'PDF1.5/UA-1:2014'
    | 'PDF1.6/UA-1:2014'
    | 'PDF1.7/UA-1:2014'

script.list =
    'Latn'
  | 'Grek'
  | 'Cyrl'
  | 'Armn'
  | 'Geor'
  | 'Ethi'
  | 'Arab'
  | 'Syrc'
  | 'Hebr'
  | 'Deva'
  | 'Beng'
  | 'Guru'
  | 'Gujr'
  | 'Orya'
  | 'Taml'
  | 'Telu'
  | 'Knda'
  | 'Mlym'
  | 'Sinh'
  | 'Thai'
  | 'Khmr'
  | 'Laoo'
  | 'Mymr'
  #| 'Kana'
  #| 'Hira'
  | 'Hang'
  #| 'Hani'
  | 'Hans'
  | 'Hant'
  | 'Jpan'
  | 'Zsye'
  | 'Zsym'
  | '.'
 | ''

ah.errorNumber =
   xsd:token {pattern = "[0-9]+|0x[0-9a-fA-F]+"}

language-code-space.atts =
   ## Language for which to apply the space
   attribute language { text },
   ## Character code for which to apply the space
   attribute code { text }?,
   ## Amount of space to apply
   attribute space { xsd:decimal }

#start = formatter-config

formatter-config =
  element formatter-config {
    formatter-config.model
}

# Elements in the same sequence as the manual.
# Antenna House Formatter does not require any
# order, but cannot generate a DTD if using '&'.
formatter-config.model =
    (formatter-settings?,
    font-settings?,
    pdf-settings?,
    ps-settings?,
    svg-settings?,
    svg-render-settings?,
    text-settings?,
    mathml-settings?,
    cgm-settings?,
    xslt-settings?,
    analyzer-settings?)

formatter-settings =
   element formatter-settings {
      formatter-settings.attlist,
      formatter-settings.model
   }

formatter-settings.model =
   list-style-type*,
   quotationmark*,
   script-chars*,
   script-language-in-CJK*,
   space-end-punctuation*,
   space-start-punctuation*,
   space-between-digit-and-punctuation*,
   usercss*,
   multimedia*,
   GS1-128*,
   UAX50*,
   unbreakable-words*

formatter-settings.attlist =
   ## Number of characters considered an abbreviation when a line break is inserted
   attribute abbreviation-character-count { xsd:integer }?,
   ## Additional non-end-of-line characters
   attribute append-non-end-of-line-characters { token }?,
   ## Additional non-starter characters
   attribute append-non-starter-characters { token }?,
   ## Whether to apply the Default CSS for HTML (html.css) even for XML+CSS
   attribute apply-default-html-css-to-XML { ah.boolean }?,
   ## Whether to automatically break footnotes when axf:footnote-max-height=​"auto": true | false
   attribute auto-break-footnote { ah.boolean }?,
   ## Formatter type when unclear if HTML or XHTML: html | xhtml
   attribute auto-formatter-type { 'html' | 'xhtml' }?,
   ## Languages that are not allowed to have single-letter words at the end of the line
   attribute avoid-orphan-single-word { string }?,
   ## Whether to count the last punctuation to be included in one character when axf:avoid-widow-word="true" is specified in CJK: true | false
   attribute avoid-widow-words-cjk-punctuation { ah.boolean }?,
   ## Whether <axf:formatter-config> is allowed
   attribute axf-formatter-config { ah.boolean }?,
   ## Mode for handling baselines of mixed scripts: 4 = XSL Formatter V4; 5 = Antenna House Formatter V5; 6 = Antenna House Formatter V6
   attribute baseline-mode { '4' | '5' | '6' }?,
   # 'bidi-override-mode' removed in V6.2
   #attribute bidi-override-mode { xsd:integer }?,
   attribute bold-ratio { xsd:decimal }?,
   attribute border-medium-width { length.model }?,
   attribute border-thick-width { length.model }?,
   attribute border-thin-width { length.model }?,
   ## DPI of image when blurring a box shadow.
   attribute boxshadow-resolution-dpi { xsd:positiveInteger { minInclusive = "72" maxInclusive = "1440" } }?,
   ## Languages or scripts to which to apply Knuth-Plass Breaking Paragraphs into Lines [BPIL]
   attribute bpil { text }?,
   ## Maximum number of characters to which [BPIL] applies: <integer>
   attribute bpil-limit-chars { xsd:positiveInteger { minInclusive = "1000"} }?,
   ## Minimum line width (in em) to which to apply [BPIL]: <number>
   attribute bpil-minimum-line-width { xsd:positiveInteger }?,
   ## Frequency of hyphenation in [BPIL] with a value of 0 to 1000
   attribute bpil-penalty-hyphenation { bpil-penalty-hyphenation.model }?,
   ## Initial value when 'axf:condensed-text-align-last="auto"': true | false | justify
   attribute condensed-text-align-last { ah.boolean | 'justify' }?,
   ## Whether expressions not enclosed in 'calc()' are allowed: true | false
   attribute css-allow-bare-expression { ah.boolean }?,
   ## Whether pseudo-classes match root element: true | false
   attribute css-child-match-root { ah.boolean }?,
   ## Whether to enable the CSS debugging feature in the GUI: true | false
   attribute css-debug { ah.boolean }?,
   ## Whether nested floats are allowed in CSS: true | false
   attribute css-float-in-float { ah.boolean }?,
   ## @media tokens that apply to Antenna House Formatter
   attribute css-media-type { text }?,
   ## Language to be applied when the script for a CJK character is ambiguous
   attribute default-CJK { xsd:NCName }?,
   ## Default color for text
   attribute default-color { text }?,
   ## Default font size
   attribute default-font-size { xsd:NMTOKEN }?,
   attribute default-from-page-master-region { ah.boolean }?,
   attribute default-html-charset { xsd:NCName }?,
   ## Default language code
   attribute default-lang { text }?,
   ## Default language to use when 'default-lang' is empty
   attribute default-lang2 { xsd:NCName }?,
   attribute default-page-height { xsd:NMTOKEN }?,
   attribute default-page-margin-bottom { text }?,
   attribute default-page-margin-left { text }?,
   attribute default-page-margin-right { text }?,
   attribute default-page-margin-top { text }?,
   attribute default-page-width { xsd:NMTOKEN }?,
   attribute descendant-or-self-files { ah.boolean }?,
   ## Whether to display axf:alttext content when no image in <fo:external-graphic> or <img>
   attribute display-alttext { ah.boolean }?,
   ## Comma-separated languages for which to also place a hyphen at the start of a line
   attribute double-hyphen-translineation { text }?,
   ## Whether to perform 'error-if-overflow' checks when 'overflow="auto"'
   attribute error-if-overflow { ah.boolean }?,
   attribute except-non-end-of-line-characters { text }?,
   attribute except-non-starter-characters { text }?,
   attribute external-entity { ah.boolean }?,
   ## How strictly to check 'font-family' syntax: auto | loose | strict
   attribute family-name-syntax { 'auto' | 'loose' | 'strict' }?,
   attribute fix-css-img-percentage { ah.boolean }?,
   ## Whether to insert a substitute glyph when a font does not include a white-space glyph: false | true | always
   attribute fixed-width-space-treatment { ah.boolean | 'always' }?,
   ## Width, in em, of HAIR SPACE (U+200A)
   attribute hair-space-width { text }?,
   attribute href-page-link { ah.boolean }?,
   ## Whether to enable <hyphen-min> in the Hyphenation Exception Dictionary: false | true | without-exceptions
   attribute hyphen-min { ah.boolean | 'without-exceptions' }?,
   attribute hyphenation-keep-mode { 'word' | 'line' }?,
   ## Whether to use custom hyphenation processing or TeX hyphenation dictionaries: 'true' | 'false'
   attribute HyphenationOption { ah.boolean }?,
   ## Comma-delimited list of languages to hyphenate when HyphenationOption="true"
   attribute hyphenation-TeX { text }?,
   ## Whether to ignore certificate errors: true | false
   attribute ignore-certificate-error { ah.boolean }?,
   attribute intrusion-displace-mode { xsd:integer }?,
   #attribute img-alt { ah.boolean }?,
   attribute issue-scale-to-fit { ah.boolean }?,
   ## Whether to process the ligature of Hangul Jamo (U+1100 to U+11FF)
   attribute jamo-ligature { ah.boolean }?,
   attribute justify-leader { ah.boolean }?,
   attribute justify-rowspan-height { ah.boolean }?,
   attribute keep-footnote-anchor { ah.boolean }?,
   ## Whether to process ligatures in European languages
   attribute latin-ligature { ah.boolean }?,
   ## Suppress specific error messages
   attribute no-disp-warnings { list {ah.errorNumber+} }?,
   attribute non-starter-ideographic-space { ah.boolean }?,
   attribute normal-line-height { text }?,
   attribute normalize { 'none' | 'nfc' | 'nfd' | 'nfkc' | 'nfkd' }?,
   ## Angle when emulating font-style="oblique" or "backslant": <number>
   attribute oblique-skew { xsd:integer }?,
   ## Full path to OSDC ('SBCCmd' or 'SBCCmd.exe') program
   attribute osdc-cmd { text }?,
   ## Additional command-line parameters when running OSDC
   attribute osdc-param { text }?,
   #attribute omit-uppercase-word-accents { text }?,
   #attribute output-area-id { ah.boolean }?,
   #attribute output-fo-tree { ah.boolean }?,
   attribute overflow-limit-block { xsd:NMTOKEN }?,
   attribute overflow-limit-inline { xsd:NMTOKEN }?,
   attribute pair-kerning { ah.boolean }?,
   attribute printer-marks-line-length { text }?,
   attribute printer-marks-line-width { text }?,
   attribute printer-marks-zero-margin { text }?,
   attribute PrinterOrientation { xsd:NCName }?,
   attribute PscriptPassThrough { ah.boolean }?,
   attribute punctuation-spacing { text }?,
   attribute punctuation-trim { ah.boolean }?,
   attribute pxpi { xsd:integer }?,
   ## Whether the size matches the viewBox setting when the width and height of the root element are omitted in SVG: reference | viewBox
   #attribute responsive-svg-size { 'reference' | 'viewBox' }?,
   ## Ruby alignment when axf:ruby-align="auto"
   attribute ruby-align { text }?,
   attribute SeparatePrinterDuplexJob { ah.boolean }?,
   attribute small-caps-emulation-always { ah.boolean }?,
   ## Scale-down ratio when the font does not have small-caps
   attribute small-caps-emulation-size { text }?,
   attribute small-caps-emulation-x-height { ah.boolean }?,
   attribute splitting-blocks-space { ah.boolean }?,
   ## Behavior when tab alignment makes letters overlap: ignore-tab | next-tab
   attribute tab-overlap-treatment { 'ignore-tab' | 'next-tab' | '' }?,
   attribute table-auto-layout-limit { xsd:integer }?,
   attribute table-is-reference-area { ah.boolean }?,
   attribute text-autospace { ah.boolean }?,
   attribute text-autospace-mode { '6' | '7' }?,
   attribute text-autospace-width { text }?,
   attribute text-decoration-baseline-mode { xsd:integer }?,
   attribute text-decoration-mode { xsd:integer }?,
   attribute text-justify-mode { xsd:integer }?,
   attribute text-kashida-space { text }?,
   attribute text-orientation-mode { xsd:integer }?,
   ## Whether to apply blur to a font that is not allowed to be embedded: false | true
   attribute textshadow-blur-cannot-embed-font { ah.boolean }?,
   ## Minimum resolution of the image when applying blur in text-shadow: <positive-integer>
   attribute textshadow-resolution-minimum-dpi { dpi.model }?,
   ## Image resolution when applying blur in text-shadow: <positive-integer>
   attribute textshadow-resolution-pixel-per-em { dpi.model }?,
   attribute text-underline-mode { xsd:integer }?,
   attribute thin-space-width { text }?,
   attribute two-pass-formatting { ah.boolean }?,
   ## Error level for an unresolved internal-destination
   attribute unresolved-internal-destination { '0' | '1' | '2' | '3' | '4' }?,
   attribute use-default-page-margin-CSS { ah.boolean }?,
   attribute use-default-page-margin-XSL { ah.boolean }?,
   attribute vertical-block-width-mode { xsd:integer }?,
   attribute vertical-coloring-text { text }?,
   attribute vertical-underline-side { xsd:NCName }?,
   attribute viewport-length-units-mode { xsd:integer }?,
   ## Fill color for 'watermark-text'
   attribute watermark-fill-color { text }?,
   attribute watermark-font-family { text }?,
   attribute watermark-font-style { text }?,
   attribute watermark-font-weight { text }?,
   ## Opacity for 'watermark-text'
   attribute watermark-opacity { text }?,
   ## Stroke color for 'watermark-text'
   attribute watermark-stroke-color { text }?,
   ## Stroke width for 'watermark-text'
   attribute watermark-stroke-width { text }?,
   ## Angle of rotation for 'watermark-text'
   attribute watermark-rotate { text }?,
   ## Magnification for 'watermark-text'
   attribute watermark-scale { text }?,
   attribute watermark-text { text }?,
   attribute watermark2-font-family { text }?,
   attribute watermark2-font-style { text }?,
   attribute watermark2-font-weight { text }?,
   attribute watermark2-text { text }?,
   ## Compatibility mode for 'white-space-collapse'
   attribute white-space-collapse-mode { '6' | '7' }?,
   ## Location of XML Catalog file
   attribute xml-catalog { text }?,
   ## ZERO WIDTH SPACE (U+200B) compatibility mode: 5 | 6
   attribute zwsp-mode { '5' | '6' }?

list-style-type =
   ## Characters to use for standard 'list-style-type' values
   element list-style-type {
      ## Character to use for list-style-type="box"
      attribute box { text }?,
      ## Character to use for list-style-type="check"
      attribute check { text }?,
      ## Character to use for list-style-type="cirle"
      attribute circle { text }?,
      ## Character to use for list-style-type="diamond"
      attribute diamond { text }?,
      ## Character to use for list-style-type="disc"
      attribute disc { text }?,
      ## Character to use for list-style-type="hyphen"
      attribute hyphen { text }?,
      ## Character to use for list-style-type="square"
      attribute square { text }?,
      empty
   }

quotationmark =
   element quotationmark {
      attribute language { text },
      attribute code { text },
      attribute quotetype { 'QU' | 'OP' | 'CL' },
      empty
   }

script-chars =
   element script-chars {
      attribute script { text }?,
      attribute code { text }?,
      empty
   }

script-language-in-CJK =
   element script-languge-in-CJK {
      attribute script { text },
      attribute language { text }?,
      empty
   }

space-end-punctuation =
   ## Space to add after a punctuation character
   element space-end-punctuation {
      language-code-space.atts,
      empty
   }

space-start-punctuation =
   ## Space to add before a punctuation character
   element space-start-punctuation {
      language-code-space.atts,
      empty
   }

space-between-digit-and-punctuation =
   ## Space to add between a digit and a punctuation character
   element space-between-digit-and-punctuation {
      language-code-space.atts,
      empty
   }

space-between-punctuation-and-digit =
   ## Space to add between a digit and a punctuation character
   element space-between-punctuation-and-digit {
      language-code-space.atts,
      empty
   }

usercss =
   ## One or more user CSS stylesheets
   element usercss {
      css+
   }

css =
   ## User CSS stylesheet
   element css {
      ## Path to user CSS stylesheet
      attribute path { xsd:anyURI },
      empty
   }

multimedia =
   ## Additional 'content-type' values for multimedia formats
   element multimedia {
      ## Additional audio content type
      attribute audio { text }?,
      ## Additional video content type
      attribute video { text }?,
      ## Additional Flash content type
      attribute flash { text }?,
      empty
   }

GS1-128 =
   element GS1-128 {
      attribute AI { text },
      attribute format { text },
      empty
   }

UAX50 =
   element UAX50 {
      attribute code { text },
      attribute SVO { 'U' | 'R' | 'V' }?,
      attribute MVO { 'U' | 'R' | 'V' }?,
      empty
   }

font-settings =
    ## Settings for fonts
    element font-settings {
       attribute auto-fallback-font { ah.boolean }?,
       ## Font for a linear barcode
       attribute barcode-text-font { 'OCRB' | 'monospace' }?,
       ## Default font family
       attribute default-font-family { xsd:NCName }?,
       ## Whether, and at what level, to report when a glyph is not found in a fallback font
       attribute fallback-glyph { '0' | '1' | '2' }?,
       ## Font selection method: 5 = disregard 'font-selection-strategy'; 6 = act on 'font-selection-strategy="character-by-character"'
       attribute font-selection-mode { '5' | '6' }?,
       attribute font-selection-strategy { xsd:NCName }?,
       attribute font-stretch-mode { xsd:integer }?,
       ## Whether to warn when font not found: [ 0 = no message; 1 = level 1 error message; 2 = level 2 error message ]
       attribute missing-font { '0' | '1' | '2' }?,
       ## Whether to warn when glyph not found: [ 0 = no message; 1 = level 1 error message; 2 = level 2 error message ]
       attribute missing-glyph { '0' | '1' | '2' }?,
       attribute missing-glyph-all { ah.boolean }?,
       attribute use-windows-api { ah.boolean }?,
       ## Mapping from generic font to actual font for a script
       script-font*,
       ## Alias one font name to another
       font-alias*
     }

script-font =
    element script-font {
        script-font.attlist,
        script-font.model
    }

script-font.model =
    empty

script-font.attlist =
    ## Generic cursive font for script
    attribute cursive { text }?,
    ## Generic fallback font for script
    attribute fallback { text }?,
    ## Generic fantasy font for script
    attribute fantasy { text }?,
    ## Generic monospace font for script
    attribute monospace { text }?,
    ## Generic sans-serif font for script
    attribute sans-serif { text }?,
    ## Script code
    attribute script { script.list }?,
    ## Generic serif font for script
    attribute serif { text }?

font-alias =
    element font-alias {
        font-alias.attlist,
        font-alias.model
    }

font-alias.model =
    empty

font-alias.attlist =
    ## Name of font to alias
    attribute src { text },
    ## Name of font to use in place of source font
    attribute dst { text }

unbreakable-words =
    element unbreakable-words {
        unbreakable-words.attlist,
        unbreakable-words.model
    }

unbreakable-words.model =
    text

unbreakable-words.attlist =
    ## External <unbreakable-words> document
    attribute src { text }?


pdf-settings =
     element pdf-settings {
       pdf-settings.attlist,
         pdf-settings.model
}

pdf-settings.attlist =
   ## Whether to allow annotation types that are deprecated in PDF 2.0
   attribute allow-deprecated-annotation { ah.boolean }?,
   ## Whether to allow PDF 1.x files in PDF 2.0
   attribute allow-embedding-lower-versions { ah.boolean }?,
   ## Whether JavaScript specified by openaction or axf:action-type is enabled: true | false
   attribute allow-javascript { ah.boolean }?,
   ## Whether to set alt text in descendants of tags with alt text: true | false
   attribute allow-nest-alt-text { ah.boolean }?,
   #attribute certificate-name { xsd:NCName }?,
   ## Whether to check the parent-child relationship between tags: true | false
   attribute check-tag-relationship { ah.boolean }?,
   ## Compression method for color image transformed into bitmap in PDF file: auto | zlib | jpeg | jpeg2000 | keeplzw | auto2k | keeplzw2k
   attribute color-compression { compression.list }?,
   ## Compression method for color image transformed into bitmap in PDF file: auto | zlib | jpeg | jpeg2000 | keeplzw | auto2k | keeplzw2k
   attribute color-compression-default { compression.list }?,
   ## Compression method for color image transformed into bitmap in PDF file: auto | zlib | jpeg | jpeg2000 | keeplzw | auto2k | keeplzw2k
   attribute color-compression-minimum { compression.list }?,
   ## How to convert the RGB or CMYK color space to DeviceGray or DeviceCMYK: none | black | gray | all-gray | all-cmyk
   attribute color-conversion { 'none' | 'black' | 'gray' | 'all-gray' | 'all-cmyk' }?,
   ## Whether to always convert black to K100 when 'color-conversion="all-cmyk"'
   attribute color-conversion-k100 { ah.boolean }?,
   attribute color-downsampling { downsampling.list }?,
   attribute color-downsampling-above-dpi { dpi.model }?,
   attribute color-downsampling-target-dpi { dpi.model }?,
   attribute color-downsampling-default { downsampling.list }?,
   attribute color-downsampling-above-dpi-default { dpi.model }?,
   attribute color-downsampling-target-dpi-default { dpi.model }?,
   attribute color-downsampling-minimum { downsampling.list }?,
   attribute color-downsampling-above-dpi-minimum { dpi.model }?,
   attribute color-downsampling-target-dpi-minimum { dpi.model }?,
   attribute color-jpeg-quality { jpeg-quality.model }?,
   attribute color-jpeg-quality-default { jpeg-quality.model }?,
   attribute color-jpeg-quality-minimum { jpeg-quality.model }?,
   attribute color-profile { text }?,
   attribute convert-colorspace { ah.boolean }?,
   ## Number of digits after the decimal point of real numbers to be output in PDF: 1 to 6
   attribute decimal-part-digits { xsd:positiveInteger { minInclusive = "1" maxInclusive = "6" } }?,
   attribute decimal-part-digits-default { xsd:positiveInteger { minInclusive = "1" maxInclusive = "6" } }?,
   attribute decimal-part-digits-minimum { xsd:positiveInteger { minInclusive = "1" maxInclusive = "6" } }?,
   attribute default-output-intent { text }?,
   ## Whether to embed all embeddable fonts in PDF: false | true | base14
   attribute embed-all-fonts { ah.boolean | 'base14' }?,
   attribute embed-font-encoding { text }?,
   attribute embed-std-output-intent { ah.boolean }?,
   attribute embed-subset-font-percentage { xsd:integer }?,
   attribute encrypt-metadata { ah.boolean }?,
   ## Key length when encrypting the PDF file: 40rc4 | 128rc4 | 128aes | 256aes
   attribute encryption-level { '40rc4' | '40RC4' | '128rc4' | '128RC4' | '128aes' | '128AES' | '256aes' | '256AES' }?,
   attribute EPS-processor { 'none' | 'distiller' | 'ghostscript' }?,
   attribute error-on-embed-fault { ah.boolean }?,
   attribute error-on-missing-glyph { ah.boolean }?,
   attribute error-on-pdfx-fault { ah.boolean }?,
   attribute error-on-tagged-pdf-fault { ah.boolean }?,
   ## Fallback string when 'axf:alttext' is not specified
   attribute fallback-alttext { text }?,
   ## Full path to Ghostscript
   attribute ghostscript { text }?,
   ## Available up to V6.2. Use 'pass-through' instead.: true | false
   attribute gif-pass-through { ah.boolean }?,
   attribute grayscale-compression { compression.list }?,
   attribute grayscale-compression-default { compression.list }?,
   attribute grayscale-compression-minimum { compression.list }?,
   attribute grayscale-downsampling { downsampling.list }?,
   attribute grayscale-downsampling-above-dpi { dpi.model }?,
   attribute grayscale-downsampling-target-dpi { dpi.model }?,
   attribute grayscale-downsampling-default { downsampling.list }?,
   attribute grayscale-downsampling-above-dpi-default { dpi.model }?,
   attribute grayscale-downsampling-target-dpi-default { dpi.model }?,
   attribute grayscale-downsampling-minimum { downsampling.list }?,
   attribute grayscale-downsampling-above-dpi-minimum { dpi.model }?,
   attribute grayscale-downsampling-target-dpi-minimum { dpi.model }?,
   attribute grayscale-jpeg-quality { jpeg-quality.model }?,
   attribute grayscale-jpeg-quality-default { jpeg-quality.model }?,
   attribute grayscale-jpeg-quality-minimum { jpeg-quality.model }?,
   ## Ghostscript parameters that replace default parameters. Use U+000A to separate multiple parameters.
attribute gs-options { text }?,
   ## Whether to embed ICC color profiles for images: true | false
   attribute image-color-profile { ah.boolean }?,
   #attribute image-compression { xsd:NCName }?,
   #attribute image-downsampling { xsd:NCName }?,
   #attribute image-downsampling-above-dpi { dpi.model }?,
   #attribute image-downsampling-target-dpi { dpi.model }?,
   #attribute import-3D-annotation { ah.boolean }?,
   #attribute import-3Dannotation { ah.boolean }?,
   ## Types of annotations to be embed in PDF
attribute import-annotation-types { text }?,
   ## Whether to permit embedding Tagged PDF in Tagged PDF: true | false
   attribute import-tagged-pdf { ah.boolean }?,
   #attribute import-textmarkup-annotation { ah.boolean }?,
   ## Adobe PDF Settings File that is passed to Distiller when converting EPS to PDF using Distiller
   attribute joboptions { text }?,
   #attribute jpeg-quality { jpeg-quality.model }?,
   ## Whether to create linearized PDF: true | false
   attribute linearized { ah.boolean }?,
   ## Whether the origin of /MediaBox is adjusted to '(0,0)': true | false
   attribute mediabox-origin-zero { ah.boolean }?,
   attribute monochrome-compression { monochrome.compression.list }?,
   attribute monochrome-compression-default { monochrome.compression.list }?,
   attribute monochrome-compression-minimum { monochrome.compression.list }?,
   attribute monochrome-downsampling { downsampling.list }?,
   attribute monochrome-downsampling-above-dpi { dpi.model }?,
   attribute monochrome-downsampling-target-dpi { dpi.model }?,
   attribute monochrome-downsampling-default { downsampling.list }?,
   attribute monochrome-downsampling-above-dpi-default { dpi.model }?,
   attribute monochrome-downsampling-target-dpi-default { dpi.model }?,
   attribute monochrome-downsampling-minimum { downsampling.list }?,
   attribute monochrome-downsampling-above-dpi-minimum { dpi.model }?,
   attribute monochrome-downsampling-target-dpi-minimum { dpi.model }?,
   ## Whether to embed multimedia in PDF when axf:multimedia-treatment="auto": embed | absolute-link | relative-link | richmedia | richmedia-windowed
   attribute multimedia-treatment { 'embed' | 'absolute-link' | 'relative-link' | 'richmedia' | 'richmedia-windowed' }?,
   	 ## Whether to enable the role map and axf:pdftag="''" support: true | false
   attribute new-tagging-mode { ah.boolean }?,
   ## Whether to permit text access for screen reader devices of PDF files: false | true
   attribute no-accessibility { ah.boolean }?,
   attribute no-adding-or-changing-comments { ah.boolean }?,
   attribute no-assemble-doc { ah.boolean }?,
   attribute no-changing { ah.boolean }?,
   attribute no-content-copying { ah.boolean }?,
   attribute no-fill-form { ah.boolean }?,
   attribute object-compression { ah.boolean }?,
   attribute object-compression-default { ah.boolean }?,
   attribute object-compression-minimum { ah.boolean }?,
   attribute overprint { xsd:NCName }?,
   attribute owner-password { text }?,
   ## Whether to apply page labels to page numbers: true | false
   attribute page-labels { ah.boolean }?,
   ## Maximum number of elements in the /Kids array of the PDF /Pages dictionary
   attribute pages-max-kids { xsd:integer }?,
   attribute pass-through { pass-through.model }?,
   attribute pass-through-default { pass-through.model }?,
   attribute pass-through-minimum { pass-through.model }?,
   attribute pdf-version { pdf-version.list }?,
   attribute printing-allowed { xsd:NCName }?,
   attribute rasterize-resolution { xsd:integer }?,
   attribute real-value-limit { '0' | '1' | '2' | '3' }?,
   attribute real-value-limit-modify { ah.boolean }?,
   attribute reverse-page { ah.boolean }?,
   attribute rgb-conversion { xsd:NCName }?,
   attribute signature { ah.boolean }?,
   attribute signature-name { xsd:NCName }?,
   attribute tagged-pdf { ah.boolean }?,
   attribute text-and-lineart-compression { ah.boolean }?,
   attribute text-and-lineart-compression-default { ah.boolean }?,
   attribute text-and-lineart-compression-minimum { ah.boolean }?,
   attribute transparency { ah.boolean }?,
   attribute transparency-color-space { xsd:NCName }?,
   attribute use-launch-for-local-file { ah.boolean }?,
   attribute user-password { text }?,
   ## Padding size to assist XMP editing in place when embedding XMP
   attribute xmp-padding { xsd:integer }?

pdf-settings.model =
   (embed-font*, (tag-role-map, embed-font*)?)

embed-font =
   element embed-font {
           attribute font { text }
   }

tag-role-map =
   element tag-role-map {
      tag-element+
   }

tag-element =
   element tag-element {
      attribute tag-base-name { token },
      attribute tag-derived-name { token },
      empty
   }


cgm-settings =
    element cgm-settings {
         attribute output-text { ah.boolean }?,
         empty
       }

ps-settings =
    element ps-settings {
      ## Whether fonts are embedded in PostScript output: true | false
      attribute noembed-font { ah.boolean }?,
      ## Whether transparency is processed when outputting pdfmark: true | false
      attribute transparency { ah.boolean }?,
      ## Whether anexternal link is transformed into “Open the file” or “World Wide Web link”: true | false
      attribute use-launch-for-local-file { ah.boolean }?
    }

mathml-settings =
    element mathml-settings {
         mathml-settings.attlist,
         element variant-font {
            attribute center-shift { text }?,
            attribute fontfamily { text },
            attribute mathvariant { '' | 'normal' | 'bold' | 'italic' | 'bold-italic' | 'double-struck' | 'bold-fraktur' | 'script' | 'bold-script' | 'fraktur' | 'sans-serif' | 'bold-sans-serif' | 'sans-serif-italic' | 'sans-serif-bold-italic' | 'monospace' }
         }*,
       element operator-dictionary {
          attribute src { text }?,
          element entry {
             attribute operator { text },
             attribute form { 'prefix' | 'infix' | 'postfix' },
             attribute priority { xsd:integer }?,
             attribute lspace { '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' }?,
             attribute rspace { '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' }?,
             attribute minsize { text }?,
             attribute maxsize { text }?,
             attribute accent { 'true' | 'false' }?,
             attribute fence { 'true' | 'false' }?,
             attribute separator { 'true' | 'false' }?,
             attribute stretchy { 'true' | 'false' }?,
             attribute symmetric { 'true' | 'false' }?,
             attribute largeop { 'true' | 'false' }?,
             attribute moveablelimits { 'true' | 'false' }?,
             attribute linebreakstyle { 'before' | 'after' | 'duplicate' }?
          }*
       }?
    }

mathml-settings.attlist =
    attribute mathDisplay { 'inline' | 'block' | 'context' }?,
    attribute scriptsizemultiplier { xsd:decimal }?,
    attribute scriptsizemultiplierMscarries { xsd:decimal }?,
    attribute scriptminsize { xsd:NMTOKEN }?,
    attribute scriptmaxsize { xsd:NMTOKEN }?,
    attribute largeop-multiplier { xsd:decimal }?,
    attribute error-display { xsd:NCName }?,
    attribute fraktur { xsd:NCName }?,
    attribute mode { xsd:NCName }?,
    attribute monospace { xsd:NCName }?,
    attribute opspace-multiplier { xsd:decimal }?,
    attribute sans-serif { xsd:NCName }?,
    attribute script { xsd:NCName }?,
    attribute script-maxnest { xsd:integer }?#,
    #attribute  { xsd:NMTOKEN }?,
    #attribute  { xsd:decimal }?,
    #attribute scriptsizemultiplier { xsd:decimal }?

munderover =
    element munderover {
        munderover.attlist,
        munderover.model
    }

munderover.model =
    empty

munderover.attlist =
    attribute bar-padding { text }?,
    attribute bar-width { text }?,
    attribute integral-largeop-overscript-space { xsd:decimal }?,
    attribute integral-largeop-underscript-space { xsd:decimal }?,
    attribute integral-overscript-space { xsd:decimal }?,
    attribute integral-underscript-space { xsd:decimal }?,
    attribute limit-size { text },
    attribute overaccent-shift { text },
    attribute overbar-space { text },
    attribute overscript-space { text },
    attribute tendsto-arror-variable { ah.boolean }?,
    attribute underaccent-shift { text },
    attribute underbar-space { text },
    attribute underscript-space { text }

svg-render-settings =
     element svg-render-settings {
         svg-render-settings.attlist,
         svg-render-settings.model
    }

svg-render-settings.attlist =
   attribute current-color-eval-at-painting { ah.boolean }?,
   attribute image-element-eval-as-svg20 { ah.boolean }?,
   attribute inherit-svg-fill-color { ah.boolean }?,
   attribute outermost-svg-eval-as-isolate { ah.boolean }?,
   attribute radial-gradient-eval-as-svg20 { ah.boolean }?,
   attribute rasterize-dpi { xsd:decimal }?,
   attribute rasterize-size-lower-limit { xsd:decimal }?,
   attribute rasterize-size-upper-limit { xsd:decimal }?,
   ## Whether the size matches the viewBox setting when width/height of the root element are omitted: reference | viewBox
   attribute responsive-svg-size { 'reference' | 'viewBox' }?,
   ## Whether <use> should be evaluated according to the SVG 2.0 specification: true | false
   attribute use-element-eval-as-shadow-element { ah.boolean }?,
   attribute width-height-as-presentation-attribute { ah.boolean }?

svg-render-settings.model =
    empty

svg-settings =
     element svg-settings {
         svg-settings.attlist,
         svg-settings.model
    }

svg-settings.attlist =
   #attribute base-uri { text }?,
   ## Destination directory when 'image-processing' is 'copy-all' or 'copy'
   attribute copy-image-path { text }?,
   ## Prefix to add to files copied to 'copy-image-path' directory
   attribute copy-image-prefix { text }?,
   ## Whether to create 'copy-image-path' directory if it does not exist
   attribute create-copy-image-path { ah.boolean }?,
   #attribute embed-all-fonts { ah.boolean }?,
   #attribute encoding { text }?,
   #attribute error-on-embed-fault { ah.boolean }?,
   attribute format { text }?,
   attribute gzip-compression { ah.boolean }?,
   ## Format for image to be embedded that is not already JPEG or PNG: auto | jpeg | png
   attribute image-conversion { 'auto' | 'jpeg' | 'png' }?,
   #attribute image-downsampling-dpi { dpi.model }?,
   #attribute image-downsampling-method { xsd:integer }?,
   ## How to treat a referenced image: embed-all | link | copy-all | copy
   attribute image-processing { 'embed-all' | 'link' | 'copy-all' | 'copy' }?,
   ## Image quality for images that cannot be embedded directly in SVG
   attribute jpeg-quality { jpeg-quality.model }?,
   ## Whether to add 'copy-image-prefix' prefix when copying files
   attribute rename-copy-image { ah.boolean }?,
   ## Whether multi-page formatted result is output as a single SVG file
   attribute singlefile { ah.boolean }?,
   ## Whether to add a sequence number to a one-page formatted document when 'singlefile="false"'
   attribute singlefile-number { ah.boolean }?,
   #attribute rasterize-resolution { xsd:integer }?,
   #attribute single-file-max-height { text }?,
   #attribute single-file-max-pages { xsd:integer }?,
   #attribute single-page-number { ah.boolean }?,
   ## SVG version to create
   attribute svg-version { '2.0' | '1.1' | 'Basic' | 'Tiny' }?

svg-settings.model =
         empty

text-settings =
     element text-settings { empty }

xslt-settings =
     element xslt-settings {
         xslt-settings.attlist,
         xslt-settings.model
    }

xslt-settings.attlist =
   ## Command line of external XSLT processor. Must include '%1', '%2', and '%3. Can include '%param'. On Windows, can be empty or '@MSXML'.
   attribute command { text }?,
   attribute msxml { ah.boolean }?,
   ## Highest MSXML version to use: 6 | 5 | 4 | 3 | 0
   attribute msxmlver { xsd:integer }?,
   ## Template for passing XSLT parameters. Must include '%p' and '%v'.
   attribute param-option { text }?

xslt-settings.model =
         param*

param =
     element param {
       attribute name { xsd:NCName },
       attribute value { xsd:anyURI }
     }


analyzer-settings =
    element analyzer-settings {
       attribute hyphen-limit { xsd:positiveInteger }?,
       attribute line-end-limit { xsd:positiveInteger }?,
       attribute line-end-repeat-limit { xsd:positiveInteger }?,
       attribute line-start-limit { xsd:positiveInteger }?,
       attribute line-start-repeat-limit { xsd:positiveInteger }?,
       attribute page-widow-limit-em { text }?,
       attribute page-widow-limit-percent { text }?,
       attribute paragraph-widow-limit-em { text }?,
       attribute paragraph-widow-limit-percent { text }?
     }
