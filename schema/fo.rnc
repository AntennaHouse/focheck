# Autogenerated file.  Do not edit.
# Generated using 'focheck' version 0.2.0
# Created: 2015-06-04
#
# Copyright 2015 Antenna House, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

default namespace fo = "http://www.w3.org/1999/XSL/Format"
namespace axf = "http://www.antennahouse.com/names/XSL/Extensions"
namespace local = ""

start = fo_root

# FOs

fo_root =
## This is the top node of the formatting object tree. It holds an fo:layout-master-set formatting object (which holds all masters used in the document), an optional fo:declarations, an optional fo:bookmark-tree, and one or more fo:page-sequence or fo:page-sequence-wrapper objects. Each fo:page-sequence represents a sequence of pages that result from formatting the content children of the fo:page-sequence. An fo:page-sequence-wrapper can also occur as the child of fo:root. An fo:page-sequence-wrapper can contain zero or more fo:page-sequence objects or fo:page-sequence-wrappers. The fo:page-sequence-wrapper is used to specify inherited properties for the fo:page-sequence objects it wraps; it has no additional formatting semantics.
  element root {
    fo_root.attlist,
    fo_root.model
}

fo_root.model =
    ( (fo_layout-master-set,fo_declarations?,fo_bookmark-tree?,(fo_page-sequence|fo_page-sequence-wrapper)+) )

fo_root.attlist =
    common-accessibility-properties,
    id,
    index-class,
    index-key,
    media-usage

fo_declarations =
## The fo:declarations formatting object is used to group global declarations for a stylesheet.
  element declarations {
    fo_declarations.model
}

fo_declarations.model =
    ( (fo_color-profile)* )

fo_color-profile =
## The fo:color-profile formatting object is used to declare an ICC Color Profile for a stylesheet. The color-profile is referenced again via the name specified in the "color-profile-name" property.
  element color-profile {
    fo_color-profile.attlist,
    fo_color-profile.model
}

fo_color-profile.model =
    ( empty )

fo_color-profile.attlist =
    color-profile-name,
    rendering-intent,
    src

fo_page-sequence =
## The fo:page-sequence formatting object is used to specify how to create a (sub-)sequence of pages within a document; for example, a chapter of a report. The content of these pages comes from flow children of the fo:page-sequence as assigned by the flow-map in effect for that fo:page-sequence. The layout of these pages comes from the fo:page-sequence-master or page-master referenced by the master-reference trait on the fo:page-sequence. The sequence of areas returned by each of the flow-object children of the fo:page-sequence are made descendants of the generated pages as described below.
  element page-sequence {
    fo_page-sequence.attlist,
    fo_page-sequence.model
}

fo_page-sequence.model =
    ( (fo_title?,fo_folio-prefix?,fo_folio-suffix?,fo_static-content*,fo_flow+) )

fo_page-sequence.attlist =
    country,
    flow-map-reference,
    force-page-count,
    format,
    grouping-separator,
    grouping-size,
    id,
    index-class,
    index-key,
    initial-page-number,
    language,
    letter-value,
    master-reference,
    reference-orientation,
    writing-mode

fo_page-sequence-wrapper =
## The fo:page-sequence-wrapper formatting object is used to specify inherited properties for a group of fo:page-sequence formatting objects.
  element page-sequence-wrapper {
    fo_page-sequence-wrapper.attlist,
    fo_page-sequence-wrapper.model
}

fo_page-sequence-wrapper.model =
    ( (fo_page-sequence|fo_page-sequence-wrapper)* )

fo_page-sequence-wrapper.attlist =
    id,
    index-class,
    index-key

fo_layout-master-set =
## The fo:layout-master-set is a wrapper around all masters used in the document. This includes page-sequence-masters, page-masters, and flow-maps.
  element layout-master-set {
    fo_layout-master-set.model
}

fo_layout-master-set.model =
    ( (fo_simple-page-master|fo_page-sequence-master|fo_flow-map)+ )

fo_page-sequence-master =
## The fo:page-sequence-master is used to specify the constraints on and the order in which a given set of page-masters will be used in generating a sequence of pages. Pages are automatically generated when the fo:page-sequence-master is used in formatting an fo:page-sequence.
  element page-sequence-master {
    fo_page-sequence-master.attlist,
    fo_page-sequence-master.model
}

fo_page-sequence-master.model =
    ( (fo_single-page-master-reference|fo_repeatable-page-master-reference|fo_repeatable-page-master-alternatives)+ )

fo_page-sequence-master.attlist =
    master-name

fo_single-page-master-reference =
## An fo:single-page-master-reference is the simplest sub-sequence-specifier. It specifies a sub-sequence consisting of a single instance of a single page-master. It is used to specify the use of a particular page-master at a given point in the sequence of pages that would be generated using the fo:page-sequence-master that is the parent of the fo:single-page-master-reference.
  element single-page-master-reference {
    fo_single-page-master-reference.attlist,
    fo_single-page-master-reference.model
}

fo_single-page-master-reference.model =
    ( empty )

fo_single-page-master-reference.attlist =
    master-reference

fo_repeatable-page-master-reference =
## An fo:repeatable-page-master-reference is the next simplest sub-sequence-specifier. It specifies a sub-sequence consisting of repeated instances of a single page-master. The number of repetitions may be bounded or potentially unbounded.
  element repeatable-page-master-reference {
    fo_repeatable-page-master-reference.attlist,
    fo_repeatable-page-master-reference.model
}

fo_repeatable-page-master-reference.model =
    ( empty )

fo_repeatable-page-master-reference.attlist =
    master-reference,
    maximum-repeats

fo_repeatable-page-master-alternatives =
## The fo:repeatable-page-master-alternatives formatting object is the most complex sub-sequence-specifier. It specifies a sub-sequence consisting of repeated instances of a set of alternative page-masters. The number of repetitions may be bounded or potentially unbounded. Which of the alternative page-masters is used at any point in the sequence depends on the evaluation of a condition on the use of the alternative. Typical conditions include, testing whether the page which is generated using the alternative is the first or last page in a page-sequence or is the page blank. The full set of conditions allows different page-masters to be used for the first page, for odd and even pages, for blank pages, etc.
  element repeatable-page-master-alternatives {
    fo_repeatable-page-master-alternatives.attlist,
    fo_repeatable-page-master-alternatives.model
}

fo_repeatable-page-master-alternatives.model =
    ( (fo_conditional-page-master-reference+) )

fo_repeatable-page-master-alternatives.attlist =
    maximum-repeats

fo_conditional-page-master-reference =
## The fo:conditional-page-master-reference is used to identify a page-master that is to be used when the conditions on its use are satisfied. This allows different page-masters to be used, for example, for even and odd pages, for the first page in a page-sequence, or for blank pages. This usage is typical in chapters of a book or report where the first page has a different layout than the rest of the chapter and the headings and footings on even and odd pages may be different as well.
  element conditional-page-master-reference {
    fo_conditional-page-master-reference.attlist,
    fo_conditional-page-master-reference.model
}

fo_conditional-page-master-reference.model =
    ( empty )

fo_conditional-page-master-reference.attlist =
    blank-or-not-blank,
    master-reference,
    odd-or-even,
    page-position

fo_simple-page-master =
## The fo:simple-page-master is used in the generation of pages and specifies the geometry of the page. The page is subdivided into regions: one or more region-body, and up to four other regions: region-before, region-after, region-start, and region-end.
  element simple-page-master {
    fo_simple-page-master.attlist,
    fo_simple-page-master.model
}

fo_simple-page-master.model =
    ( (fo_region-body+,fo_region-before?,fo_region-after?,fo_region-start?,fo_region-end?) )

fo_simple-page-master.attlist =
    common-margin-properties-block,
    master-name,
    page-height,
    page-width,
    reference-orientation,
    size,
    writing-mode

fo_region-body =
## Used in constructing a simple-page-master. This region specifies a viewport/reference pair that is located in the "center" of the fo:simple-page-master. The overflow trait controls how much of the underlying region-reference-area is visible; that is, whether the region-reference-area is clipped by its parent region-viewport-area.
  element region-body {
    fo_region-body.attlist,
    fo_region-body.model
}

fo_region-body.model =
    ( empty )

fo_region-body.attlist =
    common-border-padding-and-background-properties,
    common-margin-properties-block,
    clip,
    column-count,
    column-gap,
    display-align,
    overflow,
    reference-orientation,
    region-name,
    writing-mode

fo_region-before =
## Used in constructing a simple-page-master. This region specifies a viewport/reference pair that is located on the "before" side of the page-reference-area. In lr-tb writing-mode, this region corresponds to the header region. The overflow trait controls how much of the underlying region-reference-area is visible; that is, whether the region-reference-area is clipped by its parent region-viewport-area.
  element region-before {
    fo_region-before.attlist,
    fo_region-before.model
}

fo_region-before.model =
    ( empty )

fo_region-before.attlist =
    common-border-padding-and-background-properties,
    clip,
    display-align,
    extent,
    overflow,
    precedence,
    reference-orientation,
    region-name,
    writing-mode

fo_region-after =
## Used in constructing a simple-page-master. This region specifies a viewport/reference pair that is located on the "after" side of the page-reference-area. In lr-tb writing-mode, this region corresponds to the footer region. The overflow trait controls how much of the underlying region-reference-area is visible; that is, whether the region-reference-area is clipped by its parent region-viewport-area.
  element region-after {
    fo_region-after.attlist,
    fo_region-after.model
}

fo_region-after.model =
    ( empty )

fo_region-after.attlist =
    common-border-padding-and-background-properties,
    clip,
    display-align,
    extent,
    overflow,
    precedence,
    reference-orientation,
    region-name,
    writing-mode

fo_region-start =
## Used in constructing a simple-page-master. This region specifies a viewport/reference pair that is located on the "start" side of the page-reference-area. In lr-tb writing-mode, this region corresponds to a left sidebar. The overflow trait controls how much of the underlying region-reference-area is visible; that is, whether the region-reference-area is clipped by its parent region-viewport-area.
  element region-start {
    fo_region-start.attlist,
    fo_region-start.model
}

fo_region-start.model =
    ( empty )

fo_region-start.attlist =
    common-border-padding-and-background-properties,
    clip,
    display-align,
    extent,
    overflow,
    reference-orientation,
    region-name,
    writing-mode

fo_region-end =
## Used in constructing a simple-page-master. This region specifies a viewport/reference pair that is located on the "end" side of the page-reference-area. In lr-tb writing-mode, this region corresponds to a right sidebar. The overflow trait controls how much of the underlying region-reference-area is visible; that is, whether the region-reference-area is clipped by its parent region-viewport-area.
  element region-end {
    fo_region-end.attlist,
    fo_region-end.model
}

fo_region-end.model =
    ( empty )

fo_region-end.attlist =
    common-border-padding-and-background-properties,
    clip,
    display-align,
    extent,
    overflow,
    reference-orientation,
    region-name,
    writing-mode

fo_flow =
## The content of the fo:flow formatting object is a sequence of flow objects that provides the flowing text content that is distributed into pages.
  element flow {
    fo_flow.attlist,
    fo_flow.model
}

fo_flow.model =
    fo_marker*,
    ( (block.fo.list | neutral.fo.list.block)+ & (point.fo.list)* )

fo_flow.attlist =
    flow-name,
    id,
    index-class,
    index-key

fo_static-content =
## The fo:static-content formatting object holds a sequence or a tree of formatting objects that is to be presented in a single region or repeated in like-named regions on one or more pages in the page-sequence. Its common use is for repeating or running headers and footers.
  element static-content {
    fo_static-content.attlist,
    fo_static-content.model
}

fo_static-content.model =
    ( (block.fo.list | neutral.fo.list.block)+ & (point.fo.list)* )

fo_static-content.attlist =
    flow-name,
    id,
    index-class,
    index-key

fo_title =
## The fo:title formatting object is used to associate a title with a given page-sequence. This title may be used by an interactive User Agent to identify the pages. For example, the content of the fo:title can be formatted and displayed in a "title" window or in a "tool tip".
  element title {
    fo_title.attlist,
    fo_title.model
}

fo_title.model =
    ( ( (text|inline.fo.list | neutral.fo.list.inline)* & (inline.out-of-line.fo.list)* ) )

fo_title.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-font-properties,
    common-margin-properties-inline,
    color,
    line-height,
    visibility

fo_flow-map =
## The fo:flow-map is used to specify the assignment of flows to regions.
  element flow-map {
    fo_flow-map.attlist,
    fo_flow-map.model
}

fo_flow-map.model =
    ( (fo_flow-assignment+) )

fo_flow-map.attlist =
    flow-map-name

fo_flow-assignment =
## The fo:flow-assignment is used to specify the assignment of one sequence of flows to a sequence of regions.
  element flow-assignment {
    fo_flow-assignment.model
}

fo_flow-assignment.model =
    ( (fo_flow-source-list,fo_flow-target-list) )

fo_flow-source-list =
## The fo:flow-source-list is used to specify the sequence of flows to assign in a particular fo:flow-assignment.
  element flow-source-list {
    fo_flow-source-list.model
}

fo_flow-source-list.model =
    ( (fo_flow-name-specifier+) )

fo_flow-name-specifier =
## The fo:flow-name-specifier is used to specify one flow in a source-list.
  element flow-name-specifier {
    fo_flow-name-specifier.attlist,
    fo_flow-name-specifier.model
}

fo_flow-name-specifier.model =
    ( empty )

fo_flow-name-specifier.attlist =
    flow-name-reference

fo_flow-target-list =
## The fo:flow-target-list is used to specify the sequence of regions to which flows are assigned in a particular fo:flow-assignment.
  element flow-target-list {
    fo_flow-target-list.model
}

fo_flow-target-list.model =
    ( (fo_region-name-specifier+) )

fo_region-name-specifier =
## The fo:region-name-specifier is used to specify one region in a target-list.
  element region-name-specifier {
    fo_region-name-specifier.attlist,
    fo_region-name-specifier.model
}

fo_region-name-specifier.model =
    ( empty )

fo_region-name-specifier.attlist =
    region-name-reference

fo_block =
## The fo:block formatting object is commonly used for formatting paragraphs, titles, headlines, figure and table captions, etc.
  element block {
    fo_block.attlist,
    fo_block.model
}

fo_block.model =
    fo_marker*,
    fo_initial-property-set?,
    ( ( (text|inline.fo.list|block.fo.list | neutral.fo.list)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_block.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-font-properties,
    common-hyphenation-properties,
    common-margin-properties-block,
    break-after,
    break-before,
    clear,
    color,
    hyphenation-keep,
    hyphenation-ladder-count,
    id,
    index-class,
    index-key,
    intrusion-displace,
    keep-together,
    keep-with-next,
    keep-with-previous,
    last-line-end-indent,
    line-height,
    line-height-shift-adjustment,
    line-stacking-strategy,
    linefeed-treatment,
    orphans,
    page-break-after,
    page-break-before,
    span,
    text-align,
    text-align-last,
    text-altitude,
    text-depth,
    text-indent,
    visibility,
    white-space-collapse,
    white-space-treatment,
    widows,
    wrap-option

fo_block-container =
## The fo:block-container flow object is used to generate a block-level reference-area, typically containing text blocks with a different writing-mode. In addition, it can also be used with a different reference-orientation to rotate its content.
  element block-container {
    fo_block-container.attlist,
    fo_block-container.model
}

fo_block-container.model =
    fo_marker*,
    ( (block.fo.list | neutral.fo.list.block)+ & (point.fo.list)* )

fo_block-container.attlist =
    common-absolute-position-properties,
    common-border-padding-and-background-properties,
    common-margin-properties-block,
    block-progression-dimension,
    break-after,
    break-before,
    clear,
    clip,
    display-align,
    height,
    id,
    index-class,
    index-key,
    inline-progression-dimension,
    intrusion-displace,
    keep-together,
    keep-with-next,
    keep-with-previous,
    max-height,
    max-width,
    min-height,
    min-width,
    overflow,
    page-break-after,
    page-break-before,
    reference-orientation,
    span,
    width,
    writing-mode,
    z-index

fo_bidi-override =
## The fo:bidi-override formatting object is used when the Unicode BIDI algorithm fails. It forces a string of text to be written in a specific direction.
  element bidi-override {
    fo_bidi-override.attlist,
    fo_bidi-override.model
}

fo_bidi-override.model =
    fo_marker*,
    ( ( (text|inline.fo.list|block.fo.list | neutral.fo.list)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_bidi-override.attlist =
    common-relative-position-properties,
    common-font-properties,
    color,
    direction,
    id,
    index-class,
    index-key,
    letter-spacing,
    line-height,
    score-spaces,
    unicode-bidi,
    word-spacing

fo_character =
## The fo:character flow object represents a character that is mapped to a glyph for presentation. It is an atomic unit to the formatter.
  element character {
    fo_character.attlist,
    fo_character.model
}

fo_character.model =
    ( empty )

fo_character.attlist =
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-font-properties,
    common-hyphenation-properties,
    common-margin-properties-inline,
    alignment-adjust,
    alignment-baseline,
    baseline-shift,
    character,
    color,
    dominant-baseline,
    glyph-orientation-horizontal,
    glyph-orientation-vertical,
    id,
    index-class,
    index-key,
    keep-with-next,
    keep-with-previous,
    letter-spacing,
    line-height,
    score-spaces,
    suppress-at-line-break,
    text-altitude,
    text-decoration,
    text-depth,
    text-shadow,
    text-transform,
    treat-as-word-space,
    vertical-align,
    visibility,
    word-spacing

fo_initial-property-set =
## The fo:initial-property-set auxiliary formatting object specifies formatting properties for the first line of an fo:block.
  element initial-property-set {
    fo_initial-property-set.attlist,
    fo_initial-property-set.model
}

fo_initial-property-set.model =
    ( empty )

fo_initial-property-set.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-font-properties,
    color,
    letter-spacing,
    line-height,
    score-spaces,
    text-decoration,
    text-shadow,
    text-transform,
    word-spacing

fo_external-graphic =
## The fo:external-graphic flow object is used for a graphic where the graphics data resides outside of the fo:element tree.
  element external-graphic {
    fo_external-graphic.attlist,
    fo_external-graphic.model
}

fo_external-graphic.model =
    ( empty )

fo_external-graphic.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-margin-properties-inline,
    alignment-adjust,
    alignment-baseline,
    allowed-height-scale,
    allowed-width-scale,
    baseline-shift,
    block-progression-dimension,
    clip,
    content-height,
    content-type,
    content-width,
    display-align,
    dominant-baseline,
    height,
    id,
    index-class,
    index-key,
    inline-progression-dimension,
    keep-with-next,
    keep-with-previous,
    line-height,
    max-height,
    max-width,
    min-height,
    min-width,
    overflow,
    scaling,
    scaling-method,
    src,
    text-align,
    vertical-align,
    width

fo_instream-foreign-object =
## The fo:instream-foreign-object flow object is used for an inline graphic or other "generic" object where the object data resides as descendants of the fo:instream-foreign-object, typically as an XML element subtree in a non-XSL namespace.
  element instream-foreign-object {
    fo_instream-foreign-object.attlist,
    fo_instream-foreign-object.model
}

fo_instream-foreign-object.model =
    ( non-xsl & (point.fo.list)* )

fo_instream-foreign-object.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-margin-properties-inline,
    alignment-adjust,
    alignment-baseline,
    allowed-height-scale,
    allowed-width-scale,
    baseline-shift,
    block-progression-dimension,
    clip,
    content-height,
    content-type,
    content-width,
    display-align,
    dominant-baseline,
    height,
    id,
    index-class,
    index-key,
    inline-progression-dimension,
    keep-with-next,
    keep-with-previous,
    line-height,
    max-height,
    max-width,
    min-height,
    min-width,
    overflow,
    scaling,
    scaling-method,
    text-align,
    vertical-align,
    width

fo_inline =
## The fo:inline formatting object is commonly used for formatting a portion of text with a background or enclosing it in a border.
  element inline {
    fo_inline.attlist,
    fo_inline.model
}

fo_inline.model =
    fo_marker*,
    ( ( (text|inline.fo.list|block.fo.list | neutral.fo.list)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_inline.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-font-properties,
    common-margin-properties-inline,
    alignment-adjust,
    alignment-baseline,
    baseline-shift,
    block-progression-dimension,
    color,
    dominant-baseline,
    height,
    id,
    index-class,
    index-key,
    inline-progression-dimension,
    keep-together,
    keep-with-next,
    keep-with-previous,
    line-height,
    max-height,
    max-width,
    min-height,
    min-width,
    text-decoration,
    vertical-align,
    visibility,
    width,
    wrap-option

fo_inline-container =
## The fo:inline-container flow object is used to generate an inline reference-area, typically containing text blocks with a different writing-mode.
  element inline-container {
    fo_inline-container.attlist,
    fo_inline-container.model
}

fo_inline-container.model =
    fo_marker*,
    ( (block.fo.list | neutral.fo.list.block)+ & (point.fo.list)* )

fo_inline-container.attlist =
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-margin-properties-inline,
    alignment-adjust,
    alignment-baseline,
    baseline-shift,
    block-progression-dimension,
    clip,
    display-align,
    dominant-baseline,
    height,
    id,
    index-class,
    index-key,
    inline-progression-dimension,
    keep-together,
    keep-with-next,
    keep-with-previous,
    line-height,
    max-height,
    max-width,
    min-height,
    min-width,
    overflow,
    reference-orientation,
    vertical-align,
    width,
    writing-mode

fo_leader =
## The fo:leader formatting object is often used:
  element leader {
    fo_leader.attlist,
    fo_leader.model
}

fo_leader.model =
    ( ( (text|inline.fo.list | neutral.fo.list.inline)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_leader.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-font-properties,
    common-margin-properties-inline,
    alignment-adjust,
    alignment-baseline,
    baseline-shift,
    color,
    dominant-baseline,
    id,
    index-class,
    index-key,
    keep-with-next,
    keep-with-previous,
    leader-alignment,
    leader-length,
    leader-pattern,
    leader-pattern-width,
    letter-spacing,
    line-height,
    rule-style,
    rule-thickness,
    text-altitude,
    text-depth,
    text-shadow,
    vertical-align,
    visibility,
    word-spacing

fo_page-number =
## The fo:page-number formatting object is used to obtain an inline-area whose content is the page-number for the page on which the inline-area is placed.
  element page-number {
    fo_page-number.attlist,
    fo_page-number.model
}

fo_page-number.model =
    ( empty )

fo_page-number.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-font-properties,
    common-margin-properties-inline,
    alignment-adjust,
    alignment-baseline,
    baseline-shift,
    dominant-baseline,
    id,
    index-class,
    index-key,
    keep-with-next,
    keep-with-previous,
    letter-spacing,
    line-height,
    score-spaces,
    text-altitude,
    text-decoration,
    text-depth,
    text-shadow,
    text-transform,
    vertical-align,
    visibility,
    word-spacing,
    wrap-option

fo_page-number-citation =
## The fo:page-number-citation is used to reference the page-number for the page containing the first normal area returned by the cited formatting object.
  element page-number-citation {
    fo_page-number-citation.attlist,
    fo_page-number-citation.model
}

fo_page-number-citation.model =
    ( empty )

fo_page-number-citation.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-font-properties,
    common-margin-properties-inline,
    alignment-adjust,
    alignment-baseline,
    baseline-shift,
    dominant-baseline,
    id,
    index-class,
    index-key,
    keep-with-next,
    keep-with-previous,
    letter-spacing,
    line-height,
    ref-id,
    score-spaces,
    text-altitude,
    text-decoration,
    text-depth,
    text-shadow,
    text-transform,
    vertical-align,
    visibility,
    word-spacing,
    wrap-option

fo_page-number-citation-last =
## The fo:page-number-citation-last is used to reference the page-number for the last page containing an area that is (a) returned by the cited formatting object and (b) has an area-class that is consistent with the specified page-citation-strategy.
  element page-number-citation-last {
    fo_page-number-citation-last.attlist,
    fo_page-number-citation-last.model
}

fo_page-number-citation-last.model =
    ( empty )

fo_page-number-citation-last.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-font-properties,
    common-margin-properties-inline,
    alignment-adjust,
    alignment-baseline,
    baseline-shift,
    dominant-baseline,
    id,
    index-class,
    index-key,
    keep-with-next,
    keep-with-previous,
    letter-spacing,
    line-height,
    page-citation-strategy,
    ref-id,
    score-spaces,
    text-altitude,
    text-decoration,
    text-depth,
    text-shadow,
    text-transform,
    vertical-align,
    visibility,
    word-spacing,
    wrap-option

fo_folio-prefix =
## The fo:folio-prefix formatting object specifies a static prefix for the folio numbers within a page-sequence.
  element folio-prefix {
    fo_folio-prefix.model
}

fo_folio-prefix.model =
    ( ( (text|inline.fo.list | neutral.fo.list.inline)* & (inline.out-of-line.fo.list)* ) )

fo_folio-suffix =
## The fo:folio-suffix formatting object specifies a static suffix for the folio numbers within a page-sequence.
  element folio-suffix {
    fo_folio-suffix.model
}

fo_folio-suffix.model =
    ( ( (text|inline.fo.list | neutral.fo.list.inline)* & (inline.out-of-line.fo.list)* ) )

fo_scaling-value-citation =
## The fo:scaling-value-citation is used to obtain the scale-factor applied to the cited fo:external-graphic.
  element scaling-value-citation {
    fo_scaling-value-citation.attlist,
    fo_scaling-value-citation.model
}

fo_scaling-value-citation.model =
    ( empty )

fo_scaling-value-citation.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-font-properties,
    common-margin-properties-inline,
    alignment-adjust,
    alignment-baseline,
    baseline-shift,
    country,
    dominant-baseline,
    format,
    grouping-separator,
    grouping-size,
    id,
    index-class,
    index-key,
    intrinsic-scale-value,
    keep-with-next,
    keep-with-previous,
    language,
    letter-spacing,
    letter-value,
    line-height,
    ref-id,
    scale-option,
    score-spaces,
    text-altitude,
    text-decoration,
    text-depth,
    text-shadow,
    text-transform,
    vertical-align,
    visibility,
    word-spacing,
    wrap-option

fo_table-and-caption =
## The fo:table-and-caption flow object is used for formatting a table together with its caption.
  element table-and-caption {
    fo_table-and-caption.attlist,
    fo_table-and-caption.model
}

fo_table-and-caption.model =
    fo_marker*,
    ( (fo_table-caption?,fo_table) & (point.fo.list)* )

fo_table-and-caption.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-margin-properties-block,
    break-after,
    break-before,
    caption-side,
    clear,
    id,
    index-class,
    index-key,
    intrusion-displace,
    keep-together,
    keep-with-next,
    keep-with-previous,
    page-break-after,
    page-break-before,
    text-align

fo_table =
## The fo:table flow object is used for formatting the tabular material of a table.
  element table {
    fo_table.attlist,
    fo_table.model
}

fo_table.model =
    fo_marker*,
    ( (fo_table-column*,fo_table-header?,fo_table-footer?,fo_table-body+) & (point.fo.list)* )

fo_table.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-margin-properties-block,
    block-progression-dimension,
    border-after-precedence,
    border-before-precedence,
    border-collapse,
    border-end-precedence,
    border-separation,
    border-start-precedence,
    break-after,
    break-before,
    clear,
    height,
    id,
    index-class,
    index-key,
    inline-progression-dimension,
    intrusion-displace,
    keep-together,
    keep-with-next,
    keep-with-previous,
    max-height,
    max-width,
    min-height,
    min-width,
    page-break-after,
    page-break-before,
    table-layout,
    table-omit-footer-at-break,
    table-omit-header-at-break,
    width,
    writing-mode

fo_table-column =
## The fo:table-column auxiliary formatting object specifies characteristics applicable to table cells that have the same column and span. The most important property is the "column-width" property.
  element table-column {
    fo_table-column.attlist,
    fo_table-column.model
}

fo_table-column.model =
    ( empty )

fo_table-column.attlist =
    common-border-padding-and-background-properties,
    border-after-precedence,
    border-before-precedence,
    border-end-precedence,
    border-start-precedence,
    column-number,
    column-width,
    number-columns-repeated,
    number-columns-spanned,
    visibility

fo_table-caption =
## The fo:table-caption formatting object is used to contain block-level formatting objects containing the caption for the table only when using the fo:table-and-caption.
  element table-caption {
    fo_table-caption.attlist,
    fo_table-caption.model
}

fo_table-caption.model =
    fo_marker*,
    ( (block.fo.list | neutral.fo.list.block)+ & (point.fo.list)* )

fo_table-caption.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    block-progression-dimension,
    height,
    id,
    index-class,
    index-key,
    inline-progression-dimension,
    intrusion-displace,
    keep-together,
    max-height,
    max-width,
    min-height,
    min-width,
    width

fo_table-header =
## The fo:table-header formatting object is used to contain the content of the table header.
  element table-header {
    fo_table-header.attlist,
    fo_table-header.model
}

fo_table-header.model =
    fo_marker*,
    ( (fo_table-row+|fo_table-cell+) & (point.fo.list)* )

fo_table-header.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    border-after-precedence,
    border-before-precedence,
    border-end-precedence,
    border-start-precedence,
    id,
    index-class,
    index-key,
    visibility

fo_table-footer =
## The fo:table-footer formatting object is used to contain the content of the table footer.
  element table-footer {
    fo_table-footer.attlist,
    fo_table-footer.model
}

fo_table-footer.model =
    fo_marker*,
    ( (fo_table-row+|fo_table-cell+) & (point.fo.list)* )

fo_table-footer.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    border-after-precedence,
    border-before-precedence,
    border-end-precedence,
    border-start-precedence,
    id,
    index-class,
    index-key,
    visibility

fo_table-body =
## The fo:table-body formatting object is used to contain the content of the table body.
  element table-body {
    fo_table-body.attlist,
    fo_table-body.model
}

fo_table-body.model =
    fo_marker*,
    ( (fo_table-row+|fo_table-cell+) & (point.fo.list)* )

fo_table-body.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    border-after-precedence,
    border-before-precedence,
    border-end-precedence,
    border-start-precedence,
    id,
    index-class,
    index-key,
    visibility

fo_table-row =
## The fo:table-row formatting object is used to group table-cells into rows; all table-cells in a table-row start in the same geometric row on the table grid.
  element table-row {
    fo_table-row.attlist,
    fo_table-row.model
}

fo_table-row.model =
    fo_marker*,
    ( (fo_table-cell+) & (point.fo.list)* )

fo_table-row.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    block-progression-dimension,
    border-after-precedence,
    border-before-precedence,
    border-end-precedence,
    border-start-precedence,
    break-after,
    break-before,
    height,
    id,
    index-class,
    index-key,
    keep-together,
    keep-with-next,
    keep-with-previous,
    page-break-after,
    page-break-before,
    visibility

fo_table-cell =
## The fo:table-cell formatting object is used to group content to be placed in a table cell.
  element table-cell {
    fo_table-cell.attlist,
    fo_table-cell.model
}

fo_table-cell.model =
    fo_marker*,
    ( (block.fo.list | neutral.fo.list.block)+ & (point.fo.list)* )

fo_table-cell.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    block-progression-dimension,
    border-after-precedence,
    border-before-precedence,
    border-end-precedence,
    border-start-precedence,
    column-number,
    display-align,
    empty-cells,
    ends-row,
    height,
    id,
    index-class,
    index-key,
    inline-progression-dimension,
    max-height,
    max-width,
    min-height,
    min-width,
    number-columns-spanned,
    number-rows-spanned,
    relative-align,
    starts-row,
    width

fo_list-block =
## The fo:list-block flow object is used to format a list.
  element list-block {
    fo_list-block.attlist,
    fo_list-block.model
}

fo_list-block.model =
    fo_marker*,
    ( (fo_list-item+) & (point.fo.list)* )

fo_list-block.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-margin-properties-block,
    break-after,
    break-before,
    clear,
    id,
    index-class,
    index-key,
    intrusion-displace,
    keep-together,
    keep-with-next,
    keep-with-previous,
    page-break-after,
    page-break-before,
    provisional-distance-between-starts,
    provisional-label-separation

fo_list-item =
## The fo:list-item formatting object contains the label and the body of an item in a list.
  element list-item {
    fo_list-item.attlist,
    fo_list-item.model
}

fo_list-item.model =
    fo_marker*,
    ( (fo_list-item-label,fo_list-item-body) & (point.fo.list)* )

fo_list-item.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-margin-properties-block,
    break-after,
    break-before,
    id,
    index-class,
    index-key,
    intrusion-displace,
    keep-together,
    keep-with-next,
    keep-with-previous,
    page-break-after,
    page-break-before,
    relative-align

fo_list-item-body =
## The fo:list-item-body formatting object contains the content of the body of a list-item.
  element list-item-body {
    fo_list-item-body.attlist,
    fo_list-item-body.model
}

fo_list-item-body.model =
    fo_marker*,
    ( (block.fo.list | neutral.fo.list.block)+ & (point.fo.list)* )

fo_list-item-body.attlist =
    common-accessibility-properties,
    id,
    index-class,
    index-key,
    keep-together

fo_list-item-label =
## The fo:list-item-label formatting object contains the content of the label of a list-item, typically used to either enumerate, identify, or adorn the list-item's body.
  element list-item-label {
    fo_list-item-label.attlist,
    fo_list-item-label.model
}

fo_list-item-label.model =
    fo_marker*,
    ( (block.fo.list | neutral.fo.list.block)+ & (point.fo.list)* )

fo_list-item-label.attlist =
    common-accessibility-properties,
    id,
    index-class,
    index-key,
    keep-together

fo_basic-link =
## The fo:basic-link is used for representing the start resource of a simple one-directional single-target link. The object allows for traversal to the destination resource, typically by clicking on any of the containing areas.
  element basic-link {
    fo_basic-link.attlist,
    fo_basic-link.model
}

fo_basic-link.model =
    fo_marker*,
    ( ( (text|inline.fo.list|block.fo.list | neutral.fo.list)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_basic-link.attlist =
    common-accessibility-properties,
    common-border-padding-and-background-properties,
    common-relative-position-properties,
    common-margin-properties-inline,
    alignment-adjust,
    alignment-baseline,
    baseline-shift,
    destination-placement-offset,
    dominant-baseline,
    external-destination,
    id,
    index-class,
    index-key,
    indicate-destination,
    internal-destination,
    keep-together,
    keep-with-next,
    keep-with-previous,
    line-height,
    show-destination,
    target-presentation-context,
    target-processing-context,
    target-stylesheet,
    vertical-align

fo_multi-switch =
## The fo:multi-switch wraps the specification of alternative sub-trees of formatting objects (each sub-tree being within an fo:multi-case), and controls the switching (activated via fo:multi-toggle) from one alternative to another.
  element multi-switch {
    fo_multi-switch.attlist,
    fo_multi-switch.model
}

fo_multi-switch.model =
    ( (fo_multi-case+) & (point.fo.list)* )

fo_multi-switch.attlist =
    common-accessibility-properties,
    auto-restore,
    id,
    index-class,
    index-key

fo_multi-case =
## The fo:multi-case is used to contain (within an fo:multi-switch) each alternative sub-tree of formatting objects among which the parent fo:multi-switch will choose one to show and will hide the rest.
  element multi-case {
    fo_multi-case.attlist,
    fo_multi-case.model
}

fo_multi-case.model =
    ( ( (text|inline.fo.list|block.fo.list | neutral.fo.list)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_multi-case.attlist =
    common-accessibility-properties,
    case-name,
    case-title,
    id,
    index-class,
    index-key,
    starting-state

fo_multi-toggle =
## The fo:multi-toggle is typically used to establish an area that when actuated (for example implemented as "clicked"), has the effect of switching from one fo:multi-case to another. The "switch-to" property value of the fo:multi-toggle typically matches the "case-name" property value of the fo:multi-case to switch to.
  element multi-toggle {
    fo_multi-toggle.attlist,
    fo_multi-toggle.model
}

fo_multi-toggle.model =
    ( ( (text|inline.fo.list|block.fo.list | neutral.fo.list)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_multi-toggle.attlist =
    common-accessibility-properties,
    id,
    index-class,
    index-key,
    switch-to

fo_multi-properties =
## The fo:multi-properties is used to switch between two or more property sets that are associated with a given portion of content.
  element multi-properties {
    fo_multi-properties.attlist,
    fo_multi-properties.model
}

fo_multi-properties.model =
    ( (fo_multi-property-set+,fo_wrapper) & (point.fo.list)* )

fo_multi-properties.attlist =
    common-accessibility-properties

fo_multi-property-set =
## The fo:multi-property-set auxiliary formatting object is used to specify an alternative set of formatting properties that can be used to provide an alternate presentation of the children flow objects of the fo:wrapper child of the parent of this fo:multi-property-set.
  element multi-property-set {
    fo_multi-property-set.attlist,
    fo_multi-property-set.model
}

fo_multi-property-set.model =
    ( empty )

fo_multi-property-set.attlist =
    active-state,
    id,
    index-class,
    index-key

fo_index-page-number-prefix =
## The fo:index-page-number-prefix formatting object specifies a static prefix for the cited page items created by fo:index-key-reference.
  element index-page-number-prefix {
    fo_index-page-number-prefix.model
}

fo_index-page-number-prefix.model =
    ( ( (text|inline.fo.list | neutral.fo.list.inline)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_index-page-number-suffix =
## The fo:index-page-number-suffix formatting object specifies a static suffix for the cited page items created by fo:index-key-reference.
  element index-page-number-suffix {
    fo_index-page-number-suffix.model
}

fo_index-page-number-suffix.model =
    ( ( (text|inline.fo.list | neutral.fo.list.inline)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_index-range-begin =
## The fo:index-range-begin formatting object is used to indicate the beginning of an "indexed range" associated with an index key. The index range is ended by a corresponding fo:index-range-end.
  element index-range-begin {
    fo_index-range-begin.attlist,
    fo_index-range-begin.model
}

fo_index-range-begin.model =
    ( empty )

fo_index-range-begin.attlist =
    id,
    index-class,
    index-key

fo_index-range-end =
## The fo:index-range-end is used to indicate the end of an "indexed range" that is started by its matching fo:index-range-begin. See for details.
  element index-range-end {
    fo_index-range-end.attlist,
    fo_index-range-end.model
}

fo_index-range-end.model =
    ( empty )

fo_index-range-end.attlist =
    ref-id

fo_index-key-reference =
## The fo:index-key-reference formatting object is used to generate a set of cited page items for all the occurrences of the specified index-key.
  element index-key-reference {
    fo_index-key-reference.attlist,
    fo_index-key-reference.model
}

fo_index-key-reference.model =
    ( (fo_index-page-number-prefix?,fo_index-page-number-suffix?) & (point.fo.list)* )

fo_index-key-reference.attlist =
    page-number-treatment,
    ref-index-key

fo_index-page-citation-list =
## The fo:index-page-citation-list formatting object is used to group together the sets of cited page items generated by its fo:index-key-reference children. Each fo:index-key-reference child provides formatting properties for the corresponding cited page items. The resulting cited page items are sorted and collated together. The ultimate effect of the fo:index-page-citation-list is to generate a formatted list of page numbers and ranges.
  element index-page-citation-list {
    fo_index-page-citation-list.attlist,
    fo_index-page-citation-list.model
}

fo_index-page-citation-list.model =
    ( (fo_index-page-citation-list-separator?,fo_index-page-citation-range-separator?,fo_index-key-reference+) & (point.fo.list)* )

fo_index-page-citation-list.attlist =
    merge-pages-across-index-key-references,
    merge-ranges-across-index-key-references,
    merge-sequential-page-numbers

fo_index-page-citation-list-separator =
## The fo:index-page-citation-list-separator formatting object specifies the formatting objects used to separate singleton page numbers or page number ranges in the generated list of page numbers.
  element index-page-citation-list-separator {
    fo_index-page-citation-list-separator.model
}

fo_index-page-citation-list-separator.model =
    ( ( (text|inline.fo.list | neutral.fo.list.inline)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_index-page-citation-range-separator =
## The fo:index-page-citation-range-separator formatting object specifies the formatting objects used to separate two page numbers forming a range in the generated list of page numbers.
  element index-page-citation-range-separator {
    fo_index-page-citation-range-separator.model
}

fo_index-page-citation-range-separator.model =
    ( ( (text|inline.fo.list | neutral.fo.list.inline)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_bookmark-tree =
## The fo:bookmark-tree formatting object is used to hold a list of access points within the document such as a table of contents, a list of figures or tables, etc. Each access point is called a bookmark.
  element bookmark-tree {
    fo_bookmark-tree.model
}

fo_bookmark-tree.model =
    ( (fo_bookmark+) )

fo_bookmark =
## The fo:bookmark formatting object is used to identify an access point, by name, and to specify where that access point is within the current document or another external document. A given bookmark may be further subdivided into a sequence of (sub-)bookmarks to as many levels as the authors desire.
  element bookmark {
    fo_bookmark.attlist,
    fo_bookmark.model
}

fo_bookmark.model =
    ( (fo_bookmark-title,fo_bookmark*) & (point.fo.list)* )

fo_bookmark.attlist =
    common-accessibility-properties,
    external-destination,
    internal-destination,
    starting-state

fo_bookmark-title =
## The fo:bookmark-title formatting object is used to identify, in human readable form, an access point.
  element bookmark-title {
    fo_bookmark-title.attlist,
    fo_bookmark-title.model
}

fo_bookmark-title.model =
    ( (text) & (point.fo.list)* )

fo_bookmark-title.attlist =
    common-accessibility-properties,
    color,
    font-style,
    font-weight

fo_float =
## The fo:float formatting object is typically used either to cause an image to be positioned in a separate area at the beginning of a page, or to cause an image to be positioned to one side, with normal content flowing around and along-side the image.
  element float {
    fo_float.attlist,
    fo_float.model
}

fo_float.model =
    ( (block.fo.list | neutral.fo.list.block)+ & (point.fo.list)* )

fo_float.attlist =
    clear,
    float,
    id,
    index-class,
    index-key

fo_footnote =
## The fo:footnote is typically used to produce footnote-citations within the region-body of a page and the corresponding footnote in a separate area nearer the after-edge of the page.
  element footnote {
    fo_footnote.attlist,
    fo_footnote.model
}

fo_footnote.model =
    ( (fo_inline,fo_footnote-body) & (point.fo.list)* )

fo_footnote.attlist =
    common-accessibility-properties,
    id,
    index-class,
    index-key

fo_footnote-body =
## The fo:footnote-body is used to generate the footnote content.
  element footnote-body {
    fo_footnote-body.attlist,
    fo_footnote-body.model
}

fo_footnote-body.model =
    ( (block.fo.list | neutral.fo.list.block)+ & (point.fo.list)* )

fo_footnote-body.attlist =
    common-accessibility-properties,
    id,
    index-class,
    index-key

fo_change-bar-begin =
## The fo:change-bar-begin is used to indicate the beginning of a "change region" that is ended by the subsequent fo:change-bar-end whose change-bar-class property value matches that of the change-bar-class property on this fo:change-bar-begin and is at the same nesting level (relative to other fo:change-bar-begin/fo:change-bar-end pairs with the same change-bar-class property value) of this fo:change-bar-begin.
  element change-bar-begin {
    fo_change-bar-begin.attlist,
    fo_change-bar-begin.model
}

fo_change-bar-begin.model =
    ( empty )

fo_change-bar-begin.attlist =
    common-accessibility-properties,
    change-bar-class,
    change-bar-color,
    change-bar-offset,
    change-bar-placement,
    change-bar-style,
    change-bar-width,
    z-index

fo_change-bar-end =
## The fo:change-bar-end is used to indicate the end of a "change region" that is started by its matching fo:change-bar-begin. See for details.
  element change-bar-end {
    fo_change-bar-end.attlist,
    fo_change-bar-end.model
}

fo_change-bar-end.model =
    ( empty )

fo_change-bar-end.attlist =
    common-accessibility-properties,
    change-bar-class

fo_wrapper =
## The fo:wrapper formatting object is used to specify inherited properties for a group of formatting objects.
  element wrapper {
    fo_wrapper.attlist,
    fo_wrapper.model
}

fo_wrapper.model =
    fo_marker*,
    ( ( (text|inline.fo.list|block.fo.list | neutral.fo.list)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_wrapper.attlist =
    id,
    index-class,
    index-key

fo_marker =
## The fo:marker is used in conjunction with fo:retrieve-marker or fo:retrieve-table-marker to produce running headers or footers and dynamic table headers or footers. Typical examples include:
  element marker {
    fo_marker.attlist,
    fo_marker.model
}

fo_marker.model =
    ( ( (text|inline.fo.list|block.fo.list | neutral.fo.list)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

fo_marker.attlist =
    marker-class-name

fo_retrieve-marker =
## The fo:retrieve-marker is used in conjunction with fo:marker to produce running headers or footers. Typical examples include:
  element retrieve-marker {
    fo_retrieve-marker.attlist,
    fo_retrieve-marker.model
}

fo_retrieve-marker.model =
    ( empty )

fo_retrieve-marker.attlist =
    retrieve-boundary,
    retrieve-class-name,
    retrieve-position

fo_retrieve-table-marker =
## The fo:retrieve-table-marker is used in conjunction with fo:marker to produce table-headers and table-footers whose content can change over different pages, different regions or different columns.
  element retrieve-table-marker {
    fo_retrieve-table-marker.attlist,
    fo_retrieve-table-marker.model
}

fo_retrieve-table-marker.model =
    ( empty )

fo_retrieve-table-marker.attlist =
    retrieve-boundary-within-table,
    retrieve-class-name,
    retrieve-position-within-table

#
# Property groups
#

# Property groups also include applicable shorthands that expand to
# properties defined in the property group in the XSL spec.

common-accessibility-properties =
    role,
    source-document

common-absolute-position-properties =
    absolute-position,
    bottom,
    left,
    position,
    right,
    top

common-border-padding-and-background-properties =
    background,
    background-attachment,
    background-color,
    background-image,
    background-position,
    background-position-horizontal,
    background-position-vertical,
    background-repeat,
    border,
    border-after-color,
    border-after-style,
    border-after-width,
    border-before-color,
    border-before-style,
    border-before-width,
    border-bottom,
    border-bottom-color,
    border-bottom-style,
    border-bottom-width,
    border-color,
    border-end-color,
    border-end-style,
    border-end-width,
    border-left,
    border-left-color,
    border-left-style,
    border-left-width,
    border-right,
    border-right-color,
    border-right-style,
    border-right-width,
    border-start-color,
    border-start-style,
    border-start-width,
    border-style,
    border-top,
    border-top-color,
    border-top-style,
    border-top-width,
    border-width,
    padding,
    padding-after,
    padding-before,
    padding-bottom,
    padding-end,
    padding-left,
    padding-right,
    padding-start,
    padding-top

common-font-properties =
    font-family,
    font-selection-strategy,
    font-size,
    font-size-adjust,
    font-stretch,
    font-style,
    font-variant,
    font-weight

common-hyphenation-properties =
    country,
    hyphenate,
    hyphenation-character,
    hyphenation-push-character-count,
    hyphenation-remain-character-count,
    language,
    script

common-margin-properties-block =
    end-indent,
    margin,
    margin-bottom,
    margin-left,
    margin-right,
    margin-top,
    space-after,
    space-before,
    start-indent

common-margin-properties-inline =
    margin,
    margin-bottom,
    margin-left,
    margin-right,
    margin-top,
    space-end,
    space-start

common-relative-position-properties =
    bottom,
    left,
    position,
    relative-position,
    right,
    top

area-alignment =
    alignment-adjust,
    alignment-baseline,
    baseline-shift,
    display-align,
    dominant-baseline,
    relative-align

writing-mode-related =
    direction,
    glyph-orientation-horizontal,
    glyph-orientation-vertical,
    text-altitude,
    text-depth,
    unicode-bidi,
    writing-mode


# Properties
absolute-position =
    ## auto | absolute | fixed | inherit
    attribute absolute-position { text }?
active-state =
    ## link | visited | active | hover | focus
    attribute active-state { text }
alignment-adjust =
    ## auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | <percentage> | <length> | inherit
    attribute alignment-adjust { text }?
alignment-baseline =
    ## auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | inherit
    attribute alignment-baseline { text }?
allowed-height-scale =
    ## [ any | <percentage> ]* | inherit
    attribute allowed-height-scale { text }?
allowed-width-scale =
    ## [ any | <percentage> ]* | inherit
    attribute allowed-width-scale { text }?
auto-restore =
    ## true | false
    attribute auto-restore { text }?
background =
    ## [<background-color> || <background-image> || <background-repeat> || <background-attachment> || <background-position> ]] | inherit
    attribute background { text }?
background-attachment =
    ## scroll | fixed | inherit
    attribute background-attachment { text }?
background-color =
    ## <color> | transparent | inherit
    attribute background-color { text }?
background-image =
    ## <uri-specification> | none | inherit
    attribute background-image { text }?
background-position =
    ## [ [<percentage> | <length> ]{1,2} | [ [top | center | bottom] || [left | center | right] ] ] | inherit
    attribute background-position { text }?
background-position-horizontal =
    ## <percentage> | <length> | left | center | right | inherit
    attribute background-position-horizontal { text }?
background-position-vertical =
    ## <percentage> | <length> | top | center | bottom | inherit
    attribute background-position-vertical { text }?
background-repeat =
    ## repeat | repeat-x | repeat-y | no-repeat | inherit
    attribute background-repeat { text }?
baseline-shift =
    ## baseline | sub | super | <percentage> | <length> | inherit
    attribute baseline-shift { text }?
blank-or-not-blank =
    ## blank | not-blank | any | inherit
    attribute blank-or-not-blank { text }?
block-progression-dimension =
    ## auto | <length> | <percentage> | <length-range> | inherit
    attribute block-progression-dimension { text }?,
    attribute block-progression-dimension.minimum { text }?,
    attribute block-progression-dimension.optimum { text }?,
    attribute block-progression-dimension.maximum { text }?
border =
    ## [ <border-width> || <border-style> || [ <color> | transparent ] ] | inherit
    attribute border { text }?
border-after-color =
    ## <color> | transparent | inherit
    attribute border-after-color { text }?
border-after-precedence =
    ## force | <integer> | inherit
    attribute border-after-precedence { text }?
border-after-style =
    ## <border-style> | inherit
    attribute border-after-style { text }?
border-after-width =
    ## <border-width> | <length-conditional> | inherit
    attribute border-after-width { text }?,
    attribute border-after-width.length { text }?,
    attribute border-after-width.conditionality { text }?
border-before-color =
    ## <color> | transparent | inherit
    attribute border-before-color { text }?
border-before-precedence =
    ## force | <integer> | inherit
    attribute border-before-precedence { text }?
border-before-style =
    ## <border-style> | inherit
    attribute border-before-style { text }?
border-before-width =
    ## <border-width> | <length-conditional> | inherit
    attribute border-before-width { text }?,
    attribute border-before-width.length { text }?,
    attribute border-before-width.conditionality { text }?
border-bottom =
    ## [ <border-width> || <border-style> || [ <color> | transparent ] ] | inherit
    attribute border-bottom { text }?
border-bottom-color =
    ## <color> | transparent | inherit
    attribute border-bottom-color { text }?
border-bottom-style =
    ## <border-style> | inherit
    attribute border-bottom-style { text }?
border-bottom-width =
    ## <border-width> | inherit
    attribute border-bottom-width { text }?
border-collapse =
    ## collapse | collapse-with-precedence | separate | inherit
    attribute border-collapse { text }?
border-color =
    ## [ <color> | transparent ]{1,4} | inherit
    attribute border-color { text }?
border-end-color =
    ## <color> | transparent | inherit
    attribute border-end-color { text }?
border-end-precedence =
    ## force | <integer> | inherit
    attribute border-end-precedence { text }?
border-end-style =
    ## <border-style> | inherit
    attribute border-end-style { text }?
border-end-width =
    ## <border-width> | <length-conditional> | inherit
    attribute border-end-width { text }?,
    attribute border-end-width.length { text }?,
    attribute border-end-width.conditionality { text }?
border-left =
    ## [ <border-width> || <border-style> || [ <color> | transparent ] ] | inherit
    attribute border-left { text }?
border-left-color =
    ## <color> | transparent | inherit
    attribute border-left-color { text }?
border-left-style =
    ## <border-style> | inherit
    attribute border-left-style { text }?
border-left-width =
    ## <border-width> | inherit
    attribute border-left-width { text }?
border-right =
    ## [ <border-width> || <border-style> || [ <color> | transparent ] ] | inherit
    attribute border-right { text }?
border-right-color =
    ## <color> | transparent | inherit
    attribute border-right-color { text }?
border-right-style =
    ## <border-style> | inherit
    attribute border-right-style { text }?
border-right-width =
    ## <border-width> | inherit
    attribute border-right-width { text }?
border-separation =
    ## <length-bp-ip-direction> | inherit
    attribute border-separation { text }?
border-spacing =
    ## <length> <length>? | inherit
    attribute border-spacing { text }?
border-start-color =
    ## <color> | transparent | inherit
    attribute border-start-color { text }?
border-start-precedence =
    ## force | <integer> | inherit
    attribute border-start-precedence { text }?
border-start-style =
    ## <border-style> | inherit
    attribute border-start-style { text }?
border-start-width =
    ## <border-width> | <length-conditional> | inherit
    attribute border-start-width { text }?,
    attribute border-start-width.length { text }?,
    attribute border-start-width.conditionality { text }?
border-style =
    ## <border-style>{1,4} | inherit
    attribute border-style { text }?
border-top =
    ## [ <border-width> || <border-style> || [ <color> | transparent ] ] | inherit
    attribute border-top { text }?
border-top-color =
    ## <color> | transparent | inherit
    attribute border-top-color { text }?
border-top-style =
    ## <border-style> | inherit
    attribute border-top-style { text }?
border-top-width =
    ## <border-width> | inherit
    attribute border-top-width { text }?
border-width =
    ## <border-width>{1,4} | inherit
    attribute border-width { text }?
bottom =
    ## <length> | <percentage> | auto | inherit
    attribute bottom { text }?
break-after =
    ## auto | column | page | even-page | odd-page | inherit
    attribute break-after { text }?
break-before =
    ## auto | column | page | even-page | odd-page | inherit
    attribute break-before { text }?
caption-side =
    ## before | after | start | end | top | bottom | left | right | inherit
    attribute caption-side { text }?
case-name =
    ## <name>
    attribute case-name { xsd:NCName }
case-title =
    ## <string>
    attribute case-title { text }
change-bar-class =
    ## <name>
    attribute change-bar-class { xsd:NCName }
change-bar-color =
    ## <color>
    attribute change-bar-color { text }?
change-bar-offset =
    ## <length>
    attribute change-bar-offset { text }?
change-bar-placement =
    ## start | end | left | right | inside | outside | alternate
    attribute change-bar-placement { text }?
change-bar-style =
    ## <border-style>
    attribute change-bar-style { text }?
change-bar-width =
    ## <border-width>
    attribute change-bar-width { text }?
character =
    ## <character>
    attribute character { text }
clear =
    ## start | end | left | right | inside | outside | both | none | inherit
    attribute clear { text }?
clip =
    ## <shape> | auto | inherit
    attribute clip { text }?
color =
    ## <color> | inherit
    attribute color { text }?
color-profile-name =
    ## <name> | inherit
    attribute color-profile-name { text }
column-count =
    ## <number> | inherit
    attribute column-count { text }?
column-gap =
    ## <length> | <percentage> | inherit
    attribute column-gap { text }?
column-number =
    ## <number>
    attribute column-number { text }?
column-width =
    ## <length> | <percentage>
    attribute column-width { text }?
content-height =
    ## auto | scale-to-fit | scale-down-to-fit | scale-up-to-fit | <length> | <percentage> | inherit
    attribute content-height { text }?
content-type =
    ## <string> | auto
    attribute content-type { text }?
content-width =
    ## auto | scale-to-fit | scale-down-to-fit | scale-up-to-fit | <length> | <percentage> | inherit
    attribute content-width { text }?
country =
    ## none | <country> | inherit
    attribute country { text }?
cue =
    ## <cue-before> || <cue-after> | inherit
    attribute cue { text }?
destination-placement-offset =
    ## <length>
    attribute destination-placement-offset { text }?
direction =
    ## ltr | rtl | inherit
    attribute direction { text }?
display-align =
    ## auto | before | center | after | inherit
    attribute display-align { text }?
dominant-baseline =
    ## auto | use-script | no-change | reset-size | ideographic | alphabetic | hanging | mathematical | central | middle | text-after-edge | text-before-edge | inherit
    attribute dominant-baseline { text }?
empty-cells =
    ## show | hide | inherit
    attribute empty-cells { text }?
end-indent =
    ## <length> | <percentage> | inherit
    attribute end-indent { text }?
ends-row =
    ## true | false
    attribute ends-row { text }?
extent =
    ## <length> | <percentage> | inherit
    attribute extent { text }?
external-destination =
    ## empty string | <uri-specification>
    attribute external-destination { text }?
float =
    ## before | start | end | left | right | inside | outside | none | inherit
    attribute float { text }?
flow-map-name =
    ## <name>
    attribute flow-map-name { xsd:NCName }
flow-map-reference =
    ## <name>
    attribute flow-map-reference { xsd:NCName }?
flow-name =
    ## <name>
    attribute flow-name { xsd:NCName }?
flow-name-reference =
    ## <name>
    attribute flow-name-reference { xsd:NCName }
font =
    ## [ [ <font-style> || <font-variant> || <font-weight> ]? <font-size> [ / <line-height>]? <font-family> ] | caption | icon | menu | message-box | small-caption | status-bar | inherit
    attribute font { text }?
font-family =
    ## [[ <family-name> | <generic-family> ],]* [<family-name> | <generic-family>] | inherit
    attribute font-family { text }?
font-selection-strategy =
    ## auto | character-by-character | inherit
    attribute font-selection-strategy { text }?
font-size =
    ## <absolute-size> | <relative-size> | <length> | <percentage> | inherit
    attribute font-size { text }?
font-size-adjust =
    ## <number> | none | inherit
    attribute font-size-adjust { text }?
font-stretch =
    ## normal | wider | narrower | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | inherit
    attribute font-stretch { text }?
font-style =
    ## normal | italic | oblique | backslant | inherit
    attribute font-style { text }?
font-variant =
    ## normal | small-caps | inherit
    attribute font-variant { text }?
font-weight =
    ## normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit
    attribute font-weight { text }?
force-page-count =
    ## auto | even | odd | end-on-even | end-on-odd | no-force | inherit
    attribute force-page-count { text }?
format =
    ## <string>
    attribute format { text }?
glyph-orientation-horizontal =
    ## <angle> | inherit
    attribute glyph-orientation-horizontal { text }?
glyph-orientation-vertical =
    ## auto | <angle> | inherit
    attribute glyph-orientation-vertical { text }?
grouping-separator =
    ## <character>
    attribute grouping-separator { text }?
grouping-size =
    ## <number>
    attribute grouping-size { text }?
height =
    ## <length> | <percentage> | auto | inherit
    attribute height { text }?
hyphenate =
    ## false | true | inherit
    attribute hyphenate { text }?
hyphenation-character =
    ## <character> | inherit
    attribute hyphenation-character { text }?
hyphenation-keep =
    ## auto | column | page | inherit
    attribute hyphenation-keep { text }?
hyphenation-ladder-count =
    ## no-limit | <number> | inherit
    attribute hyphenation-ladder-count { text }?
hyphenation-push-character-count =
    ## <number> | inherit
    attribute hyphenation-push-character-count { text }?
hyphenation-remain-character-count =
    ## <number> | inherit
    attribute hyphenation-remain-character-count { text }?
id =
    ## <id>
    attribute id { xsd:ID }?
index-class =
    ## <string>
    attribute index-class { text }?
index-key =
    ## <string>
    attribute index-key { text }?
indicate-destination =
    ## true | false
    attribute indicate-destination { text }?
initial-page-number =
    ## auto | auto-odd | auto-even | <number> | inherit
    attribute initial-page-number { text }?
inline-progression-dimension =
    ## auto | <length> | <percentage> | <length-range> | inherit
    attribute inline-progression-dimension { text }?,
    attribute inline-progression-dimension.minimum { text }?,
    attribute inline-progression-dimension.optimum { text }?,
    attribute inline-progression-dimension.maximum { text }?
internal-destination =
    ## empty string | <idref>
    attribute internal-destination { text }?
intrinsic-scale-value =
    ## <percentage> | inherit
    attribute intrinsic-scale-value { text }?
intrusion-displace =
    ## auto | none | line | indent | block | inherit
    attribute intrusion-displace { text }?
keep-together =
    ## <keep> | inherit
    attribute keep-together { text }?,
    attribute keep-together.within-line { text }?,
    attribute keep-together.within-column { text }?,
    attribute keep-together.within-page { text }?
keep-with-next =
    ## <keep> | inherit
    attribute keep-with-next { text }?,
    attribute keep-with-next.within-line { text }?,
    attribute keep-with-next.within-column { text }?,
    attribute keep-with-next.within-page { text }?
keep-with-previous =
    ## <keep> | inherit
    attribute keep-with-previous { text }?,
    attribute keep-with-previous.within-line { text }?,
    attribute keep-with-previous.within-column { text }?,
    attribute keep-with-previous.within-page { text }?
language =
    ## none | <language> | inherit
    attribute language { text }?
last-line-end-indent =
    ## <length> | <percentage> | inherit
    attribute last-line-end-indent { text }?
leader-alignment =
    ## none | reference-area | page | inherit
    attribute leader-alignment { text }?
leader-length =
    ## <length-range> | <percentage> | inherit
    attribute leader-length { text }?,
    attribute leader-length.minimum { text }?,
    attribute leader-length.optimum { text }?,
    attribute leader-length.maximum { text }?
leader-pattern =
    ## space | rule | dots | use-content | inherit
    attribute leader-pattern { text }?
leader-pattern-width =
    ## use-font-metrics | <length> | <percentage> | inherit
    attribute leader-pattern-width { text }?
left =
    ## <length> | <percentage> | auto | inherit
    attribute left { text }?
letter-spacing =
    ## normal | <length> | <space> | inherit
    attribute letter-spacing { text }?,
    attribute letter-spacing.minimum { text }?,
    attribute letter-spacing.optimum { text }?,
    attribute letter-spacing.maximum { text }?,
    attribute letter-spacing.precedence { text }?,
    attribute letter-spacing.conditionality { text }?
letter-value =
    ## auto | alphabetic | traditional
    attribute letter-value { text }?
linefeed-treatment =
    ## ignore | preserve | treat-as-space | treat-as-zero-width-space | inherit
    attribute linefeed-treatment { text }?
line-height =
    ## normal | <length> | <number> | <percentage> | <space> | inherit
    attribute line-height { text }?,
    attribute line-height.minimum { text }?,
    attribute line-height.optimum { text }?,
    attribute line-height.maximum { text }?,
    attribute line-height.precedence { text }?,
    attribute line-height.conditionality { text }?
line-height-shift-adjustment =
    ## consider-shifts | disregard-shifts | inherit
    attribute line-height-shift-adjustment { text }?
line-stacking-strategy =
    ## line-height | font-height | max-height | inherit
    attribute line-stacking-strategy { text }?
margin =
    ## <margin-width>{1,4} | inherit
    attribute margin { text }?
margin-bottom =
    ## <margin-width> | inherit
    attribute margin-bottom { text }?
margin-left =
    ## <margin-width> | inherit
    attribute margin-left { text }?
margin-right =
    ## <margin-width> | inherit
    attribute margin-right { text }?
margin-top =
    ## <margin-width> | inherit
    attribute margin-top { text }?
marker-class-name =
    ## <name>
    attribute marker-class-name { xsd:NCName }?
master-name =
    ## <name>
    attribute master-name { xsd:NCName }?
master-reference =
    ## <name>
    attribute master-reference { xsd:NCName }?
max-height =
    ## <length> | <percentage> | none | inherit
    attribute max-height { text }?
maximum-repeats =
    ## <number> | no-limit | inherit
    attribute maximum-repeats { text }?
max-width =
    ## <length> | <percentage> | none | inherit
    attribute max-width { text }?
media-usage =
    ## auto | paginate | bounded-in-one-dimension | unbounded
    attribute media-usage { text }?
merge-pages-across-index-key-references =
    ## merge | leave-separate
    attribute merge-pages-across-index-key-references { text }?
merge-ranges-across-index-key-references =
    ## merge | leave-separate
    attribute merge-ranges-across-index-key-references { text }?
merge-sequential-page-numbers =
    ## merge | leave-separate
    attribute merge-sequential-page-numbers { text }?
min-height =
    ## <length> | <percentage> | inherit
    attribute min-height { text }?
min-width =
    ## <length> | <percentage> | inherit
    attribute min-width { text }?
number-columns-repeated =
    ## <number>
    attribute number-columns-repeated { text }?
number-columns-spanned =
    ## <number>
    attribute number-columns-spanned { text }?
number-rows-spanned =
    ## <number>
    attribute number-rows-spanned { text }?
odd-or-even =
    ## odd | even | any | inherit
    attribute odd-or-even { text }?
orphans =
    ## <integer> | inherit
    attribute orphans { text }?
overflow =
    ## visible | hidden | scroll | error-if-overflow | repeat | auto | inherit
    attribute overflow { text }?
padding =
    ## <padding-width>{1,4} | inherit
    attribute padding { text }?
padding-after =
    ## <padding-width> | <length-conditional> | inherit
    attribute padding-after { text }?,
    attribute padding-after.length { text }?,
    attribute padding-after.conditionality { text }?
padding-before =
    ## <padding-width> | <length-conditional> | inherit
    attribute padding-before { text }?,
    attribute padding-before.length { text }?,
    attribute padding-before.conditionality { text }?
padding-bottom =
    ## <padding-width> | inherit
    attribute padding-bottom { text }?
padding-end =
    ## <padding-width> | <length-conditional> | inherit
    attribute padding-end { text }?,
    attribute padding-end.length { text }?,
    attribute padding-end.conditionality { text }?
padding-left =
    ## <padding-width> | inherit
    attribute padding-left { text }?
padding-right =
    ## <padding-width> | inherit
    attribute padding-right { text }?
padding-start =
    ## <padding-width> | <length-conditional> | inherit
    attribute padding-start { text }?,
    attribute padding-start.length { text }?,
    attribute padding-start.conditionality { text }?
padding-top =
    ## <padding-width> | inherit
    attribute padding-top { text }?
page-break-after =
    ## auto | always | avoid | left | right | inherit
    attribute page-break-after { text }?
page-break-before =
    ## auto | always | avoid | left | right | inherit
    attribute page-break-before { text }?
page-break-inside =
    ## avoid | auto | inherit
    attribute page-break-inside { text }?
page-citation-strategy =
    ## [ all | normal | non-blank | inherit
    attribute page-citation-strategy { text }?
page-height =
    ## auto | indefinite | <length> | inherit
    attribute page-height { text }?
page-number-treatment =
    ## link | no-link
    attribute page-number-treatment { text }?
page-position =
    ## only | first | last | rest | any | inherit
    attribute page-position { text }?
page-width =
    ## auto | indefinite | <length> | inherit
    attribute page-width { text }?
pause =
    ## [<time> | <percentage>]{1,2} | inherit
    attribute pause { text }?
position =
    ## static | relative | absolute | fixed | inherit
    attribute position { text }?
precedence =
    ## true | false | inherit
    attribute precedence { text }?
provisional-distance-between-starts =
    ## <length> | <percentage> | inherit
    attribute provisional-distance-between-starts { text }?
provisional-label-separation =
    ## <length> | <percentage> | inherit
    attribute provisional-label-separation { text }?
reference-orientation =
    ## 0 | 90 | 180 | 270 | -90 | -180 | -270 | inherit
    attribute reference-orientation { text }?
ref-id =
    ## <idref> | inherit
    attribute ref-id { text }
ref-index-key =
    ## <string>
    attribute ref-index-key { text }
region-name =
    ## xsl-region-body | xsl-region-start | xsl-region-end | xsl-region-before | xsl-region-after | <name>
    attribute region-name { text }?
region-name-reference =
    ## <name>
    attribute region-name-reference { xsd:NCName }
relative-align =
    ## before | baseline | inherit
    attribute relative-align { text }?
relative-position =
    ## static | relative | inherit
    attribute relative-position { text }?
rendering-intent =
    ## auto | perceptual | relative-colorimetric | saturation | absolute-colorimetric | inherit
    attribute rendering-intent { text }?
retrieve-boundary =
    ## page | page-sequence | document
    attribute retrieve-boundary { text }?
retrieve-boundary-within-table =
    ## table | table-fragment | page
    attribute retrieve-boundary-within-table { text }?
retrieve-class-name =
    ## <name>
    attribute retrieve-class-name { xsd:NCName }?
retrieve-position =
    ## first-starting-within-page | first-including-carryover | last-starting-within-page | last-ending-within-page
    attribute retrieve-position { text }?
retrieve-position-within-table =
    ## first-starting | first-including-carryover | last-starting | last-ending
    attribute retrieve-position-within-table { text }?
right =
    ## <length> | <percentage> | auto | inherit
    attribute right { text }?
role =
    ## <string> | <uri-specification> | none | inherit
    attribute role { text }?
rule-style =
    ## none | dotted | dashed | solid | double | groove | ridge | inherit
    attribute rule-style { text }?
rule-thickness =
    ## <length>
    attribute rule-thickness { text }?
scale-option =
    ## width | height | inherit
    attribute scale-option { text }?
scaling =
    ## uniform | non-uniform | inherit
    attribute scaling { text }?
scaling-method =
    ## auto | integer-pixels | resample-any-method | inherit
    attribute scaling-method { text }?
score-spaces =
    ## true | false | inherit
    attribute score-spaces { text }?
script =
    ## none | auto | <script> | inherit
    attribute script { text }?
show-destination =
    ## replace | new
    attribute show-destination { text }?
size =
    ## <length>{1,2} | auto | landscape | portrait | inherit
    attribute size { text }?
source-document =
    ## <uri-specification> [<uri-specification>]* | none | inherit
    attribute source-document { text }?
space-after =
    ## <space> | inherit
    attribute space-after { text }?,
    attribute space-after.minimum { text }?,
    attribute space-after.optimum { text }?,
    attribute space-after.maximum { text }?,
    attribute space-after.precedence { text }?,
    attribute space-after.conditionality { text }?
space-before =
    ## <space> | inherit
    attribute space-before { text }?,
    attribute space-before.minimum { text }?,
    attribute space-before.optimum { text }?,
    attribute space-before.maximum { text }?,
    attribute space-before.precedence { text }?,
    attribute space-before.conditionality { text }?
space-end =
    ## <space> | <percentage> | inherit
    attribute space-end { text }?,
    attribute space-end.minimum { text }?,
    attribute space-end.optimum { text }?,
    attribute space-end.maximum { text }?,
    attribute space-end.precedence { text }?,
    attribute space-end.conditionality { text }?
space-start =
    ## <space> | <percentage> | inherit
    attribute space-start { text }?,
    attribute space-start.minimum { text }?,
    attribute space-start.optimum { text }?,
    attribute space-start.maximum { text }?,
    attribute space-start.precedence { text }?,
    attribute space-start.conditionality { text }?
span =
    ## none | all | inherit
    attribute span { text }?
src =
    ## <uri-specification> | inherit
    attribute src { text }
start-indent =
    ## <length> | <percentage> | inherit
    attribute start-indent { text }?
starting-state =
    ## show | hide
    attribute starting-state { text }?
starts-row =
    ## true | false
    attribute starts-row { text }?
suppress-at-line-break =
    ## auto | suppress | retain | inherit
    attribute suppress-at-line-break { text }?
switch-to =
    ## xsl-preceding | xsl-following | xsl-any | <name>[ <name>]*
    attribute switch-to { text }?
table-layout =
    ## auto | fixed | inherit
    attribute table-layout { text }?
table-omit-footer-at-break =
    ## true | false
    attribute table-omit-footer-at-break { text }?
table-omit-header-at-break =
    ## true | false
    attribute table-omit-header-at-break { text }?
target-presentation-context =
    ## use-target-processing-context | <uri-specification>
    attribute target-presentation-context { text }?
target-processing-context =
    ## document-root | <uri-specification>
    attribute target-processing-context { text }?
target-stylesheet =
    ## use-normal-stylesheet | <uri-specification>
    attribute target-stylesheet { text }?
text-align =
    ## start | center | end | justify | inside | outside | left | right | <string> | inherit
    attribute text-align { text }?
text-align-last =
    ## relative | start | center | end | justify | inside | outside | left | right | inherit
    attribute text-align-last { text }?
text-altitude =
    ## use-font-metrics | <length> | <percentage> | inherit
    attribute text-altitude { text }?
text-decoration =
    ## none | [ [ underline | no-underline] || [ overline | no-overline ] || [ line-through | no-line-through ] || [ blink | no-blink ] ] | inherit
    attribute text-decoration { text }?
text-depth =
    ## use-font-metrics | <length> | <percentage> | inherit
    attribute text-depth { text }?
text-indent =
    ## <length> | <percentage> | inherit
    attribute text-indent { text }?
text-shadow =
    ## none | [<color> || <length> <length> <length>? ,]* [<color> || <length> <length> <length>?] | inherit
    attribute text-shadow { text }?
text-transform =
    ## capitalize | uppercase | lowercase | none | inherit
    attribute text-transform { text }?
top =
    ## <length> | <percentage> | auto | inherit
    attribute top { text }?
treat-as-word-space =
    ## auto | true | false | inherit
    attribute treat-as-word-space { text }?
unicode-bidi =
    ## normal | embed | bidi-override | inherit
    attribute unicode-bidi { text }?
vertical-align =
    ## baseline | middle | sub | super | text-top | text-bottom | <percentage> | <length> | top | bottom | inherit
    attribute vertical-align { text }?
visibility =
    ## visible | hidden | collapse | inherit
    attribute visibility { text }?
white-space =
    ## normal | pre | nowrap | inherit
    attribute white-space { text }?
white-space-collapse =
    ## false | true | inherit
    attribute white-space-collapse { text }?
white-space-treatment =
    ## ignore | preserve | ignore-if-before-linefeed | ignore-if-after-linefeed | ignore-if-surrounding-linefeed | inherit
    attribute white-space-treatment { text }?
widows =
    ## <integer> | inherit
    attribute widows { text }?
width =
    ## <length> | <percentage> | auto | inherit
    attribute width { text }?
word-spacing =
    ## normal | <length> | <space> | inherit
    attribute word-spacing { text }?,
    attribute word-spacing.minimum { text }?,
    attribute word-spacing.optimum { text }?,
    attribute word-spacing.maximum { text }?,
    attribute word-spacing.precedence { text }?,
    attribute word-spacing.conditionality { text }?
wrap-option =
    ## no-wrap | wrap | inherit
    attribute wrap-option { text }?
writing-mode =
    ## lr-tb | rl-tb | tb-rl | tb-lr | bt-lr | bt-rl | lr-bt | rl-bt | lr-alternating-rl-bt | lr-alternating-rl-tb | lr-inverting-rl-bt | lr-inverting-rl-tb | tb-lr-in-lr-pairs | lr | rl | tb | inherit
    attribute writing-mode { text }?
xml.lang =
    ## <language-country> | inherit
    attribute xml:lang { xsd:language }?
z-index =
    ## auto | <integer> | inherit
    attribute z-index { text }?

#
# Additional patterns
#

# For fo:instream-foreign-object
anything =
   ( element * {
        attribute * - id { text }*,
        anything } |
     text )*

non-xsl =
  ( attribute * - ( local:* | xml:* ) { text }*,
    element * - ( local:* | fo:* ) { attribute * { text }*, anything }* )

# From http://www.w3.org/TR/xsl/#fo_wrapper:
#
#    An fo:wrapper is only permitted to have children that would be #
#    permitted to be children of the parent of the fo:wrapper
#
fo_wrapper.block =
## The fo:wrapper formatting object is used to specify inherited properties for a group of formatting objects.
  element wrapper {
    fo_wrapper.attlist,
    fo_wrapper.model.block
}

fo_wrapper.model.block =
    fo_marker*,
    ( ( ( (text|block.fo.list)* | neutral.fo.list.block)* ) & (point.fo.list)* )

fo_wrapper.inline =
## The fo:wrapper formatting object is used to specify inherited properties for a group of formatting objects.
  element wrapper {
    fo_wrapper.attlist,
    fo_wrapper.model.inline
}

fo_wrapper.model.inline =
    fo_marker*,
    ( ( ( (text|inline.fo.list)* | neutral.fo.list.inline)* & (inline.out-of-line.fo.list)* ) & (point.fo.list)* )

#
# FO groups
#

block.fo.list =
      fo_block
      | fo_block-container
      | fo_table-and-caption
      | fo_table
      | fo_list-block

inline.fo.list =
      fo_bidi-override
      | fo_character
      | fo_external-graphic
      | fo_instream-foreign-object
      | fo_inline
      | fo_inline-container
      | fo_leader
      | fo_page-number
      | fo_page-number-citation
      | fo_page-number-citation-last
      | fo_scaling-value-citation
      | fo_basic-link
      | fo_multi-toggle
      | fo_index-page-citation-list

neutral.fo.list =
      fo_multi-switch
      | fo_multi-properties
      | fo_index-range-begin
      | fo_index-range-end
      | fo_wrapper
      | fo_retrieve-marker
      | fo_retrieve-table-marker # Rely on Schematron to indicate where invalid
      | fo_float # Rely on Schematron to indicate where invalid

neutral.fo.list.block =
      fo_multi-switch
      | fo_multi-properties
      | fo_index-range-begin
      | fo_index-range-end
      | fo_wrapper.block
      | fo_retrieve-marker
      | fo_retrieve-table-marker # Rely on Schematron to indicate where invalid
      | fo_float # Rely on Schematron to indicate where invalid

neutral.fo.list.inline =
      fo_multi-switch
      | fo_multi-properties
      | fo_index-range-begin
      | fo_index-range-end
      | fo_wrapper.inline
      | fo_retrieve-marker
      | fo_retrieve-table-marker # Rely on Schematron to indicate where invalid
      | fo_float # Rely on Schematron to indicate where invalid

inline.out-of-line.fo.list =
      fo_footnote

point.fo.list =
      fo_change-bar-begin
      | fo_change-bar-end

# End.
